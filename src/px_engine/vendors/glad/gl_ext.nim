#[
    OpenGL loader generated by glad 0.1.35 on Thu May  5 07:56:17 2022.

    Language/Generator: Nim
    Specification: gl
    APIs: gl=4.6
    Profile: core
    Extensions:
        GL_3DFX_multisample,
        GL_3DFX_tbuffer,
        GL_3DFX_texture_compression_FXT1,
        GL_AMD_blend_minmax_factor,
        GL_AMD_conservative_depth,
        GL_AMD_debug_output,
        GL_AMD_depth_clamp_separate,
        GL_AMD_draw_buffers_blend,
        GL_AMD_framebuffer_multisample_advanced,
        GL_AMD_framebuffer_sample_positions,
        GL_AMD_gcn_shader,
        GL_AMD_gpu_shader_half_float,
        GL_AMD_gpu_shader_int16,
        GL_AMD_gpu_shader_int64,
        GL_AMD_interleaved_elements,
        GL_AMD_multi_draw_indirect,
        GL_AMD_name_gen_delete,
        GL_AMD_occlusion_query_event,
        GL_AMD_performance_monitor,
        GL_AMD_pinned_memory,
        GL_AMD_query_buffer_object,
        GL_AMD_sample_positions,
        GL_AMD_seamless_cubemap_per_texture,
        GL_AMD_shader_atomic_counter_ops,
        GL_AMD_shader_ballot,
        GL_AMD_shader_explicit_vertex_parameter,
        GL_AMD_shader_gpu_shader_half_float_fetch,
        GL_AMD_shader_image_load_store_lod,
        GL_AMD_shader_stencil_export,
        GL_AMD_shader_trinary_minmax,
        GL_AMD_sparse_texture,
        GL_AMD_stencil_operation_extended,
        GL_AMD_texture_gather_bias_lod,
        GL_AMD_texture_texture4,
        GL_AMD_transform_feedback3_lines_triangles,
        GL_AMD_transform_feedback4,
        GL_AMD_vertex_shader_layer,
        GL_AMD_vertex_shader_tessellator,
        GL_AMD_vertex_shader_viewport_index,
        GL_APPLE_aux_depth_stencil,
        GL_APPLE_client_storage,
        GL_APPLE_element_array,
        GL_APPLE_fence,
        GL_APPLE_float_pixels,
        GL_APPLE_flush_buffer_range,
        GL_APPLE_object_purgeable,
        GL_APPLE_rgb_422,
        GL_APPLE_row_bytes,
        GL_APPLE_specular_vector,
        GL_APPLE_texture_range,
        GL_APPLE_transform_hint,
        GL_APPLE_vertex_array_object,
        GL_APPLE_vertex_array_range,
        GL_APPLE_vertex_program_evaluators,
        GL_APPLE_ycbcr_422,
        GL_ARB_ES2_compatibility,
        GL_ARB_ES3_1_compatibility,
        GL_ARB_ES3_2_compatibility,
        GL_ARB_ES3_compatibility,
        GL_ARB_arrays_of_arrays,
        GL_ARB_base_instance,
        GL_ARB_bindless_texture,
        GL_ARB_blend_func_extended,
        GL_ARB_buffer_storage,
        GL_ARB_cl_event,
        GL_ARB_clear_buffer_object,
        GL_ARB_clear_texture,
        GL_ARB_clip_control,
        GL_ARB_color_buffer_float,
        GL_ARB_compatibility,
        GL_ARB_compressed_texture_pixel_storage,
        GL_ARB_compute_shader,
        GL_ARB_compute_variable_group_size,
        GL_ARB_conditional_render_inverted,
        GL_ARB_conservative_depth,
        GL_ARB_copy_buffer,
        GL_ARB_copy_image,
        GL_ARB_cull_distance,
        GL_ARB_debug_output,
        GL_ARB_depth_buffer_float,
        GL_ARB_depth_clamp,
        GL_ARB_depth_texture,
        GL_ARB_derivative_control,
        GL_ARB_direct_state_access,
        GL_ARB_draw_buffers,
        GL_ARB_draw_buffers_blend,
        GL_ARB_draw_elements_base_vertex,
        GL_ARB_draw_indirect,
        GL_ARB_draw_instanced,
        GL_ARB_enhanced_layouts,
        GL_ARB_explicit_attrib_location,
        GL_ARB_explicit_uniform_location,
        GL_ARB_fragment_coord_conventions,
        GL_ARB_fragment_layer_viewport,
        GL_ARB_fragment_program,
        GL_ARB_fragment_program_shadow,
        GL_ARB_fragment_shader,
        GL_ARB_fragment_shader_interlock,
        GL_ARB_framebuffer_no_attachments,
        GL_ARB_framebuffer_object,
        GL_ARB_framebuffer_sRGB,
        GL_ARB_geometry_shader4,
        GL_ARB_get_program_binary,
        GL_ARB_get_texture_sub_image,
        GL_ARB_gl_spirv,
        GL_ARB_gpu_shader5,
        GL_ARB_gpu_shader_fp64,
        GL_ARB_gpu_shader_int64,
        GL_ARB_half_float_pixel,
        GL_ARB_half_float_vertex,
        GL_ARB_imaging,
        GL_ARB_indirect_parameters,
        GL_ARB_instanced_arrays,
        GL_ARB_internalformat_query,
        GL_ARB_internalformat_query2,
        GL_ARB_invalidate_subdata,
        GL_ARB_map_buffer_alignment,
        GL_ARB_map_buffer_range,
        GL_ARB_matrix_palette,
        GL_ARB_multi_bind,
        GL_ARB_multi_draw_indirect,
        GL_ARB_multisample,
        GL_ARB_multitexture,
        GL_ARB_occlusion_query,
        GL_ARB_occlusion_query2,
        GL_ARB_parallel_shader_compile,
        GL_ARB_pipeline_statistics_query,
        GL_ARB_pixel_buffer_object,
        GL_ARB_point_parameters,
        GL_ARB_point_sprite,
        GL_ARB_polygon_offset_clamp,
        GL_ARB_post_depth_coverage,
        GL_ARB_program_interface_query,
        GL_ARB_provoking_vertex,
        GL_ARB_query_buffer_object,
        GL_ARB_robust_buffer_access_behavior,
        GL_ARB_robustness,
        GL_ARB_robustness_isolation,
        GL_ARB_sample_locations,
        GL_ARB_sample_shading,
        GL_ARB_sampler_objects,
        GL_ARB_seamless_cube_map,
        GL_ARB_seamless_cubemap_per_texture,
        GL_ARB_separate_shader_objects,
        GL_ARB_shader_atomic_counter_ops,
        GL_ARB_shader_atomic_counters,
        GL_ARB_shader_ballot,
        GL_ARB_shader_bit_encoding,
        GL_ARB_shader_clock,
        GL_ARB_shader_draw_parameters,
        GL_ARB_shader_group_vote,
        GL_ARB_shader_image_load_store,
        GL_ARB_shader_image_size,
        GL_ARB_shader_objects,
        GL_ARB_shader_precision,
        GL_ARB_shader_stencil_export,
        GL_ARB_shader_storage_buffer_object,
        GL_ARB_shader_subroutine,
        GL_ARB_shader_texture_image_samples,
        GL_ARB_shader_texture_lod,
        GL_ARB_shader_viewport_layer_array,
        GL_ARB_shading_language_100,
        GL_ARB_shading_language_420pack,
        GL_ARB_shading_language_include,
        GL_ARB_shading_language_packing,
        GL_ARB_shadow,
        GL_ARB_shadow_ambient,
        GL_ARB_sparse_buffer,
        GL_ARB_sparse_texture,
        GL_ARB_sparse_texture2,
        GL_ARB_sparse_texture_clamp,
        GL_ARB_spirv_extensions,
        GL_ARB_stencil_texturing,
        GL_ARB_sync,
        GL_ARB_tessellation_shader,
        GL_ARB_texture_barrier,
        GL_ARB_texture_border_clamp,
        GL_ARB_texture_buffer_object,
        GL_ARB_texture_buffer_object_rgb32,
        GL_ARB_texture_buffer_range,
        GL_ARB_texture_compression,
        GL_ARB_texture_compression_bptc,
        GL_ARB_texture_compression_rgtc,
        GL_ARB_texture_cube_map,
        GL_ARB_texture_cube_map_array,
        GL_ARB_texture_env_add,
        GL_ARB_texture_env_combine,
        GL_ARB_texture_env_crossbar,
        GL_ARB_texture_env_dot3,
        GL_ARB_texture_filter_anisotropic,
        GL_ARB_texture_filter_minmax,
        GL_ARB_texture_float,
        GL_ARB_texture_gather,
        GL_ARB_texture_mirror_clamp_to_edge,
        GL_ARB_texture_mirrored_repeat,
        GL_ARB_texture_multisample,
        GL_ARB_texture_non_power_of_two,
        GL_ARB_texture_query_levels,
        GL_ARB_texture_query_lod,
        GL_ARB_texture_rectangle,
        GL_ARB_texture_rg,
        GL_ARB_texture_rgb10_a2ui,
        GL_ARB_texture_stencil8,
        GL_ARB_texture_storage,
        GL_ARB_texture_storage_multisample,
        GL_ARB_texture_swizzle,
        GL_ARB_texture_view,
        GL_ARB_timer_query,
        GL_ARB_transform_feedback2,
        GL_ARB_transform_feedback3,
        GL_ARB_transform_feedback_instanced,
        GL_ARB_transform_feedback_overflow_query,
        GL_ARB_transpose_matrix,
        GL_ARB_uniform_buffer_object,
        GL_ARB_vertex_array_bgra,
        GL_ARB_vertex_array_object,
        GL_ARB_vertex_attrib_64bit,
        GL_ARB_vertex_attrib_binding,
        GL_ARB_vertex_blend,
        GL_ARB_vertex_buffer_object,
        GL_ARB_vertex_program,
        GL_ARB_vertex_shader,
        GL_ARB_vertex_type_10f_11f_11f_rev,
        GL_ARB_vertex_type_2_10_10_10_rev,
        GL_ARB_viewport_array,
        GL_ARB_window_pos,
        GL_ATI_draw_buffers,
        GL_ATI_element_array,
        GL_ATI_envmap_bumpmap,
        GL_ATI_fragment_shader,
        GL_ATI_map_object_buffer,
        GL_ATI_meminfo,
        GL_ATI_pixel_format_float,
        GL_ATI_pn_triangles,
        GL_ATI_separate_stencil,
        GL_ATI_text_fragment_shader,
        GL_ATI_texture_env_combine3,
        GL_ATI_texture_float,
        GL_ATI_texture_mirror_once,
        GL_ATI_vertex_array_object,
        GL_ATI_vertex_attrib_array_object,
        GL_ATI_vertex_streams,
        GL_EXT_422_pixels,
        GL_EXT_EGL_image_storage,
        GL_EXT_EGL_sync,
        GL_EXT_abgr,
        GL_EXT_bgra,
        GL_EXT_bindable_uniform,
        GL_EXT_blend_color,
        GL_EXT_blend_equation_separate,
        GL_EXT_blend_func_separate,
        GL_EXT_blend_logic_op,
        GL_EXT_blend_minmax,
        GL_EXT_blend_subtract,
        GL_EXT_clip_volume_hint,
        GL_EXT_cmyka,
        GL_EXT_color_subtable,
        GL_EXT_compiled_vertex_array,
        GL_EXT_convolution,
        GL_EXT_coordinate_frame,
        GL_EXT_copy_texture,
        GL_EXT_cull_vertex,
        GL_EXT_debug_label,
        GL_EXT_debug_marker,
        GL_EXT_depth_bounds_test,
        GL_EXT_direct_state_access,
        GL_EXT_draw_buffers2,
        GL_EXT_draw_instanced,
        GL_EXT_draw_range_elements,
        GL_EXT_external_buffer,
        GL_EXT_fog_coord,
        GL_EXT_framebuffer_blit,
        GL_EXT_framebuffer_multisample,
        GL_EXT_framebuffer_multisample_blit_scaled,
        GL_EXT_framebuffer_object,
        GL_EXT_framebuffer_sRGB,
        GL_EXT_geometry_shader4,
        GL_EXT_gpu_program_parameters,
        GL_EXT_gpu_shader4,
        GL_EXT_histogram,
        GL_EXT_index_array_formats,
        GL_EXT_index_func,
        GL_EXT_index_material,
        GL_EXT_index_texture,
        GL_EXT_light_texture,
        GL_EXT_memory_object,
        GL_EXT_memory_object_fd,
        GL_EXT_memory_object_win32,
        GL_EXT_misc_attribute,
        GL_EXT_multi_draw_arrays,
        GL_EXT_multisample,
        GL_EXT_multiview_tessellation_geometry_shader,
        GL_EXT_multiview_texture_multisample,
        GL_EXT_multiview_timer_query,
        GL_EXT_packed_depth_stencil,
        GL_EXT_packed_float,
        GL_EXT_packed_pixels,
        GL_EXT_paletted_texture,
        GL_EXT_pixel_buffer_object,
        GL_EXT_pixel_transform,
        GL_EXT_pixel_transform_color_table,
        GL_EXT_point_parameters,
        GL_EXT_polygon_offset,
        GL_EXT_polygon_offset_clamp,
        GL_EXT_post_depth_coverage,
        GL_EXT_provoking_vertex,
        GL_EXT_raster_multisample,
        GL_EXT_rescale_normal,
        GL_EXT_secondary_color,
        GL_EXT_semaphore,
        GL_EXT_semaphore_fd,
        GL_EXT_semaphore_win32,
        GL_EXT_separate_shader_objects,
        GL_EXT_separate_specular_color,
        GL_EXT_shader_framebuffer_fetch,
        GL_EXT_shader_framebuffer_fetch_non_coherent,
        GL_EXT_shader_image_load_formatted,
        GL_EXT_shader_image_load_store,
        GL_EXT_shader_integer_mix,
        GL_EXT_shadow_funcs,
        GL_EXT_shared_texture_palette,
        GL_EXT_sparse_texture2,
        GL_EXT_stencil_clear_tag,
        GL_EXT_stencil_two_side,
        GL_EXT_stencil_wrap,
        GL_EXT_subtexture,
        GL_EXT_texture,
        GL_EXT_texture3D,
        GL_EXT_texture_array,
        GL_EXT_texture_buffer_object,
        GL_EXT_texture_compression_latc,
        GL_EXT_texture_compression_rgtc,
        GL_EXT_texture_compression_s3tc,
        GL_EXT_texture_cube_map,
        GL_EXT_texture_env_add,
        GL_EXT_texture_env_combine,
        GL_EXT_texture_env_dot3,
        GL_EXT_texture_filter_anisotropic,
        GL_EXT_texture_filter_minmax,
        GL_EXT_texture_integer,
        GL_EXT_texture_lod_bias,
        GL_EXT_texture_mirror_clamp,
        GL_EXT_texture_object,
        GL_EXT_texture_perturb_normal,
        GL_EXT_texture_sRGB,
        GL_EXT_texture_sRGB_R8,
        GL_EXT_texture_sRGB_RG8,
        GL_EXT_texture_sRGB_decode,
        GL_EXT_texture_shadow_lod,
        GL_EXT_texture_shared_exponent,
        GL_EXT_texture_snorm,
        GL_EXT_texture_storage,
        GL_EXT_texture_swizzle,
        GL_EXT_timer_query,
        GL_EXT_transform_feedback,
        GL_EXT_vertex_array,
        GL_EXT_vertex_array_bgra,
        GL_EXT_vertex_attrib_64bit,
        GL_EXT_vertex_shader,
        GL_EXT_vertex_weighting,
        GL_EXT_win32_keyed_mutex,
        GL_EXT_window_rectangles,
        GL_EXT_x11_sync_object,
        GL_GREMEDY_frame_terminator,
        GL_GREMEDY_string_marker,
        GL_HP_convolution_border_modes,
        GL_HP_image_transform,
        GL_HP_occlusion_test,
        GL_HP_texture_lighting,
        GL_IBM_cull_vertex,
        GL_IBM_multimode_draw_arrays,
        GL_IBM_rasterpos_clip,
        GL_IBM_static_data,
        GL_IBM_texture_mirrored_repeat,
        GL_IBM_vertex_array_lists,
        GL_INGR_blend_func_separate,
        GL_INGR_color_clamp,
        GL_INGR_interlace_read,
        GL_INTEL_blackhole_render,
        GL_INTEL_conservative_rasterization,
        GL_INTEL_fragment_shader_ordering,
        GL_INTEL_framebuffer_CMAA,
        GL_INTEL_map_texture,
        GL_INTEL_parallel_arrays,
        GL_INTEL_performance_query,
        GL_KHR_blend_equation_advanced,
        GL_KHR_blend_equation_advanced_coherent,
        GL_KHR_context_flush_control,
        GL_KHR_debug,
        GL_KHR_no_error,
        GL_KHR_parallel_shader_compile,
        GL_KHR_robust_buffer_access_behavior,
        GL_KHR_robustness,
        GL_KHR_shader_subgroup,
        GL_KHR_texture_compression_astc_hdr,
        GL_KHR_texture_compression_astc_ldr,
        GL_KHR_texture_compression_astc_sliced_3d,
        GL_MESAX_texture_stack,
        GL_MESA_framebuffer_flip_x,
        GL_MESA_framebuffer_flip_y,
        GL_MESA_framebuffer_swap_xy,
        GL_MESA_pack_invert,
        GL_MESA_program_binary_formats,
        GL_MESA_resize_buffers,
        GL_MESA_shader_integer_functions,
        GL_MESA_tile_raster_order,
        GL_MESA_window_pos,
        GL_MESA_ycbcr_texture,
        GL_NVX_blend_equation_advanced_multi_draw_buffers,
        GL_NVX_conditional_render,
        GL_NVX_gpu_memory_info,
        GL_NVX_gpu_multicast2,
        GL_NVX_linked_gpu_multicast,
        GL_NVX_progress_fence,
        GL_NV_alpha_to_coverage_dither_control,
        GL_NV_bindless_multi_draw_indirect,
        GL_NV_bindless_multi_draw_indirect_count,
        GL_NV_bindless_texture,
        GL_NV_blend_equation_advanced,
        GL_NV_blend_equation_advanced_coherent,
        GL_NV_blend_minmax_factor,
        GL_NV_blend_square,
        GL_NV_clip_space_w_scaling,
        GL_NV_command_list,
        GL_NV_compute_program5,
        GL_NV_compute_shader_derivatives,
        GL_NV_conditional_render,
        GL_NV_conservative_raster,
        GL_NV_conservative_raster_dilate,
        GL_NV_conservative_raster_pre_snap,
        GL_NV_conservative_raster_pre_snap_triangles,
        GL_NV_conservative_raster_underestimation,
        GL_NV_copy_depth_to_color,
        GL_NV_copy_image,
        GL_NV_deep_texture3D,
        GL_NV_depth_buffer_float,
        GL_NV_depth_clamp,
        GL_NV_draw_texture,
        GL_NV_draw_vulkan_image,
        GL_NV_evaluators,
        GL_NV_explicit_multisample,
        GL_NV_fence,
        GL_NV_fill_rectangle,
        GL_NV_float_buffer,
        GL_NV_fog_distance,
        GL_NV_fragment_coverage_to_color,
        GL_NV_fragment_program,
        GL_NV_fragment_program2,
        GL_NV_fragment_program4,
        GL_NV_fragment_program_option,
        GL_NV_fragment_shader_barycentric,
        GL_NV_fragment_shader_interlock,
        GL_NV_framebuffer_mixed_samples,
        GL_NV_framebuffer_multisample_coverage,
        GL_NV_geometry_program4,
        GL_NV_geometry_shader4,
        GL_NV_geometry_shader_passthrough,
        GL_NV_gpu_multicast,
        GL_NV_gpu_program4,
        GL_NV_gpu_program5,
        GL_NV_gpu_program5_mem_extended,
        GL_NV_gpu_shader5,
        GL_NV_half_float,
        GL_NV_internalformat_sample_query,
        GL_NV_light_max_exponent,
        GL_NV_memory_attachment,
        GL_NV_memory_object_sparse,
        GL_NV_mesh_shader,
        GL_NV_multisample_coverage,
        GL_NV_multisample_filter_hint,
        GL_NV_occlusion_query,
        GL_NV_packed_depth_stencil,
        GL_NV_parameter_buffer_object,
        GL_NV_parameter_buffer_object2,
        GL_NV_path_rendering,
        GL_NV_path_rendering_shared_edge,
        GL_NV_pixel_data_range,
        GL_NV_point_sprite,
        GL_NV_present_video,
        GL_NV_primitive_restart,
        GL_NV_primitive_shading_rate,
        GL_NV_query_resource,
        GL_NV_query_resource_tag,
        GL_NV_register_combiners,
        GL_NV_register_combiners2,
        GL_NV_representative_fragment_test,
        GL_NV_robustness_video_memory_purge,
        GL_NV_sample_locations,
        GL_NV_sample_mask_override_coverage,
        GL_NV_scissor_exclusive,
        GL_NV_shader_atomic_counters,
        GL_NV_shader_atomic_float,
        GL_NV_shader_atomic_float64,
        GL_NV_shader_atomic_fp16_vector,
        GL_NV_shader_atomic_int64,
        GL_NV_shader_buffer_load,
        GL_NV_shader_buffer_store,
        GL_NV_shader_storage_buffer_object,
        GL_NV_shader_subgroup_partitioned,
        GL_NV_shader_texture_footprint,
        GL_NV_shader_thread_group,
        GL_NV_shader_thread_shuffle,
        GL_NV_shading_rate_image,
        GL_NV_stereo_view_rendering,
        GL_NV_tessellation_program5,
        GL_NV_texgen_emboss,
        GL_NV_texgen_reflection,
        GL_NV_texture_barrier,
        GL_NV_texture_compression_vtc,
        GL_NV_texture_env_combine4,
        GL_NV_texture_expand_normal,
        GL_NV_texture_multisample,
        GL_NV_texture_rectangle,
        GL_NV_texture_rectangle_compressed,
        GL_NV_texture_shader,
        GL_NV_texture_shader2,
        GL_NV_texture_shader3,
        GL_NV_timeline_semaphore,
        GL_NV_transform_feedback,
        GL_NV_transform_feedback2,
        GL_NV_uniform_buffer_unified_memory,
        GL_NV_vdpau_interop,
        GL_NV_vdpau_interop2,
        GL_NV_vertex_array_range,
        GL_NV_vertex_array_range2,
        GL_NV_vertex_attrib_integer_64bit,
        GL_NV_vertex_buffer_unified_memory,
        GL_NV_vertex_program,
        GL_NV_vertex_program1_1,
        GL_NV_vertex_program2,
        GL_NV_vertex_program2_option,
        GL_NV_vertex_program3,
        GL_NV_vertex_program4,
        GL_NV_video_capture,
        GL_NV_viewport_array2,
        GL_NV_viewport_swizzle,
        GL_OES_byte_coordinates,
        GL_OES_compressed_paletted_texture,
        GL_OES_fixed_point,
        GL_OES_query_matrix,
        GL_OES_read_format,
        GL_OES_single_precision,
        GL_OML_interlace,
        GL_OML_resample,
        GL_OML_subsample,
        GL_OVR_multiview,
        GL_OVR_multiview2,
        GL_PGI_misc_hints,
        GL_PGI_vertex_hints,
        GL_REND_screen_coordinates,
        GL_S3_s3tc,
        GL_SGIS_detail_texture,
        GL_SGIS_fog_function,
        GL_SGIS_generate_mipmap,
        GL_SGIS_multisample,
        GL_SGIS_pixel_texture,
        GL_SGIS_point_line_texgen,
        GL_SGIS_point_parameters,
        GL_SGIS_sharpen_texture,
        GL_SGIS_texture4D,
        GL_SGIS_texture_border_clamp,
        GL_SGIS_texture_color_mask,
        GL_SGIS_texture_edge_clamp,
        GL_SGIS_texture_filter4,
        GL_SGIS_texture_lod,
        GL_SGIS_texture_select,
        GL_SGIX_async,
        GL_SGIX_async_histogram,
        GL_SGIX_async_pixel,
        GL_SGIX_blend_alpha_minmax,
        GL_SGIX_calligraphic_fragment,
        GL_SGIX_clipmap,
        GL_SGIX_convolution_accuracy,
        GL_SGIX_depth_pass_instrument,
        GL_SGIX_depth_texture,
        GL_SGIX_flush_raster,
        GL_SGIX_fog_offset,
        GL_SGIX_fragment_lighting,
        GL_SGIX_framezoom,
        GL_SGIX_igloo_interface,
        GL_SGIX_instruments,
        GL_SGIX_interlace,
        GL_SGIX_ir_instrument1,
        GL_SGIX_list_priority,
        GL_SGIX_pixel_texture,
        GL_SGIX_pixel_tiles,
        GL_SGIX_polynomial_ffd,
        GL_SGIX_reference_plane,
        GL_SGIX_resample,
        GL_SGIX_scalebias_hint,
        GL_SGIX_shadow,
        GL_SGIX_shadow_ambient,
        GL_SGIX_sprite,
        GL_SGIX_subsample,
        GL_SGIX_tag_sample_buffer,
        GL_SGIX_texture_add_env,
        GL_SGIX_texture_coordinate_clamp,
        GL_SGIX_texture_lod_bias,
        GL_SGIX_texture_multi_buffer,
        GL_SGIX_texture_scale_bias,
        GL_SGIX_vertex_preclip,
        GL_SGIX_ycrcb,
        GL_SGIX_ycrcb_subsample,
        GL_SGIX_ycrcba,
        GL_SGI_color_matrix,
        GL_SGI_color_table,
        GL_SGI_texture_color_table,
        GL_SUNX_constant_data,
        GL_SUN_convolution_border_modes,
        GL_SUN_global_alpha,
        GL_SUN_mesh_array,
        GL_SUN_slice_accum,
        GL_SUN_triangle_list,
        GL_SUN_vertex,
        GL_WIN_phong_shading,
        GL_WIN_specular_fog
    Loader: True
    Local files: False
    Omit khrplatform: True
    Reproducible: False

    Commandline:
        --profile="core" --api="gl=4.6" --generator="nim" --spec="gl" --omit-khrplatform --extensions="GL_3DFX_multisample,GL_3DFX_tbuffer,GL_3DFX_texture_compression_FXT1,GL_AMD_blend_minmax_factor,GL_AMD_conservative_depth,GL_AMD_debug_output,GL_AMD_depth_clamp_separate,GL_AMD_draw_buffers_blend,GL_AMD_framebuffer_multisample_advanced,GL_AMD_framebuffer_sample_positions,GL_AMD_gcn_shader,GL_AMD_gpu_shader_half_float,GL_AMD_gpu_shader_int16,GL_AMD_gpu_shader_int64,GL_AMD_interleaved_elements,GL_AMD_multi_draw_indirect,GL_AMD_name_gen_delete,GL_AMD_occlusion_query_event,GL_AMD_performance_monitor,GL_AMD_pinned_memory,GL_AMD_query_buffer_object,GL_AMD_sample_positions,GL_AMD_seamless_cubemap_per_texture,GL_AMD_shader_atomic_counter_ops,GL_AMD_shader_ballot,GL_AMD_shader_explicit_vertex_parameter,GL_AMD_shader_gpu_shader_half_float_fetch,GL_AMD_shader_image_load_store_lod,GL_AMD_shader_stencil_export,GL_AMD_shader_trinary_minmax,GL_AMD_sparse_texture,GL_AMD_stencil_operation_extended,GL_AMD_texture_gather_bias_lod,GL_AMD_texture_texture4,GL_AMD_transform_feedback3_lines_triangles,GL_AMD_transform_feedback4,GL_AMD_vertex_shader_layer,GL_AMD_vertex_shader_tessellator,GL_AMD_vertex_shader_viewport_index,GL_APPLE_aux_depth_stencil,GL_APPLE_client_storage,GL_APPLE_element_array,GL_APPLE_fence,GL_APPLE_float_pixels,GL_APPLE_flush_buffer_range,GL_APPLE_object_purgeable,GL_APPLE_rgb_422,GL_APPLE_row_bytes,GL_APPLE_specular_vector,GL_APPLE_texture_range,GL_APPLE_transform_hint,GL_APPLE_vertex_array_object,GL_APPLE_vertex_array_range,GL_APPLE_vertex_program_evaluators,GL_APPLE_ycbcr_422,GL_ARB_ES2_compatibility,GL_ARB_ES3_1_compatibility,GL_ARB_ES3_2_compatibility,GL_ARB_ES3_compatibility,GL_ARB_arrays_of_arrays,GL_ARB_base_instance,GL_ARB_bindless_texture,GL_ARB_blend_func_extended,GL_ARB_buffer_storage,GL_ARB_cl_event,GL_ARB_clear_buffer_object,GL_ARB_clear_texture,GL_ARB_clip_control,GL_ARB_color_buffer_float,GL_ARB_compatibility,GL_ARB_compressed_texture_pixel_storage,GL_ARB_compute_shader,GL_ARB_compute_variable_group_size,GL_ARB_conditional_render_inverted,GL_ARB_conservative_depth,GL_ARB_copy_buffer,GL_ARB_copy_image,GL_ARB_cull_distance,GL_ARB_debug_output,GL_ARB_depth_buffer_float,GL_ARB_depth_clamp,GL_ARB_depth_texture,GL_ARB_derivative_control,GL_ARB_direct_state_access,GL_ARB_draw_buffers,GL_ARB_draw_buffers_blend,GL_ARB_draw_elements_base_vertex,GL_ARB_draw_indirect,GL_ARB_draw_instanced,GL_ARB_enhanced_layouts,GL_ARB_explicit_attrib_location,GL_ARB_explicit_uniform_location,GL_ARB_fragment_coord_conventions,GL_ARB_fragment_layer_viewport,GL_ARB_fragment_program,GL_ARB_fragment_program_shadow,GL_ARB_fragment_shader,GL_ARB_fragment_shader_interlock,GL_ARB_framebuffer_no_attachments,GL_ARB_framebuffer_object,GL_ARB_framebuffer_sRGB,GL_ARB_geometry_shader4,GL_ARB_get_program_binary,GL_ARB_get_texture_sub_image,GL_ARB_gl_spirv,GL_ARB_gpu_shader5,GL_ARB_gpu_shader_fp64,GL_ARB_gpu_shader_int64,GL_ARB_half_float_pixel,GL_ARB_half_float_vertex,GL_ARB_imaging,GL_ARB_indirect_parameters,GL_ARB_instanced_arrays,GL_ARB_internalformat_query,GL_ARB_internalformat_query2,GL_ARB_invalidate_subdata,GL_ARB_map_buffer_alignment,GL_ARB_map_buffer_range,GL_ARB_matrix_palette,GL_ARB_multi_bind,GL_ARB_multi_draw_indirect,GL_ARB_multisample,GL_ARB_multitexture,GL_ARB_occlusion_query,GL_ARB_occlusion_query2,GL_ARB_parallel_shader_compile,GL_ARB_pipeline_statistics_query,GL_ARB_pixel_buffer_object,GL_ARB_point_parameters,GL_ARB_point_sprite,GL_ARB_polygon_offset_clamp,GL_ARB_post_depth_coverage,GL_ARB_program_interface_query,GL_ARB_provoking_vertex,GL_ARB_query_buffer_object,GL_ARB_robust_buffer_access_behavior,GL_ARB_robustness,GL_ARB_robustness_isolation,GL_ARB_sample_locations,GL_ARB_sample_shading,GL_ARB_sampler_objects,GL_ARB_seamless_cube_map,GL_ARB_seamless_cubemap_per_texture,GL_ARB_separate_shader_objects,GL_ARB_shader_atomic_counter_ops,GL_ARB_shader_atomic_counters,GL_ARB_shader_ballot,GL_ARB_shader_bit_encoding,GL_ARB_shader_clock,GL_ARB_shader_draw_parameters,GL_ARB_shader_group_vote,GL_ARB_shader_image_load_store,GL_ARB_shader_image_size,GL_ARB_shader_objects,GL_ARB_shader_precision,GL_ARB_shader_stencil_export,GL_ARB_shader_storage_buffer_object,GL_ARB_shader_subroutine,GL_ARB_shader_texture_image_samples,GL_ARB_shader_texture_lod,GL_ARB_shader_viewport_layer_array,GL_ARB_shading_language_100,GL_ARB_shading_language_420pack,GL_ARB_shading_language_include,GL_ARB_shading_language_packing,GL_ARB_shadow,GL_ARB_shadow_ambient,GL_ARB_sparse_buffer,GL_ARB_sparse_texture,GL_ARB_sparse_texture2,GL_ARB_sparse_texture_clamp,GL_ARB_spirv_extensions,GL_ARB_stencil_texturing,GL_ARB_sync,GL_ARB_tessellation_shader,GL_ARB_texture_barrier,GL_ARB_texture_border_clamp,GL_ARB_texture_buffer_object,GL_ARB_texture_buffer_object_rgb32,GL_ARB_texture_buffer_range,GL_ARB_texture_compression,GL_ARB_texture_compression_bptc,GL_ARB_texture_compression_rgtc,GL_ARB_texture_cube_map,GL_ARB_texture_cube_map_array,GL_ARB_texture_env_add,GL_ARB_texture_env_combine,GL_ARB_texture_env_crossbar,GL_ARB_texture_env_dot3,GL_ARB_texture_filter_anisotropic,GL_ARB_texture_filter_minmax,GL_ARB_texture_float,GL_ARB_texture_gather,GL_ARB_texture_mirror_clamp_to_edge,GL_ARB_texture_mirrored_repeat,GL_ARB_texture_multisample,GL_ARB_texture_non_power_of_two,GL_ARB_texture_query_levels,GL_ARB_texture_query_lod,GL_ARB_texture_rectangle,GL_ARB_texture_rg,GL_ARB_texture_rgb10_a2ui,GL_ARB_texture_stencil8,GL_ARB_texture_storage,GL_ARB_texture_storage_multisample,GL_ARB_texture_swizzle,GL_ARB_texture_view,GL_ARB_timer_query,GL_ARB_transform_feedback2,GL_ARB_transform_feedback3,GL_ARB_transform_feedback_instanced,GL_ARB_transform_feedback_overflow_query,GL_ARB_transpose_matrix,GL_ARB_uniform_buffer_object,GL_ARB_vertex_array_bgra,GL_ARB_vertex_array_object,GL_ARB_vertex_attrib_64bit,GL_ARB_vertex_attrib_binding,GL_ARB_vertex_blend,GL_ARB_vertex_buffer_object,GL_ARB_vertex_program,GL_ARB_vertex_shader,GL_ARB_vertex_type_10f_11f_11f_rev,GL_ARB_vertex_type_2_10_10_10_rev,GL_ARB_viewport_array,GL_ARB_window_pos,GL_ATI_draw_buffers,GL_ATI_element_array,GL_ATI_envmap_bumpmap,GL_ATI_fragment_shader,GL_ATI_map_object_buffer,GL_ATI_meminfo,GL_ATI_pixel_format_float,GL_ATI_pn_triangles,GL_ATI_separate_stencil,GL_ATI_text_fragment_shader,GL_ATI_texture_env_combine3,GL_ATI_texture_float,GL_ATI_texture_mirror_once,GL_ATI_vertex_array_object,GL_ATI_vertex_attrib_array_object,GL_ATI_vertex_streams,GL_EXT_422_pixels,GL_EXT_EGL_image_storage,GL_EXT_EGL_sync,GL_EXT_abgr,GL_EXT_bgra,GL_EXT_bindable_uniform,GL_EXT_blend_color,GL_EXT_blend_equation_separate,GL_EXT_blend_func_separate,GL_EXT_blend_logic_op,GL_EXT_blend_minmax,GL_EXT_blend_subtract,GL_EXT_clip_volume_hint,GL_EXT_cmyka,GL_EXT_color_subtable,GL_EXT_compiled_vertex_array,GL_EXT_convolution,GL_EXT_coordinate_frame,GL_EXT_copy_texture,GL_EXT_cull_vertex,GL_EXT_debug_label,GL_EXT_debug_marker,GL_EXT_depth_bounds_test,GL_EXT_direct_state_access,GL_EXT_draw_buffers2,GL_EXT_draw_instanced,GL_EXT_draw_range_elements,GL_EXT_external_buffer,GL_EXT_fog_coord,GL_EXT_framebuffer_blit,GL_EXT_framebuffer_multisample,GL_EXT_framebuffer_multisample_blit_scaled,GL_EXT_framebuffer_object,GL_EXT_framebuffer_sRGB,GL_EXT_geometry_shader4,GL_EXT_gpu_program_parameters,GL_EXT_gpu_shader4,GL_EXT_histogram,GL_EXT_index_array_formats,GL_EXT_index_func,GL_EXT_index_material,GL_EXT_index_texture,GL_EXT_light_texture,GL_EXT_memory_object,GL_EXT_memory_object_fd,GL_EXT_memory_object_win32,GL_EXT_misc_attribute,GL_EXT_multi_draw_arrays,GL_EXT_multisample,GL_EXT_multiview_tessellation_geometry_shader,GL_EXT_multiview_texture_multisample,GL_EXT_multiview_timer_query,GL_EXT_packed_depth_stencil,GL_EXT_packed_float,GL_EXT_packed_pixels,GL_EXT_paletted_texture,GL_EXT_pixel_buffer_object,GL_EXT_pixel_transform,GL_EXT_pixel_transform_color_table,GL_EXT_point_parameters,GL_EXT_polygon_offset,GL_EXT_polygon_offset_clamp,GL_EXT_post_depth_coverage,GL_EXT_provoking_vertex,GL_EXT_raster_multisample,GL_EXT_rescale_normal,GL_EXT_secondary_color,GL_EXT_semaphore,GL_EXT_semaphore_fd,GL_EXT_semaphore_win32,GL_EXT_separate_shader_objects,GL_EXT_separate_specular_color,GL_EXT_shader_framebuffer_fetch,GL_EXT_shader_framebuffer_fetch_non_coherent,GL_EXT_shader_image_load_formatted,GL_EXT_shader_image_load_store,GL_EXT_shader_integer_mix,GL_EXT_shadow_funcs,GL_EXT_shared_texture_palette,GL_EXT_sparse_texture2,GL_EXT_stencil_clear_tag,GL_EXT_stencil_two_side,GL_EXT_stencil_wrap,GL_EXT_subtexture,GL_EXT_texture,GL_EXT_texture3D,GL_EXT_texture_array,GL_EXT_texture_buffer_object,GL_EXT_texture_compression_latc,GL_EXT_texture_compression_rgtc,GL_EXT_texture_compression_s3tc,GL_EXT_texture_cube_map,GL_EXT_texture_env_add,GL_EXT_texture_env_combine,GL_EXT_texture_env_dot3,GL_EXT_texture_filter_anisotropic,GL_EXT_texture_filter_minmax,GL_EXT_texture_integer,GL_EXT_texture_lod_bias,GL_EXT_texture_mirror_clamp,GL_EXT_texture_object,GL_EXT_texture_perturb_normal,GL_EXT_texture_sRGB,GL_EXT_texture_sRGB_R8,GL_EXT_texture_sRGB_RG8,GL_EXT_texture_sRGB_decode,GL_EXT_texture_shadow_lod,GL_EXT_texture_shared_exponent,GL_EXT_texture_snorm,GL_EXT_texture_storage,GL_EXT_texture_swizzle,GL_EXT_timer_query,GL_EXT_transform_feedback,GL_EXT_vertex_array,GL_EXT_vertex_array_bgra,GL_EXT_vertex_attrib_64bit,GL_EXT_vertex_shader,GL_EXT_vertex_weighting,GL_EXT_win32_keyed_mutex,GL_EXT_window_rectangles,GL_EXT_x11_sync_object,GL_GREMEDY_frame_terminator,GL_GREMEDY_string_marker,GL_HP_convolution_border_modes,GL_HP_image_transform,GL_HP_occlusion_test,GL_HP_texture_lighting,GL_IBM_cull_vertex,GL_IBM_multimode_draw_arrays,GL_IBM_rasterpos_clip,GL_IBM_static_data,GL_IBM_texture_mirrored_repeat,GL_IBM_vertex_array_lists,GL_INGR_blend_func_separate,GL_INGR_color_clamp,GL_INGR_interlace_read,GL_INTEL_blackhole_render,GL_INTEL_conservative_rasterization,GL_INTEL_fragment_shader_ordering,GL_INTEL_framebuffer_CMAA,GL_INTEL_map_texture,GL_INTEL_parallel_arrays,GL_INTEL_performance_query,GL_KHR_blend_equation_advanced,GL_KHR_blend_equation_advanced_coherent,GL_KHR_context_flush_control,GL_KHR_debug,GL_KHR_no_error,GL_KHR_parallel_shader_compile,GL_KHR_robust_buffer_access_behavior,GL_KHR_robustness,GL_KHR_shader_subgroup,GL_KHR_texture_compression_astc_hdr,GL_KHR_texture_compression_astc_ldr,GL_KHR_texture_compression_astc_sliced_3d,GL_MESAX_texture_stack,GL_MESA_framebuffer_flip_x,GL_MESA_framebuffer_flip_y,GL_MESA_framebuffer_swap_xy,GL_MESA_pack_invert,GL_MESA_program_binary_formats,GL_MESA_resize_buffers,GL_MESA_shader_integer_functions,GL_MESA_tile_raster_order,GL_MESA_window_pos,GL_MESA_ycbcr_texture,GL_NVX_blend_equation_advanced_multi_draw_buffers,GL_NVX_conditional_render,GL_NVX_gpu_memory_info,GL_NVX_gpu_multicast2,GL_NVX_linked_gpu_multicast,GL_NVX_progress_fence,GL_NV_alpha_to_coverage_dither_control,GL_NV_bindless_multi_draw_indirect,GL_NV_bindless_multi_draw_indirect_count,GL_NV_bindless_texture,GL_NV_blend_equation_advanced,GL_NV_blend_equation_advanced_coherent,GL_NV_blend_minmax_factor,GL_NV_blend_square,GL_NV_clip_space_w_scaling,GL_NV_command_list,GL_NV_compute_program5,GL_NV_compute_shader_derivatives,GL_NV_conditional_render,GL_NV_conservative_raster,GL_NV_conservative_raster_dilate,GL_NV_conservative_raster_pre_snap,GL_NV_conservative_raster_pre_snap_triangles,GL_NV_conservative_raster_underestimation,GL_NV_copy_depth_to_color,GL_NV_copy_image,GL_NV_deep_texture3D,GL_NV_depth_buffer_float,GL_NV_depth_clamp,GL_NV_draw_texture,GL_NV_draw_vulkan_image,GL_NV_evaluators,GL_NV_explicit_multisample,GL_NV_fence,GL_NV_fill_rectangle,GL_NV_float_buffer,GL_NV_fog_distance,GL_NV_fragment_coverage_to_color,GL_NV_fragment_program,GL_NV_fragment_program2,GL_NV_fragment_program4,GL_NV_fragment_program_option,GL_NV_fragment_shader_barycentric,GL_NV_fragment_shader_interlock,GL_NV_framebuffer_mixed_samples,GL_NV_framebuffer_multisample_coverage,GL_NV_geometry_program4,GL_NV_geometry_shader4,GL_NV_geometry_shader_passthrough,GL_NV_gpu_multicast,GL_NV_gpu_program4,GL_NV_gpu_program5,GL_NV_gpu_program5_mem_extended,GL_NV_gpu_shader5,GL_NV_half_float,GL_NV_internalformat_sample_query,GL_NV_light_max_exponent,GL_NV_memory_attachment,GL_NV_memory_object_sparse,GL_NV_mesh_shader,GL_NV_multisample_coverage,GL_NV_multisample_filter_hint,GL_NV_occlusion_query,GL_NV_packed_depth_stencil,GL_NV_parameter_buffer_object,GL_NV_parameter_buffer_object2,GL_NV_path_rendering,GL_NV_path_rendering_shared_edge,GL_NV_pixel_data_range,GL_NV_point_sprite,GL_NV_present_video,GL_NV_primitive_restart,GL_NV_primitive_shading_rate,GL_NV_query_resource,GL_NV_query_resource_tag,GL_NV_register_combiners,GL_NV_register_combiners2,GL_NV_representative_fragment_test,GL_NV_robustness_video_memory_purge,GL_NV_sample_locations,GL_NV_sample_mask_override_coverage,GL_NV_scissor_exclusive,GL_NV_shader_atomic_counters,GL_NV_shader_atomic_float,GL_NV_shader_atomic_float64,GL_NV_shader_atomic_fp16_vector,GL_NV_shader_atomic_int64,GL_NV_shader_buffer_load,GL_NV_shader_buffer_store,GL_NV_shader_storage_buffer_object,GL_NV_shader_subgroup_partitioned,GL_NV_shader_texture_footprint,GL_NV_shader_thread_group,GL_NV_shader_thread_shuffle,GL_NV_shading_rate_image,GL_NV_stereo_view_rendering,GL_NV_tessellation_program5,GL_NV_texgen_emboss,GL_NV_texgen_reflection,GL_NV_texture_barrier,GL_NV_texture_compression_vtc,GL_NV_texture_env_combine4,GL_NV_texture_expand_normal,GL_NV_texture_multisample,GL_NV_texture_rectangle,GL_NV_texture_rectangle_compressed,GL_NV_texture_shader,GL_NV_texture_shader2,GL_NV_texture_shader3,GL_NV_timeline_semaphore,GL_NV_transform_feedback,GL_NV_transform_feedback2,GL_NV_uniform_buffer_unified_memory,GL_NV_vdpau_interop,GL_NV_vdpau_interop2,GL_NV_vertex_array_range,GL_NV_vertex_array_range2,GL_NV_vertex_attrib_integer_64bit,GL_NV_vertex_buffer_unified_memory,GL_NV_vertex_program,GL_NV_vertex_program1_1,GL_NV_vertex_program2,GL_NV_vertex_program2_option,GL_NV_vertex_program3,GL_NV_vertex_program4,GL_NV_video_capture,GL_NV_viewport_array2,GL_NV_viewport_swizzle,GL_OES_byte_coordinates,GL_OES_compressed_paletted_texture,GL_OES_fixed_point,GL_OES_query_matrix,GL_OES_read_format,GL_OES_single_precision,GL_OML_interlace,GL_OML_resample,GL_OML_subsample,GL_OVR_multiview,GL_OVR_multiview2,GL_PGI_misc_hints,GL_PGI_vertex_hints,GL_REND_screen_coordinates,GL_S3_s3tc,GL_SGIS_detail_texture,GL_SGIS_fog_function,GL_SGIS_generate_mipmap,GL_SGIS_multisample,GL_SGIS_pixel_texture,GL_SGIS_point_line_texgen,GL_SGIS_point_parameters,GL_SGIS_sharpen_texture,GL_SGIS_texture4D,GL_SGIS_texture_border_clamp,GL_SGIS_texture_color_mask,GL_SGIS_texture_edge_clamp,GL_SGIS_texture_filter4,GL_SGIS_texture_lod,GL_SGIS_texture_select,GL_SGIX_async,GL_SGIX_async_histogram,GL_SGIX_async_pixel,GL_SGIX_blend_alpha_minmax,GL_SGIX_calligraphic_fragment,GL_SGIX_clipmap,GL_SGIX_convolution_accuracy,GL_SGIX_depth_pass_instrument,GL_SGIX_depth_texture,GL_SGIX_flush_raster,GL_SGIX_fog_offset,GL_SGIX_fragment_lighting,GL_SGIX_framezoom,GL_SGIX_igloo_interface,GL_SGIX_instruments,GL_SGIX_interlace,GL_SGIX_ir_instrument1,GL_SGIX_list_priority,GL_SGIX_pixel_texture,GL_SGIX_pixel_tiles,GL_SGIX_polynomial_ffd,GL_SGIX_reference_plane,GL_SGIX_resample,GL_SGIX_scalebias_hint,GL_SGIX_shadow,GL_SGIX_shadow_ambient,GL_SGIX_sprite,GL_SGIX_subsample,GL_SGIX_tag_sample_buffer,GL_SGIX_texture_add_env,GL_SGIX_texture_coordinate_clamp,GL_SGIX_texture_lod_bias,GL_SGIX_texture_multi_buffer,GL_SGIX_texture_scale_bias,GL_SGIX_vertex_preclip,GL_SGIX_ycrcb,GL_SGIX_ycrcb_subsample,GL_SGIX_ycrcba,GL_SGI_color_matrix,GL_SGI_color_table,GL_SGI_texture_color_table,GL_SUNX_constant_data,GL_SUN_convolution_border_modes,GL_SUN_global_alpha,GL_SUN_mesh_array,GL_SUN_slice_accum,GL_SUN_triangle_list,GL_SUN_vertex,GL_WIN_phong_shading,GL_WIN_specular_fog"
    Online:
        Too many extensions
]#

import strutils

var glVersionMajor, glVersionMinor: int

# Types
type
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLVULKANPROCNV* = pointer
  GLbitfield* = distinct uint32
  GLboolean* = bool
  GLbyte* = int8
  GLchar* = char
  GLcharARB* = char
  GLclampd* = float64
  GLclampf* = float32
  GLclampx* = int32
  GLdouble* = float64
  GLeglClientBufferEXT* = pointer
  GLeglImageOES* = distinct pointer
  GLenum* = distinct uint32
  GLfixed* = int32
  GLfloat* = float32
  GLhalf* = uint16
  GLhalfARB* = uint16
  GLhalfNV* = uint16
  GLhandleARB* = uint32
  GLint* = int32
  GLint64* = int64
  GLint64EXT* = int64
  GLintptr* = cint
  GLintptrARB* = cint
  GLshort* = int16
  GLsizei* = int32
  GLsizeiptr* = cint
  GLsizeiptrARB* = cint
  GLsync* = distinct pointer
  GLubyte* = uint8
  GLuint* = uint32
  GLuint64* = uint64
  GLuint64EXT* = uint64
  GLushort* = uint16
  GLvdpauSurfaceNV* = int32
  GLvoid* = pointer

  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}


# Enums

proc `==`*(a, b: GLenum): bool {.borrow.}
proc `==`*(a, b: GLbitfield): bool {.borrow.}
proc `or`*(a, b: GLbitfield): GLbitfield {.borrow.}
proc hash*(x: GLenum): int = x.int

const
  GL_FALSE* = 0
  GL_INVALID_INDEX* = 0xFFFFFFFF'u32
  GL_NONE* = 0
  GL_NONE_OES* = 0
  GL_NO_ERROR* = 0
  GL_ONE* = 1
  GL_TIMEOUT_IGNORED* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TIMEOUT_IGNORED_APPLE* = 0xFFFFFFFFFFFFFFFF'u64
  GL_TRUE* = 1
  GL_VERSION_ES_CL_1_0* = 1
  GL_VERSION_ES_CL_1_1* = 1
  GL_VERSION_ES_CM_1_1* = 1
  GL_ZERO* = 0

  GL_DEPTH_BUFFER_BIT* = 0x00000100.GLbitfield
  GL_STENCIL_BUFFER_BIT* = 0x00000400.GLbitfield
  GL_COLOR_BUFFER_BIT* = 0x00004000.GLbitfield
  GL_POINTS* = 0x0000.GLenum
  GL_LINES* = 0x0001.GLenum
  GL_LINE_LOOP* = 0x0002.GLenum
  GL_LINE_STRIP* = 0x0003.GLenum
  GL_TRIANGLES* = 0x0004.GLenum
  GL_TRIANGLE_STRIP* = 0x0005.GLenum
  GL_TRIANGLE_FAN* = 0x0006.GLenum
  GL_NEVER* = 0x0200.GLenum
  GL_LESS* = 0x0201.GLenum
  GL_EQUAL* = 0x0202.GLenum
  GL_LEQUAL* = 0x0203.GLenum
  GL_GREATER* = 0x0204.GLenum
  GL_NOTEQUAL* = 0x0205.GLenum
  GL_GEQUAL* = 0x0206.GLenum
  GL_ALWAYS* = 0x0207.GLenum
  GL_SRC_COLOR* = 0x0300.GLenum
  GL_ONE_MINUS_SRC_COLOR* = 0x0301.GLenum
  GL_SRC_ALPHA* = 0x0302.GLenum
  GL_ONE_MINUS_SRC_ALPHA* = 0x0303.GLenum
  GL_DST_ALPHA* = 0x0304.GLenum
  GL_ONE_MINUS_DST_ALPHA* = 0x0305.GLenum
  GL_DST_COLOR* = 0x0306.GLenum
  GL_ONE_MINUS_DST_COLOR* = 0x0307.GLenum
  GL_SRC_ALPHA_SATURATE* = 0x0308.GLenum
  GL_FRONT_LEFT* = 0x0400.GLenum
  GL_FRONT_RIGHT* = 0x0401.GLenum
  GL_BACK_LEFT* = 0x0402.GLenum
  GL_BACK_RIGHT* = 0x0403.GLenum
  GL_FRONT* = 0x0404.GLenum
  GL_BACK* = 0x0405.GLenum
  GL_LEFT* = 0x0406.GLenum
  GL_RIGHT* = 0x0407.GLenum
  GL_FRONT_AND_BACK* = 0x0408.GLenum
  GL_INVALID_ENUM* = 0x0500.GLenum
  GL_INVALID_VALUE* = 0x0501.GLenum
  GL_INVALID_OPERATION* = 0x0502.GLenum
  GL_OUT_OF_MEMORY* = 0x0505.GLenum
  GL_CW* = 0x0900.GLenum
  GL_CCW* = 0x0901.GLenum
  GL_POINT_SIZE* = 0x0B11.GLenum
  GL_POINT_SIZE_RANGE* = 0x0B12.GLenum
  GL_POINT_SIZE_GRANULARITY* = 0x0B13.GLenum
  GL_LINE_SMOOTH* = 0x0B20.GLenum
  GL_LINE_WIDTH* = 0x0B21.GLenum
  GL_LINE_WIDTH_RANGE* = 0x0B22.GLenum
  GL_LINE_WIDTH_GRANULARITY* = 0x0B23.GLenum
  GL_POLYGON_MODE* = 0x0B40.GLenum
  GL_POLYGON_SMOOTH* = 0x0B41.GLenum
  GL_CULL_FACE* = 0x0B44.GLenum
  GL_CULL_FACE_MODE* = 0x0B45.GLenum
  GL_FRONT_FACE* = 0x0B46.GLenum
  GL_DEPTH_RANGE* = 0x0B70.GLenum
  GL_DEPTH_TEST* = 0x0B71.GLenum
  GL_DEPTH_WRITEMASK* = 0x0B72.GLenum
  GL_DEPTH_CLEAR_VALUE* = 0x0B73.GLenum
  GL_DEPTH_FUNC* = 0x0B74.GLenum
  GL_STENCIL_TEST* = 0x0B90.GLenum
  GL_STENCIL_CLEAR_VALUE* = 0x0B91.GLenum
  GL_STENCIL_FUNC* = 0x0B92.GLenum
  GL_STENCIL_VALUE_MASK* = 0x0B93.GLenum
  GL_STENCIL_FAIL* = 0x0B94.GLenum
  GL_STENCIL_PASS_DEPTH_FAIL* = 0x0B95.GLenum
  GL_STENCIL_PASS_DEPTH_PASS* = 0x0B96.GLenum
  GL_STENCIL_REF* = 0x0B97.GLenum
  GL_STENCIL_WRITEMASK* = 0x0B98.GLenum
  GL_VIEWPORT* = 0x0BA2.GLenum
  GL_DITHER* = 0x0BD0.GLenum
  GL_BLEND_DST* = 0x0BE0.GLenum
  GL_BLEND_SRC* = 0x0BE1.GLenum
  GL_BLEND* = 0x0BE2.GLenum
  GL_LOGIC_OP_MODE* = 0x0BF0.GLenum
  GL_DRAW_BUFFER* = 0x0C01.GLenum
  GL_READ_BUFFER* = 0x0C02.GLenum
  GL_SCISSOR_BOX* = 0x0C10.GLenum
  GL_SCISSOR_TEST* = 0x0C11.GLenum
  GL_COLOR_CLEAR_VALUE* = 0x0C22.GLenum
  GL_COLOR_WRITEMASK* = 0x0C23.GLenum
  GL_DOUBLEBUFFER* = 0x0C32.GLenum
  GL_STEREO* = 0x0C33.GLenum
  GL_LINE_SMOOTH_HINT* = 0x0C52.GLenum
  GL_POLYGON_SMOOTH_HINT* = 0x0C53.GLenum
  GL_UNPACK_SWAP_BYTES* = 0x0CF0.GLenum
  GL_UNPACK_LSB_FIRST* = 0x0CF1.GLenum
  GL_UNPACK_ROW_LENGTH* = 0x0CF2.GLenum
  GL_UNPACK_SKIP_ROWS* = 0x0CF3.GLenum
  GL_UNPACK_SKIP_PIXELS* = 0x0CF4.GLenum
  GL_UNPACK_ALIGNMENT* = 0x0CF5.GLenum
  GL_PACK_SWAP_BYTES* = 0x0D00.GLenum
  GL_PACK_LSB_FIRST* = 0x0D01.GLenum
  GL_PACK_ROW_LENGTH* = 0x0D02.GLenum
  GL_PACK_SKIP_ROWS* = 0x0D03.GLenum
  GL_PACK_SKIP_PIXELS* = 0x0D04.GLenum
  GL_PACK_ALIGNMENT* = 0x0D05.GLenum
  GL_MAX_TEXTURE_SIZE* = 0x0D33.GLenum
  GL_MAX_VIEWPORT_DIMS* = 0x0D3A.GLenum
  GL_SUBPIXEL_BITS* = 0x0D50.GLbitfield
  GL_TEXTURE_1D* = 0x0DE0.GLenum
  GL_TEXTURE_2D* = 0x0DE1.GLenum
  GL_TEXTURE_WIDTH* = 0x1000.GLenum
  GL_TEXTURE_HEIGHT* = 0x1001.GLenum
  GL_TEXTURE_BORDER_COLOR* = 0x1004.GLenum
  GL_DONT_CARE* = 0x1100.GLenum
  GL_FASTEST* = 0x1101.GLenum
  GL_NICEST* = 0x1102.GLenum
  cGL_BYTE* = 0x1400.GLenum
  GL_UNSIGNED_BYTE* = 0x1401.GLenum
  cGL_SHORT* = 0x1402.GLenum
  GL_UNSIGNED_SHORT* = 0x1403.GLenum
  cGL_INT* = 0x1404.GLenum
  GL_UNSIGNED_INT* = 0x1405.GLenum
  cGL_FLOAT* = 0x1406.GLenum
  GL_CLEAR* = 0x1500.GLenum
  GL_AND* = 0x1501.GLenum
  GL_AND_REVERSE* = 0x1502.GLenum
  GL_COPY* = 0x1503.GLenum
  GL_AND_INVERTED* = 0x1504.GLenum
  GL_NOOP* = 0x1505.GLenum
  GL_XOR* = 0x1506.GLenum
  GL_OR* = 0x1507.GLenum
  GL_NOR* = 0x1508.GLenum
  GL_EQUIV* = 0x1509.GLenum
  GL_INVERT* = 0x150A.GLenum
  GL_OR_REVERSE* = 0x150B.GLenum
  GL_COPY_INVERTED* = 0x150C.GLenum
  GL_OR_INVERTED* = 0x150D.GLenum
  GL_NAND* = 0x150E.GLenum
  GL_SET* = 0x150F.GLenum
  GL_TEXTURE* = 0x1702.GLenum
  GL_COLOR* = 0x1800.GLenum
  GL_DEPTH* = 0x1801.GLenum
  GL_STENCIL* = 0x1802.GLenum
  GL_STENCIL_INDEX* = 0x1901.GLenum
  GL_DEPTH_COMPONENT* = 0x1902.GLenum
  GL_RED* = 0x1903.GLenum
  GL_GREEN* = 0x1904.GLenum
  GL_BLUE* = 0x1905.GLenum
  GL_ALPHA* = 0x1906.GLenum
  GL_RGB* = 0x1907.GLenum
  GL_RGBA* = 0x1908.GLenum
  GL_POINT* = 0x1B00.GLenum
  GL_LINE* = 0x1B01.GLenum
  GL_FILL* = 0x1B02.GLenum
  GL_KEEP* = 0x1E00.GLenum
  GL_REPLACE* = 0x1E01.GLenum
  GL_INCR* = 0x1E02.GLenum
  GL_DECR* = 0x1E03.GLenum
  GL_VENDOR* = 0x1F00.GLenum
  GL_RENDERER* = 0x1F01.GLenum
  GL_VERSION* = 0x1F02.GLenum
  GL_EXTENSIONS* = 0x1F03.GLenum
  GL_NEAREST* = 0x2600.GLenum
  GL_LINEAR* = 0x2601.GLenum
  GL_NEAREST_MIPMAP_NEAREST* = 0x2700.GLenum
  GL_LINEAR_MIPMAP_NEAREST* = 0x2701.GLenum
  GL_NEAREST_MIPMAP_LINEAR* = 0x2702.GLenum
  GL_LINEAR_MIPMAP_LINEAR* = 0x2703.GLenum
  GL_TEXTURE_MAG_FILTER* = 0x2800.GLenum
  GL_TEXTURE_MIN_FILTER* = 0x2801.GLenum
  GL_TEXTURE_WRAP_S* = 0x2802.GLenum
  GL_TEXTURE_WRAP_T* = 0x2803.GLenum
  GL_REPEAT* = 0x2901.GLenum
  GL_COLOR_LOGIC_OP* = 0x0BF2.GLenum
  GL_POLYGON_OFFSET_UNITS* = 0x2A00.GLenum
  GL_POLYGON_OFFSET_POINT* = 0x2A01.GLenum
  GL_POLYGON_OFFSET_LINE* = 0x2A02.GLenum
  GL_POLYGON_OFFSET_FILL* = 0x8037.GLenum
  GL_POLYGON_OFFSET_FACTOR* = 0x8038.GLenum
  GL_TEXTURE_BINDING_1D* = 0x8068.GLenum
  GL_TEXTURE_BINDING_2D* = 0x8069.GLenum
  GL_TEXTURE_INTERNAL_FORMAT* = 0x1003.GLenum
  GL_TEXTURE_RED_SIZE* = 0x805C.GLenum
  GL_TEXTURE_GREEN_SIZE* = 0x805D.GLenum
  GL_TEXTURE_BLUE_SIZE* = 0x805E.GLenum
  GL_TEXTURE_ALPHA_SIZE* = 0x805F.GLenum
  cGL_DOUBLE* = 0x140A.GLenum
  GL_PROXY_TEXTURE_1D* = 0x8063.GLenum
  GL_PROXY_TEXTURE_2D* = 0x8064.GLenum
  GL_R3_G3_B2* = 0x2A10.GLenum
  GL_RGB4* = 0x804F.GLenum
  GL_RGB5* = 0x8050.GLenum
  GL_RGB8* = 0x8051.GLenum
  GL_RGB10* = 0x8052.GLenum
  GL_RGB12* = 0x8053.GLenum
  GL_RGB16* = 0x8054.GLenum
  GL_RGBA2* = 0x8055.GLenum
  GL_RGBA4* = 0x8056.GLenum
  GL_RGB5_A1* = 0x8057.GLenum
  GL_RGBA8* = 0x8058.GLenum
  GL_RGB10_A2* = 0x8059.GLenum
  GL_RGBA12* = 0x805A.GLenum
  GL_RGBA16* = 0x805B.GLenum
  GL_UNSIGNED_BYTE_3_3_2* = 0x8032.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4* = 0x8033.GLenum
  GL_UNSIGNED_SHORT_5_5_5_1* = 0x8034.GLenum
  GL_UNSIGNED_INT_8_8_8_8* = 0x8035.GLenum
  GL_UNSIGNED_INT_10_10_10_2* = 0x8036.GLenum
  GL_TEXTURE_BINDING_3D* = 0x806A.GLenum
  GL_PACK_SKIP_IMAGES* = 0x806B.GLenum
  GL_PACK_IMAGE_HEIGHT* = 0x806C.GLenum
  GL_UNPACK_SKIP_IMAGES* = 0x806D.GLenum
  GL_UNPACK_IMAGE_HEIGHT* = 0x806E.GLenum
  GL_TEXTURE_3D* = 0x806F.GLenum
  GL_PROXY_TEXTURE_3D* = 0x8070.GLenum
  GL_TEXTURE_DEPTH* = 0x8071.GLenum
  GL_TEXTURE_WRAP_R* = 0x8072.GLenum
  GL_MAX_3D_TEXTURE_SIZE* = 0x8073.GLenum
  GL_UNSIGNED_BYTE_2_3_3_REV* = 0x8362.GLenum
  GL_UNSIGNED_SHORT_5_6_5* = 0x8363.GLenum
  GL_UNSIGNED_SHORT_5_6_5_REV* = 0x8364.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4_REV* = 0x8365.GLenum
  GL_UNSIGNED_SHORT_1_5_5_5_REV* = 0x8366.GLenum
  GL_UNSIGNED_INT_8_8_8_8_REV* = 0x8367.GLenum
  GL_UNSIGNED_INT_2_10_10_10_REV* = 0x8368.GLenum
  GL_BGR* = 0x80E0.GLenum
  GL_BGRA* = 0x80E1.GLenum
  GL_MAX_ELEMENTS_VERTICES* = 0x80E8.GLenum
  GL_MAX_ELEMENTS_INDICES* = 0x80E9.GLenum
  GL_CLAMP_TO_EDGE* = 0x812F.GLenum
  GL_TEXTURE_MIN_LOD* = 0x813A.GLenum
  GL_TEXTURE_MAX_LOD* = 0x813B.GLenum
  GL_TEXTURE_BASE_LEVEL* = 0x813C.GLenum
  GL_TEXTURE_MAX_LEVEL* = 0x813D.GLenum
  GL_SMOOTH_POINT_SIZE_RANGE* = 0x0B12.GLenum
  GL_SMOOTH_POINT_SIZE_GRANULARITY* = 0x0B13.GLenum
  GL_SMOOTH_LINE_WIDTH_RANGE* = 0x0B22.GLenum
  GL_SMOOTH_LINE_WIDTH_GRANULARITY* = 0x0B23.GLenum
  GL_ALIASED_LINE_WIDTH_RANGE* = 0x846E.GLenum
  GL_TEXTURE0* = 0x84C0.GLenum
  GL_TEXTURE1* = 0x84C1.GLenum
  GL_TEXTURE2* = 0x84C2.GLenum
  GL_TEXTURE3* = 0x84C3.GLenum
  GL_TEXTURE4* = 0x84C4.GLenum
  GL_TEXTURE5* = 0x84C5.GLenum
  GL_TEXTURE6* = 0x84C6.GLenum
  GL_TEXTURE7* = 0x84C7.GLenum
  GL_TEXTURE8* = 0x84C8.GLenum
  GL_TEXTURE9* = 0x84C9.GLenum
  GL_TEXTURE10* = 0x84CA.GLenum
  GL_TEXTURE11* = 0x84CB.GLenum
  GL_TEXTURE12* = 0x84CC.GLenum
  GL_TEXTURE13* = 0x84CD.GLenum
  GL_TEXTURE14* = 0x84CE.GLenum
  GL_TEXTURE15* = 0x84CF.GLenum
  GL_TEXTURE16* = 0x84D0.GLenum
  GL_TEXTURE17* = 0x84D1.GLenum
  GL_TEXTURE18* = 0x84D2.GLenum
  GL_TEXTURE19* = 0x84D3.GLenum
  GL_TEXTURE20* = 0x84D4.GLenum
  GL_TEXTURE21* = 0x84D5.GLenum
  GL_TEXTURE22* = 0x84D6.GLenum
  GL_TEXTURE23* = 0x84D7.GLenum
  GL_TEXTURE24* = 0x84D8.GLenum
  GL_TEXTURE25* = 0x84D9.GLenum
  GL_TEXTURE26* = 0x84DA.GLenum
  GL_TEXTURE27* = 0x84DB.GLenum
  GL_TEXTURE28* = 0x84DC.GLenum
  GL_TEXTURE29* = 0x84DD.GLenum
  GL_TEXTURE30* = 0x84DE.GLenum
  GL_TEXTURE31* = 0x84DF.GLenum
  GL_ACTIVE_TEXTURE* = 0x84E0.GLenum
  GL_MULTISAMPLE* = 0x809D.GLenum
  GL_SAMPLE_ALPHA_TO_COVERAGE* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_ONE* = 0x809F.GLenum
  GL_SAMPLE_COVERAGE* = 0x80A0.GLenum
  GL_SAMPLE_BUFFERS* = 0x80A8.GLenum
  GL_SAMPLES* = 0x80A9.GLenum
  GL_SAMPLE_COVERAGE_VALUE* = 0x80AA.GLenum
  GL_SAMPLE_COVERAGE_INVERT* = 0x80AB.GLenum
  GL_TEXTURE_CUBE_MAP* = 0x8513.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP* = 0x8514.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z* = 0x851A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP* = 0x851B.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE* = 0x851C.GLenum
  GL_COMPRESSED_RGB* = 0x84ED.GLenum
  GL_COMPRESSED_RGBA* = 0x84EE.GLenum
  GL_TEXTURE_COMPRESSION_HINT* = 0x84EF.GLenum
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE* = 0x86A0.GLenum
  GL_TEXTURE_COMPRESSED* = 0x86A1.GLenum
  GL_NUM_COMPRESSED_TEXTURE_FORMATS* = 0x86A2.GLenum
  GL_COMPRESSED_TEXTURE_FORMATS* = 0x86A3.GLenum
  GL_CLAMP_TO_BORDER* = 0x812D.GLenum
  GL_BLEND_DST_RGB* = 0x80C8.GLenum
  GL_BLEND_SRC_RGB* = 0x80C9.GLenum
  GL_BLEND_DST_ALPHA* = 0x80CA.GLenum
  GL_BLEND_SRC_ALPHA* = 0x80CB.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE* = 0x8128.GLenum
  GL_DEPTH_COMPONENT16* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT24* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT32* = 0x81A7.GLenum
  GL_MIRRORED_REPEAT* = 0x8370.GLenum
  GL_MAX_TEXTURE_LOD_BIAS* = 0x84FD.GLenum
  GL_TEXTURE_LOD_BIAS* = 0x8501.GLenum
  GL_INCR_WRAP* = 0x8507.GLenum
  GL_DECR_WRAP* = 0x8508.GLenum
  GL_TEXTURE_DEPTH_SIZE* = 0x884A.GLenum
  GL_TEXTURE_COMPARE_MODE* = 0x884C.GLenum
  GL_TEXTURE_COMPARE_FUNC* = 0x884D.GLenum
  GL_BLEND_COLOR* = 0x8005.GLenum
  GL_BLEND_EQUATION* = 0x8009.GLenum
  GL_CONSTANT_COLOR* = 0x8001.GLenum
  GL_ONE_MINUS_CONSTANT_COLOR* = 0x8002.GLenum
  GL_CONSTANT_ALPHA* = 0x8003.GLenum
  GL_ONE_MINUS_CONSTANT_ALPHA* = 0x8004.GLenum
  GL_FUNC_ADD* = 0x8006.GLenum
  GL_FUNC_REVERSE_SUBTRACT* = 0x800B.GLenum
  GL_FUNC_SUBTRACT* = 0x800A.GLenum
  GL_MIN* = 0x8007.GLenum
  GL_MAX* = 0x8008.GLenum
  GL_BUFFER_SIZE* = 0x8764.GLenum
  GL_BUFFER_USAGE* = 0x8765.GLenum
  GL_QUERY_COUNTER_BITS* = 0x8864.GLbitfield
  GL_CURRENT_QUERY* = 0x8865.GLenum
  GL_QUERY_RESULT* = 0x8866.GLenum
  GL_QUERY_RESULT_AVAILABLE* = 0x8867.GLenum
  GL_ARRAY_BUFFER* = 0x8892.GLenum
  GL_ELEMENT_ARRAY_BUFFER* = 0x8893.GLenum
  GL_ARRAY_BUFFER_BINDING* = 0x8894.GLenum
  GL_ELEMENT_ARRAY_BUFFER_BINDING* = 0x8895.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING* = 0x889F.GLenum
  GL_READ_ONLY* = 0x88B8.GLenum
  GL_WRITE_ONLY* = 0x88B9.GLenum
  GL_READ_WRITE* = 0x88BA.GLenum
  GL_BUFFER_ACCESS* = 0x88BB.GLenum
  GL_BUFFER_MAPPED* = 0x88BC.GLenum
  GL_BUFFER_MAP_POINTER* = 0x88BD.GLenum
  GL_STREAM_DRAW* = 0x88E0.GLenum
  GL_STREAM_READ* = 0x88E1.GLenum
  GL_STREAM_COPY* = 0x88E2.GLenum
  GL_STATIC_DRAW* = 0x88E4.GLenum
  GL_STATIC_READ* = 0x88E5.GLenum
  GL_STATIC_COPY* = 0x88E6.GLenum
  GL_DYNAMIC_DRAW* = 0x88E8.GLenum
  GL_DYNAMIC_READ* = 0x88E9.GLenum
  GL_DYNAMIC_COPY* = 0x88EA.GLenum
  GL_SAMPLES_PASSED* = 0x8914.GLenum
  GL_SRC1_ALPHA* = 0x8589.GLenum
  GL_BLEND_EQUATION_RGB* = 0x8009.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ENABLED* = 0x8622.GLenum
  GL_VERTEX_ATTRIB_ARRAY_SIZE* = 0x8623.GLenum
  GL_VERTEX_ATTRIB_ARRAY_STRIDE* = 0x8624.GLenum
  GL_VERTEX_ATTRIB_ARRAY_TYPE* = 0x8625.GLenum
  GL_CURRENT_VERTEX_ATTRIB* = 0x8626.GLenum
  GL_VERTEX_PROGRAM_POINT_SIZE* = 0x8642.GLenum
  GL_VERTEX_ATTRIB_ARRAY_POINTER* = 0x8645.GLenum
  GL_STENCIL_BACK_FUNC* = 0x8800.GLenum
  GL_STENCIL_BACK_FAIL* = 0x8801.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_FAIL* = 0x8802.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_PASS* = 0x8803.GLenum
  GL_MAX_DRAW_BUFFERS* = 0x8824.GLenum
  GL_DRAW_BUFFER0* = 0x8825.GLenum
  GL_DRAW_BUFFER1* = 0x8826.GLenum
  GL_DRAW_BUFFER2* = 0x8827.GLenum
  GL_DRAW_BUFFER3* = 0x8828.GLenum
  GL_DRAW_BUFFER4* = 0x8829.GLenum
  GL_DRAW_BUFFER5* = 0x882A.GLenum
  GL_DRAW_BUFFER6* = 0x882B.GLenum
  GL_DRAW_BUFFER7* = 0x882C.GLenum
  GL_DRAW_BUFFER8* = 0x882D.GLenum
  GL_DRAW_BUFFER9* = 0x882E.GLenum
  GL_DRAW_BUFFER10* = 0x882F.GLenum
  GL_DRAW_BUFFER11* = 0x8830.GLenum
  GL_DRAW_BUFFER12* = 0x8831.GLenum
  GL_DRAW_BUFFER13* = 0x8832.GLenum
  GL_DRAW_BUFFER14* = 0x8833.GLenum
  GL_DRAW_BUFFER15* = 0x8834.GLenum
  GL_BLEND_EQUATION_ALPHA* = 0x883D.GLenum
  GL_MAX_VERTEX_ATTRIBS* = 0x8869.GLenum
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED* = 0x886A.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS* = 0x8872.GLenum
  GL_FRAGMENT_SHADER* = 0x8B30.GLenum
  GL_VERTEX_SHADER* = 0x8B31.GLenum
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS* = 0x8B49.GLenum
  GL_MAX_VERTEX_UNIFORM_COMPONENTS* = 0x8B4A.GLenum
  GL_MAX_VARYING_FLOATS* = 0x8B4B.GLenum
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS* = 0x8B4C.GLenum
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS* = 0x8B4D.GLenum
  GL_SHADER_TYPE* = 0x8B4F.GLenum
  GL_FLOAT_VEC2* = 0x8B50.GLenum
  GL_FLOAT_VEC3* = 0x8B51.GLenum
  GL_FLOAT_VEC4* = 0x8B52.GLenum
  GL_INT_VEC2* = 0x8B53.GLenum
  GL_INT_VEC3* = 0x8B54.GLenum
  GL_INT_VEC4* = 0x8B55.GLenum
  GL_BOOL* = 0x8B56.GLenum
  GL_BOOL_VEC2* = 0x8B57.GLenum
  GL_BOOL_VEC3* = 0x8B58.GLenum
  GL_BOOL_VEC4* = 0x8B59.GLenum
  GL_FLOAT_MAT2* = 0x8B5A.GLenum
  GL_FLOAT_MAT3* = 0x8B5B.GLenum
  GL_FLOAT_MAT4* = 0x8B5C.GLenum
  GL_SAMPLER_1D* = 0x8B5D.GLenum
  GL_SAMPLER_2D* = 0x8B5E.GLenum
  GL_SAMPLER_3D* = 0x8B5F.GLenum
  GL_SAMPLER_CUBE* = 0x8B60.GLenum
  GL_SAMPLER_1D_SHADOW* = 0x8B61.GLenum
  GL_SAMPLER_2D_SHADOW* = 0x8B62.GLenum
  GL_DELETE_STATUS* = 0x8B80.GLenum
  GL_COMPILE_STATUS* = 0x8B81.GLenum
  GL_LINK_STATUS* = 0x8B82.GLenum
  GL_VALIDATE_STATUS* = 0x8B83.GLenum
  GL_INFO_LOG_LENGTH* = 0x8B84.GLenum
  GL_ATTACHED_SHADERS* = 0x8B85.GLenum
  GL_ACTIVE_UNIFORMS* = 0x8B86.GLenum
  GL_ACTIVE_UNIFORM_MAX_LENGTH* = 0x8B87.GLenum
  GL_SHADER_SOURCE_LENGTH* = 0x8B88.GLenum
  GL_ACTIVE_ATTRIBUTES* = 0x8B89.GLenum
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH* = 0x8B8A.GLenum
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT* = 0x8B8B.GLenum
  GL_SHADING_LANGUAGE_VERSION* = 0x8B8C.GLenum
  GL_CURRENT_PROGRAM* = 0x8B8D.GLenum
  GL_POINT_SPRITE_COORD_ORIGIN* = 0x8CA0.GLenum
  GL_LOWER_LEFT* = 0x8CA1.GLenum
  GL_UPPER_LEFT* = 0x8CA2.GLenum
  GL_STENCIL_BACK_REF* = 0x8CA3.GLenum
  GL_STENCIL_BACK_VALUE_MASK* = 0x8CA4.GLenum
  GL_STENCIL_BACK_WRITEMASK* = 0x8CA5.GLenum
  GL_PIXEL_PACK_BUFFER* = 0x88EB.GLenum
  GL_PIXEL_UNPACK_BUFFER* = 0x88EC.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING* = 0x88ED.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING* = 0x88EF.GLenum
  GL_FLOAT_MAT2x3* = 0x8B65.GLenum
  GL_FLOAT_MAT2x4* = 0x8B66.GLenum
  GL_FLOAT_MAT3x2* = 0x8B67.GLenum
  GL_FLOAT_MAT3x4* = 0x8B68.GLenum
  GL_FLOAT_MAT4x2* = 0x8B69.GLenum
  GL_FLOAT_MAT4x3* = 0x8B6A.GLenum
  GL_SRGB* = 0x8C40.GLenum
  GL_SRGB8* = 0x8C41.GLenum
  GL_SRGB_ALPHA* = 0x8C42.GLenum
  GL_SRGB8_ALPHA8* = 0x8C43.GLenum
  GL_COMPRESSED_SRGB* = 0x8C48.GLenum
  GL_COMPRESSED_SRGB_ALPHA* = 0x8C49.GLenum
  GL_COMPARE_REF_TO_TEXTURE* = 0x884E.GLenum
  GL_CLIP_DISTANCE0* = 0x3000.GLenum
  GL_CLIP_DISTANCE1* = 0x3001.GLenum
  GL_CLIP_DISTANCE2* = 0x3002.GLenum
  GL_CLIP_DISTANCE3* = 0x3003.GLenum
  GL_CLIP_DISTANCE4* = 0x3004.GLenum
  GL_CLIP_DISTANCE5* = 0x3005.GLenum
  GL_CLIP_DISTANCE6* = 0x3006.GLenum
  GL_CLIP_DISTANCE7* = 0x3007.GLenum
  GL_MAX_CLIP_DISTANCES* = 0x0D32.GLenum
  GL_MAJOR_VERSION* = 0x821B.GLenum
  GL_MINOR_VERSION* = 0x821C.GLenum
  GL_NUM_EXTENSIONS* = 0x821D.GLenum
  GL_CONTEXT_FLAGS* = 0x821E.GLenum
  GL_COMPRESSED_RED* = 0x8225.GLenum
  GL_COMPRESSED_RG* = 0x8226.GLenum
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT* = 0x00000001.GLbitfield
  GL_RGBA32F* = 0x8814.GLenum
  GL_RGB32F* = 0x8815.GLenum
  GL_RGBA16F* = 0x881A.GLenum
  GL_RGB16F* = 0x881B.GLenum
  GL_VERTEX_ATTRIB_ARRAY_INTEGER* = 0x88FD.GLenum
  GL_MAX_ARRAY_TEXTURE_LAYERS* = 0x88FF.GLenum
  GL_MIN_PROGRAM_TEXEL_OFFSET* = 0x8904.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET* = 0x8905.GLenum
  GL_CLAMP_READ_COLOR* = 0x891C.GLenum
  GL_FIXED_ONLY* = 0x891D.GLenum
  GL_MAX_VARYING_COMPONENTS* = 0x8B4B.GLenum
  GL_TEXTURE_1D_ARRAY* = 0x8C18.GLenum
  GL_PROXY_TEXTURE_1D_ARRAY* = 0x8C19.GLenum
  GL_TEXTURE_2D_ARRAY* = 0x8C1A.GLenum
  GL_PROXY_TEXTURE_2D_ARRAY* = 0x8C1B.GLenum
  GL_TEXTURE_BINDING_1D_ARRAY* = 0x8C1C.GLenum
  GL_TEXTURE_BINDING_2D_ARRAY* = 0x8C1D.GLenum
  GL_R11F_G11F_B10F* = 0x8C3A.GLenum
  GL_UNSIGNED_INT_10F_11F_11F_REV* = 0x8C3B.GLenum
  GL_RGB9_E5* = 0x8C3D.GLenum
  GL_UNSIGNED_INT_5_9_9_9_REV* = 0x8C3E.GLenum
  GL_TEXTURE_SHARED_SIZE* = 0x8C3F.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH* = 0x8C76.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE* = 0x8C7F.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS* = 0x8C80.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE* = 0x8C85.GLenum
  GL_PRIMITIVES_GENERATED* = 0x8C87.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN* = 0x8C88.GLenum
  GL_RASTERIZER_DISCARD* = 0x8C89.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS* = 0x8C8B.GLenum
  GL_INTERLEAVED_ATTRIBS* = 0x8C8C.GLenum
  GL_SEPARATE_ATTRIBS* = 0x8C8D.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING* = 0x8C8F.GLenum
  GL_RGBA32UI* = 0x8D70.GLenum
  GL_RGB32UI* = 0x8D71.GLenum
  GL_RGBA16UI* = 0x8D76.GLenum
  GL_RGB16UI* = 0x8D77.GLenum
  GL_RGBA8UI* = 0x8D7C.GLenum
  GL_RGB8UI* = 0x8D7D.GLenum
  GL_RGBA32I* = 0x8D82.GLenum
  GL_RGB32I* = 0x8D83.GLenum
  GL_RGBA16I* = 0x8D88.GLenum
  GL_RGB16I* = 0x8D89.GLenum
  GL_RGBA8I* = 0x8D8E.GLenum
  GL_RGB8I* = 0x8D8F.GLenum
  GL_RED_INTEGER* = 0x8D94.GLenum
  GL_GREEN_INTEGER* = 0x8D95.GLenum
  GL_BLUE_INTEGER* = 0x8D96.GLenum
  GL_RGB_INTEGER* = 0x8D98.GLenum
  GL_RGBA_INTEGER* = 0x8D99.GLenum
  GL_BGR_INTEGER* = 0x8D9A.GLenum
  GL_BGRA_INTEGER* = 0x8D9B.GLenum
  GL_SAMPLER_1D_ARRAY* = 0x8DC0.GLenum
  GL_SAMPLER_2D_ARRAY* = 0x8DC1.GLenum
  GL_SAMPLER_1D_ARRAY_SHADOW* = 0x8DC3.GLenum
  GL_SAMPLER_2D_ARRAY_SHADOW* = 0x8DC4.GLenum
  GL_SAMPLER_CUBE_SHADOW* = 0x8DC5.GLenum
  GL_UNSIGNED_INT_VEC2* = 0x8DC6.GLenum
  GL_UNSIGNED_INT_VEC3* = 0x8DC7.GLenum
  GL_UNSIGNED_INT_VEC4* = 0x8DC8.GLenum
  GL_INT_SAMPLER_1D* = 0x8DC9.GLenum
  GL_INT_SAMPLER_2D* = 0x8DCA.GLenum
  GL_INT_SAMPLER_3D* = 0x8DCB.GLenum
  GL_INT_SAMPLER_CUBE* = 0x8DCC.GLenum
  GL_INT_SAMPLER_1D_ARRAY* = 0x8DCE.GLenum
  GL_INT_SAMPLER_2D_ARRAY* = 0x8DCF.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D* = 0x8DD1.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D* = 0x8DD2.GLenum
  GL_UNSIGNED_INT_SAMPLER_3D* = 0x8DD3.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE* = 0x8DD4.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY* = 0x8DD6.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY* = 0x8DD7.GLenum
  GL_QUERY_WAIT* = 0x8E13.GLenum
  GL_QUERY_NO_WAIT* = 0x8E14.GLenum
  GL_QUERY_BY_REGION_WAIT* = 0x8E15.GLenum
  GL_QUERY_BY_REGION_NO_WAIT* = 0x8E16.GLenum
  GL_BUFFER_ACCESS_FLAGS* = 0x911F.GLenum
  GL_BUFFER_MAP_LENGTH* = 0x9120.GLenum
  GL_BUFFER_MAP_OFFSET* = 0x9121.GLenum
  GL_DEPTH_COMPONENT32F* = 0x8CAC.GLenum
  GL_DEPTH32F_STENCIL8* = 0x8CAD.GLenum
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV* = 0x8DAD.GLenum
  GL_INVALID_FRAMEBUFFER_OPERATION* = 0x0506.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING* = 0x8210.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE* = 0x8211.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE* = 0x8212.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE* = 0x8213.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE* = 0x8214.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE* = 0x8215.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE* = 0x8216.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE* = 0x8217.GLenum
  GL_FRAMEBUFFER_DEFAULT* = 0x8218.GLenum
  GL_FRAMEBUFFER_UNDEFINED* = 0x8219.GLenum
  GL_DEPTH_STENCIL_ATTACHMENT* = 0x821A.GLenum
  GL_MAX_RENDERBUFFER_SIZE* = 0x84E8.GLenum
  GL_DEPTH_STENCIL* = 0x84F9.GLenum
  GL_UNSIGNED_INT_24_8* = 0x84FA.GLenum
  GL_DEPTH24_STENCIL8* = 0x88F0.GLenum
  GL_TEXTURE_STENCIL_SIZE* = 0x88F1.GLenum
  GL_TEXTURE_RED_TYPE* = 0x8C10.GLenum
  GL_TEXTURE_GREEN_TYPE* = 0x8C11.GLenum
  GL_TEXTURE_BLUE_TYPE* = 0x8C12.GLenum
  GL_TEXTURE_ALPHA_TYPE* = 0x8C13.GLenum
  GL_TEXTURE_DEPTH_TYPE* = 0x8C16.GLenum
  GL_UNSIGNED_NORMALIZED* = 0x8C17.GLenum
  GL_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING* = 0x8CA6.GLenum
  GL_RENDERBUFFER_BINDING* = 0x8CA7.GLenum
  GL_READ_FRAMEBUFFER* = 0x8CA8.GLenum
  GL_DRAW_FRAMEBUFFER* = 0x8CA9.GLenum
  GL_READ_FRAMEBUFFER_BINDING* = 0x8CAA.GLenum
  GL_RENDERBUFFER_SAMPLES* = 0x8CAB.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE* = 0x8CD0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME* = 0x8CD1.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL* = 0x8CD2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE* = 0x8CD3.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER* = 0x8CD4.GLenum
  GL_FRAMEBUFFER_COMPLETE* = 0x8CD5.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT* = 0x8CD6.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT* = 0x8CD7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER* = 0x8CDB.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER* = 0x8CDC.GLenum
  GL_FRAMEBUFFER_UNSUPPORTED* = 0x8CDD.GLenum
  GL_MAX_COLOR_ATTACHMENTS* = 0x8CDF.GLenum
  GL_COLOR_ATTACHMENT0* = 0x8CE0.GLenum
  GL_COLOR_ATTACHMENT1* = 0x8CE1.GLenum
  GL_COLOR_ATTACHMENT2* = 0x8CE2.GLenum
  GL_COLOR_ATTACHMENT3* = 0x8CE3.GLenum
  GL_COLOR_ATTACHMENT4* = 0x8CE4.GLenum
  GL_COLOR_ATTACHMENT5* = 0x8CE5.GLenum
  GL_COLOR_ATTACHMENT6* = 0x8CE6.GLenum
  GL_COLOR_ATTACHMENT7* = 0x8CE7.GLenum
  GL_COLOR_ATTACHMENT8* = 0x8CE8.GLenum
  GL_COLOR_ATTACHMENT9* = 0x8CE9.GLenum
  GL_COLOR_ATTACHMENT10* = 0x8CEA.GLenum
  GL_COLOR_ATTACHMENT11* = 0x8CEB.GLenum
  GL_COLOR_ATTACHMENT12* = 0x8CEC.GLenum
  GL_COLOR_ATTACHMENT13* = 0x8CED.GLenum
  GL_COLOR_ATTACHMENT14* = 0x8CEE.GLenum
  GL_COLOR_ATTACHMENT15* = 0x8CEF.GLenum
  GL_COLOR_ATTACHMENT16* = 0x8CF0.GLenum
  GL_COLOR_ATTACHMENT17* = 0x8CF1.GLenum
  GL_COLOR_ATTACHMENT18* = 0x8CF2.GLenum
  GL_COLOR_ATTACHMENT19* = 0x8CF3.GLenum
  GL_COLOR_ATTACHMENT20* = 0x8CF4.GLenum
  GL_COLOR_ATTACHMENT21* = 0x8CF5.GLenum
  GL_COLOR_ATTACHMENT22* = 0x8CF6.GLenum
  GL_COLOR_ATTACHMENT23* = 0x8CF7.GLenum
  GL_COLOR_ATTACHMENT24* = 0x8CF8.GLenum
  GL_COLOR_ATTACHMENT25* = 0x8CF9.GLenum
  GL_COLOR_ATTACHMENT26* = 0x8CFA.GLenum
  GL_COLOR_ATTACHMENT27* = 0x8CFB.GLenum
  GL_COLOR_ATTACHMENT28* = 0x8CFC.GLenum
  GL_COLOR_ATTACHMENT29* = 0x8CFD.GLenum
  GL_COLOR_ATTACHMENT30* = 0x8CFE.GLenum
  GL_COLOR_ATTACHMENT31* = 0x8CFF.GLenum
  GL_DEPTH_ATTACHMENT* = 0x8D00.GLenum
  GL_STENCIL_ATTACHMENT* = 0x8D20.GLenum
  GL_FRAMEBUFFER* = 0x8D40.GLenum
  GL_RENDERBUFFER* = 0x8D41.GLenum
  GL_RENDERBUFFER_WIDTH* = 0x8D42.GLenum
  GL_RENDERBUFFER_HEIGHT* = 0x8D43.GLenum
  GL_RENDERBUFFER_INTERNAL_FORMAT* = 0x8D44.GLenum
  GL_STENCIL_INDEX1* = 0x8D46.GLenum
  GL_STENCIL_INDEX4* = 0x8D47.GLenum
  GL_STENCIL_INDEX8* = 0x8D48.GLenum
  GL_STENCIL_INDEX16* = 0x8D49.GLenum
  GL_RENDERBUFFER_RED_SIZE* = 0x8D50.GLenum
  GL_RENDERBUFFER_GREEN_SIZE* = 0x8D51.GLenum
  GL_RENDERBUFFER_BLUE_SIZE* = 0x8D52.GLenum
  GL_RENDERBUFFER_ALPHA_SIZE* = 0x8D53.GLenum
  GL_RENDERBUFFER_DEPTH_SIZE* = 0x8D54.GLenum
  GL_RENDERBUFFER_STENCIL_SIZE* = 0x8D55.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE* = 0x8D56.GLenum
  GL_MAX_SAMPLES* = 0x8D57.GLenum
  GL_FRAMEBUFFER_SRGB* = 0x8DB9.GLenum
  GL_HALF_FLOAT* = 0x140B.GLenum
  GL_MAP_READ_BIT* = 0x0001.GLbitfield
  GL_MAP_WRITE_BIT* = 0x0002.GLbitfield
  GL_MAP_INVALIDATE_RANGE_BIT* = 0x0004.GLbitfield
  GL_MAP_INVALIDATE_BUFFER_BIT* = 0x0008.GLbitfield
  GL_MAP_FLUSH_EXPLICIT_BIT* = 0x0010.GLbitfield
  GL_MAP_UNSYNCHRONIZED_BIT* = 0x0020.GLbitfield
  GL_COMPRESSED_RED_RGTC1* = 0x8DBB.GLenum
  GL_COMPRESSED_SIGNED_RED_RGTC1* = 0x8DBC.GLenum
  GL_COMPRESSED_RG_RGTC2* = 0x8DBD.GLenum
  GL_COMPRESSED_SIGNED_RG_RGTC2* = 0x8DBE.GLenum
  GL_RG* = 0x8227.GLenum
  GL_RG_INTEGER* = 0x8228.GLenum
  GL_R8* = 0x8229.GLenum
  GL_R16* = 0x822A.GLenum
  GL_RG8* = 0x822B.GLenum
  GL_RG16* = 0x822C.GLenum
  GL_R16F* = 0x822D.GLenum
  GL_R32F* = 0x822E.GLenum
  GL_RG16F* = 0x822F.GLenum
  GL_RG32F* = 0x8230.GLenum
  GL_R8I* = 0x8231.GLenum
  GL_R8UI* = 0x8232.GLenum
  GL_R16I* = 0x8233.GLenum
  GL_R16UI* = 0x8234.GLenum
  GL_R32I* = 0x8235.GLenum
  GL_R32UI* = 0x8236.GLenum
  GL_RG8I* = 0x8237.GLenum
  GL_RG8UI* = 0x8238.GLenum
  GL_RG16I* = 0x8239.GLenum
  GL_RG16UI* = 0x823A.GLenum
  GL_RG32I* = 0x823B.GLenum
  GL_RG32UI* = 0x823C.GLenum
  GL_VERTEX_ARRAY_BINDING* = 0x85B5.GLenum
  GL_SAMPLER_2D_RECT* = 0x8B63.GLenum
  GL_SAMPLER_2D_RECT_SHADOW* = 0x8B64.GLenum
  GL_SAMPLER_BUFFER* = 0x8DC2.GLenum
  GL_INT_SAMPLER_2D_RECT* = 0x8DCD.GLenum
  GL_INT_SAMPLER_BUFFER* = 0x8DD0.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_RECT* = 0x8DD5.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER* = 0x8DD8.GLenum
  GL_TEXTURE_BUFFER* = 0x8C2A.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE* = 0x8C2B.GLenum
  GL_TEXTURE_BINDING_BUFFER* = 0x8C2C.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING* = 0x8C2D.GLenum
  GL_TEXTURE_RECTANGLE* = 0x84F5.GLenum
  GL_TEXTURE_BINDING_RECTANGLE* = 0x84F6.GLenum
  GL_PROXY_TEXTURE_RECTANGLE* = 0x84F7.GLenum
  GL_MAX_RECTANGLE_TEXTURE_SIZE* = 0x84F8.GLenum
  GL_R8_SNORM* = 0x8F94.GLenum
  GL_RG8_SNORM* = 0x8F95.GLenum
  GL_RGB8_SNORM* = 0x8F96.GLenum
  GL_RGBA8_SNORM* = 0x8F97.GLenum
  GL_R16_SNORM* = 0x8F98.GLenum
  GL_RG16_SNORM* = 0x8F99.GLenum
  GL_RGB16_SNORM* = 0x8F9A.GLenum
  GL_RGBA16_SNORM* = 0x8F9B.GLenum
  GL_SIGNED_NORMALIZED* = 0x8F9C.GLenum
  GL_PRIMITIVE_RESTART* = 0x8F9D.GLenum
  GL_PRIMITIVE_RESTART_INDEX* = 0x8F9E.GLenum
  GL_COPY_READ_BUFFER* = 0x8F36.GLenum
  GL_COPY_WRITE_BUFFER* = 0x8F37.GLenum
  GL_UNIFORM_BUFFER* = 0x8A11.GLenum
  GL_UNIFORM_BUFFER_BINDING* = 0x8A28.GLenum
  GL_UNIFORM_BUFFER_START* = 0x8A29.GLenum
  GL_UNIFORM_BUFFER_SIZE* = 0x8A2A.GLenum
  GL_MAX_VERTEX_UNIFORM_BLOCKS* = 0x8A2B.GLenum
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS* = 0x8A2C.GLenum
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS* = 0x8A2D.GLenum
  GL_MAX_COMBINED_UNIFORM_BLOCKS* = 0x8A2E.GLenum
  GL_MAX_UNIFORM_BUFFER_BINDINGS* = 0x8A2F.GLenum
  GL_MAX_UNIFORM_BLOCK_SIZE* = 0x8A30.GLenum
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS* = 0x8A31.GLenum
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS* = 0x8A32.GLenum
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS* = 0x8A33.GLenum
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT* = 0x8A34.GLenum
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH* = 0x8A35.GLenum
  GL_ACTIVE_UNIFORM_BLOCKS* = 0x8A36.GLenum
  GL_UNIFORM_TYPE* = 0x8A37.GLenum
  GL_UNIFORM_SIZE* = 0x8A38.GLenum
  GL_UNIFORM_NAME_LENGTH* = 0x8A39.GLenum
  GL_UNIFORM_BLOCK_INDEX* = 0x8A3A.GLenum
  GL_UNIFORM_OFFSET* = 0x8A3B.GLenum
  GL_UNIFORM_ARRAY_STRIDE* = 0x8A3C.GLenum
  GL_UNIFORM_MATRIX_STRIDE* = 0x8A3D.GLenum
  GL_UNIFORM_IS_ROW_MAJOR* = 0x8A3E.GLenum
  GL_UNIFORM_BLOCK_BINDING* = 0x8A3F.GLenum
  GL_UNIFORM_BLOCK_DATA_SIZE* = 0x8A40.GLenum
  GL_UNIFORM_BLOCK_NAME_LENGTH* = 0x8A41.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS* = 0x8A42.GLenum
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES* = 0x8A43.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER* = 0x8A44.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER* = 0x8A45.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER* = 0x8A46.GLenum
  GL_CONTEXT_CORE_PROFILE_BIT* = 0x00000001.GLbitfield
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT* = 0x00000002.GLbitfield
  GL_LINES_ADJACENCY* = 0x000A.GLenum
  GL_LINE_STRIP_ADJACENCY* = 0x000B.GLenum
  GL_TRIANGLES_ADJACENCY* = 0x000C.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY* = 0x000D.GLenum
  GL_PROGRAM_POINT_SIZE* = 0x8642.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS* = 0x8C29.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS* = 0x8DA8.GLenum
  GL_GEOMETRY_SHADER* = 0x8DD9.GLenum
  GL_GEOMETRY_VERTICES_OUT* = 0x8916.GLenum
  GL_GEOMETRY_INPUT_TYPE* = 0x8917.GLenum
  GL_GEOMETRY_OUTPUT_TYPE* = 0x8918.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS* = 0x8DE1.GLenum
  GL_MAX_VERTEX_OUTPUT_COMPONENTS* = 0x9122.GLenum
  GL_MAX_GEOMETRY_INPUT_COMPONENTS* = 0x9123.GLenum
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS* = 0x9124.GLenum
  GL_MAX_FRAGMENT_INPUT_COMPONENTS* = 0x9125.GLenum
  GL_CONTEXT_PROFILE_MASK* = 0x9126.GLenum
  GL_DEPTH_CLAMP* = 0x864F.GLenum
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION* = 0x8E4C.GLenum
  GL_FIRST_VERTEX_CONVENTION* = 0x8E4D.GLenum
  GL_LAST_VERTEX_CONVENTION* = 0x8E4E.GLenum
  GL_PROVOKING_VERTEX* = 0x8E4F.GLenum
  GL_TEXTURE_CUBE_MAP_SEAMLESS* = 0x884F.GLenum
  GL_MAX_SERVER_WAIT_TIMEOUT* = 0x9111.GLenum
  GL_OBJECT_TYPE* = 0x9112.GLenum
  GL_SYNC_CONDITION* = 0x9113.GLenum
  GL_SYNC_STATUS* = 0x9114.GLenum
  GL_SYNC_FLAGS* = 0x9115.GLenum
  GL_SYNC_FENCE* = 0x9116.GLenum
  GL_SYNC_GPU_COMMANDS_COMPLETE* = 0x9117.GLenum
  GL_UNSIGNALED* = 0x9118.GLenum
  GL_SIGNALED* = 0x9119.GLenum
  GL_ALREADY_SIGNALED* = 0x911A.GLenum
  GL_TIMEOUT_EXPIRED* = 0x911B.GLenum
  GL_CONDITION_SATISFIED* = 0x911C.GLenum
  GL_WAIT_FAILED* = 0x911D.GLenum
  GL_SYNC_FLUSH_COMMANDS_BIT* = 0x00000001.GLbitfield
  GL_SAMPLE_POSITION* = 0x8E50.GLenum
  GL_SAMPLE_MASK* = 0x8E51.GLenum
  GL_SAMPLE_MASK_VALUE* = 0x8E52.GLenum
  GL_MAX_SAMPLE_MASK_WORDS* = 0x8E59.GLenum
  GL_TEXTURE_2D_MULTISAMPLE* = 0x9100.GLenum
  GL_PROXY_TEXTURE_2D_MULTISAMPLE* = 0x9101.GLenum
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY* = 0x9102.GLenum
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY* = 0x9103.GLenum
  GL_TEXTURE_BINDING_2D_MULTISAMPLE* = 0x9104.GLenum
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY* = 0x9105.GLenum
  GL_TEXTURE_SAMPLES* = 0x9106.GLenum
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS* = 0x9107.GLenum
  GL_SAMPLER_2D_MULTISAMPLE* = 0x9108.GLenum
  GL_INT_SAMPLER_2D_MULTISAMPLE* = 0x9109.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE* = 0x910A.GLenum
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910B.GLenum
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910C.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY* = 0x910D.GLenum
  GL_MAX_COLOR_TEXTURE_SAMPLES* = 0x910E.GLenum
  GL_MAX_DEPTH_TEXTURE_SAMPLES* = 0x910F.GLenum
  GL_MAX_INTEGER_SAMPLES* = 0x9110.GLenum
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR* = 0x88FE.GLenum
  GL_SRC1_COLOR* = 0x88F9.GLenum
  GL_ONE_MINUS_SRC1_COLOR* = 0x88FA.GLenum
  GL_ONE_MINUS_SRC1_ALPHA* = 0x88FB.GLenum
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS* = 0x88FC.GLenum
  GL_ANY_SAMPLES_PASSED* = 0x8C2F.GLenum
  GL_SAMPLER_BINDING* = 0x8919.GLenum
  GL_RGB10_A2UI* = 0x906F.GLenum
  GL_TEXTURE_SWIZZLE_R* = 0x8E42.GLenum
  GL_TEXTURE_SWIZZLE_G* = 0x8E43.GLenum
  GL_TEXTURE_SWIZZLE_B* = 0x8E44.GLenum
  GL_TEXTURE_SWIZZLE_A* = 0x8E45.GLenum
  GL_TEXTURE_SWIZZLE_RGBA* = 0x8E46.GLenum
  GL_TIME_ELAPSED* = 0x88BF.GLenum
  GL_TIMESTAMP* = 0x8E28.GLenum
  GL_INT_2_10_10_10_REV* = 0x8D9F.GLenum
  GL_SAMPLE_SHADING* = 0x8C36.GLenum
  GL_MIN_SAMPLE_SHADING_VALUE* = 0x8C37.GLenum
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET* = 0x8E5E.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET* = 0x8E5F.GLenum
  GL_TEXTURE_CUBE_MAP_ARRAY* = 0x9009.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY* = 0x900A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY* = 0x900B.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY* = 0x900C.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW* = 0x900D.GLenum
  GL_INT_SAMPLER_CUBE_MAP_ARRAY* = 0x900E.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY* = 0x900F.GLenum
  GL_DRAW_INDIRECT_BUFFER* = 0x8F3F.GLenum
  GL_DRAW_INDIRECT_BUFFER_BINDING* = 0x8F43.GLenum
  GL_GEOMETRY_SHADER_INVOCATIONS* = 0x887F.GLenum
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS* = 0x8E5A.GLenum
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET* = 0x8E5B.GLenum
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET* = 0x8E5C.GLenum
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS* = 0x8E5D.GLbitfield
  GL_MAX_VERTEX_STREAMS* = 0x8E71.GLenum
  GL_DOUBLE_VEC2* = 0x8FFC.GLenum
  GL_DOUBLE_VEC3* = 0x8FFD.GLenum
  GL_DOUBLE_VEC4* = 0x8FFE.GLenum
  GL_DOUBLE_MAT2* = 0x8F46.GLenum
  GL_DOUBLE_MAT3* = 0x8F47.GLenum
  GL_DOUBLE_MAT4* = 0x8F48.GLenum
  GL_DOUBLE_MAT2x3* = 0x8F49.GLenum
  GL_DOUBLE_MAT2x4* = 0x8F4A.GLenum
  GL_DOUBLE_MAT3x2* = 0x8F4B.GLenum
  GL_DOUBLE_MAT3x4* = 0x8F4C.GLenum
  GL_DOUBLE_MAT4x2* = 0x8F4D.GLenum
  GL_DOUBLE_MAT4x3* = 0x8F4E.GLenum
  GL_ACTIVE_SUBROUTINES* = 0x8DE5.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORMS* = 0x8DE6.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS* = 0x8E47.GLenum
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH* = 0x8E48.GLenum
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH* = 0x8E49.GLenum
  GL_MAX_SUBROUTINES* = 0x8DE7.GLenum
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS* = 0x8DE8.GLenum
  GL_NUM_COMPATIBLE_SUBROUTINES* = 0x8E4A.GLenum
  GL_COMPATIBLE_SUBROUTINES* = 0x8E4B.GLenum
  GL_PATCHES* = 0x000E.GLenum
  GL_PATCH_VERTICES* = 0x8E72.GLenum
  GL_PATCH_DEFAULT_INNER_LEVEL* = 0x8E73.GLenum
  GL_PATCH_DEFAULT_OUTER_LEVEL* = 0x8E74.GLenum
  GL_TESS_CONTROL_OUTPUT_VERTICES* = 0x8E75.GLenum
  GL_TESS_GEN_MODE* = 0x8E76.GLenum
  GL_TESS_GEN_SPACING* = 0x8E77.GLenum
  GL_TESS_GEN_VERTEX_ORDER* = 0x8E78.GLenum
  GL_TESS_GEN_POINT_MODE* = 0x8E79.GLenum
  GL_ISOLINES* = 0x8E7A.GLenum
  GL_QUADS* = 0x0007.GLenum
  GL_FRACTIONAL_ODD* = 0x8E7B.GLenum
  GL_FRACTIONAL_EVEN* = 0x8E7C.GLenum
  GL_MAX_PATCH_VERTICES* = 0x8E7D.GLenum
  GL_MAX_TESS_GEN_LEVEL* = 0x8E7E.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS* = 0x8E7F.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS* = 0x8E80.GLenum
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS* = 0x8E81.GLenum
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS* = 0x8E82.GLenum
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS* = 0x8E83.GLenum
  GL_MAX_TESS_PATCH_COMPONENTS* = 0x8E84.GLenum
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS* = 0x8E85.GLenum
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS* = 0x8E86.GLenum
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS* = 0x8E89.GLenum
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS* = 0x8E8A.GLenum
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS* = 0x886C.GLenum
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS* = 0x886D.GLenum
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS* = 0x8E1E.GLenum
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS* = 0x8E1F.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER* = 0x84F0.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER* = 0x84F1.GLenum
  GL_TESS_EVALUATION_SHADER* = 0x8E87.GLenum
  GL_TESS_CONTROL_SHADER* = 0x8E88.GLenum
  GL_TRANSFORM_FEEDBACK* = 0x8E22.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED* = 0x8E23.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_BINDING* = 0x8E25.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS* = 0x8E70.GLenum
  cGL_FIXED* = 0x140C.GLenum
  GL_IMPLEMENTATION_COLOR_READ_TYPE* = 0x8B9A.GLenum
  GL_IMPLEMENTATION_COLOR_READ_FORMAT* = 0x8B9B.GLenum
  GL_LOW_FLOAT* = 0x8DF0.GLenum
  GL_MEDIUM_FLOAT* = 0x8DF1.GLenum
  GL_HIGH_FLOAT* = 0x8DF2.GLenum
  GL_LOW_INT* = 0x8DF3.GLenum
  GL_MEDIUM_INT* = 0x8DF4.GLenum
  GL_HIGH_INT* = 0x8DF5.GLenum
  GL_SHADER_COMPILER* = 0x8DFA.GLenum
  GL_SHADER_BINARY_FORMATS* = 0x8DF8.GLenum
  GL_NUM_SHADER_BINARY_FORMATS* = 0x8DF9.GLenum
  GL_MAX_VERTEX_UNIFORM_VECTORS* = 0x8DFB.GLenum
  GL_MAX_VARYING_VECTORS* = 0x8DFC.GLenum
  GL_MAX_FRAGMENT_UNIFORM_VECTORS* = 0x8DFD.GLenum
  GL_RGB565* = 0x8D62.GLenum
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT* = 0x8257.GLenum
  GL_PROGRAM_BINARY_LENGTH* = 0x8741.GLenum
  GL_NUM_PROGRAM_BINARY_FORMATS* = 0x87FE.GLenum
  GL_PROGRAM_BINARY_FORMATS* = 0x87FF.GLenum
  GL_VERTEX_SHADER_BIT* = 0x00000001.GLbitfield
  GL_FRAGMENT_SHADER_BIT* = 0x00000002.GLbitfield
  GL_GEOMETRY_SHADER_BIT* = 0x00000004.GLbitfield
  GL_TESS_CONTROL_SHADER_BIT* = 0x00000008.GLbitfield
  GL_TESS_EVALUATION_SHADER_BIT* = 0x00000010.GLbitfield
  GL_ALL_SHADER_BITS* = 0xFFFFFFFF.GLbitfield
  GL_PROGRAM_SEPARABLE* = 0x8258.GLenum
  GL_ACTIVE_PROGRAM* = 0x8259.GLenum
  GL_PROGRAM_PIPELINE_BINDING* = 0x825A.GLenum
  GL_MAX_VIEWPORTS* = 0x825B.GLenum
  GL_VIEWPORT_SUBPIXEL_BITS* = 0x825C.GLbitfield
  GL_VIEWPORT_BOUNDS_RANGE* = 0x825D.GLenum
  GL_LAYER_PROVOKING_VERTEX* = 0x825E.GLenum
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX* = 0x825F.GLenum
  GL_UNDEFINED_VERTEX* = 0x8260.GLenum
  GL_COPY_READ_BUFFER_BINDING* = 0x8F36.GLenum
  GL_COPY_WRITE_BUFFER_BINDING* = 0x8F37.GLenum
  GL_TRANSFORM_FEEDBACK_ACTIVE* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_PAUSED* = 0x8E23.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_WIDTH* = 0x9127.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_HEIGHT* = 0x9128.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_DEPTH* = 0x9129.GLenum
  GL_UNPACK_COMPRESSED_BLOCK_SIZE* = 0x912A.GLenum
  GL_PACK_COMPRESSED_BLOCK_WIDTH* = 0x912B.GLenum
  GL_PACK_COMPRESSED_BLOCK_HEIGHT* = 0x912C.GLenum
  GL_PACK_COMPRESSED_BLOCK_DEPTH* = 0x912D.GLenum
  GL_PACK_COMPRESSED_BLOCK_SIZE* = 0x912E.GLenum
  GL_NUM_SAMPLE_COUNTS* = 0x9380.GLenum
  GL_MIN_MAP_BUFFER_ALIGNMENT* = 0x90BC.GLenum
  GL_ATOMIC_COUNTER_BUFFER* = 0x92C0.GLenum
  GL_ATOMIC_COUNTER_BUFFER_BINDING* = 0x92C1.GLenum
  GL_ATOMIC_COUNTER_BUFFER_START* = 0x92C2.GLenum
  GL_ATOMIC_COUNTER_BUFFER_SIZE* = 0x92C3.GLenum
  GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE* = 0x92C4.GLenum
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS* = 0x92C5.GLenum
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES* = 0x92C6.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER* = 0x92C7.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER* = 0x92C8.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER* = 0x92C9.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER* = 0x92CA.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER* = 0x92CB.GLenum
  GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS* = 0x92CC.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS* = 0x92CD.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS* = 0x92CE.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS* = 0x92CF.GLenum
  GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS* = 0x92D0.GLenum
  GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS* = 0x92D1.GLenum
  GL_MAX_VERTEX_ATOMIC_COUNTERS* = 0x92D2.GLenum
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS* = 0x92D3.GLenum
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS* = 0x92D4.GLenum
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS* = 0x92D5.GLenum
  GL_MAX_FRAGMENT_ATOMIC_COUNTERS* = 0x92D6.GLenum
  GL_MAX_COMBINED_ATOMIC_COUNTERS* = 0x92D7.GLenum
  GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE* = 0x92D8.GLenum
  GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS* = 0x92DC.GLenum
  GL_ACTIVE_ATOMIC_COUNTER_BUFFERS* = 0x92D9.GLenum
  GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX* = 0x92DA.GLenum
  GL_UNSIGNED_INT_ATOMIC_COUNTER* = 0x92DB.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT* = 0x00000001.GLbitfield
  GL_ELEMENT_ARRAY_BARRIER_BIT* = 0x00000002.GLbitfield
  GL_UNIFORM_BARRIER_BIT* = 0x00000004.GLbitfield
  GL_TEXTURE_FETCH_BARRIER_BIT* = 0x00000008.GLbitfield
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT* = 0x00000020.GLbitfield
  GL_COMMAND_BARRIER_BIT* = 0x00000040.GLbitfield
  GL_PIXEL_BUFFER_BARRIER_BIT* = 0x00000080.GLbitfield
  GL_TEXTURE_UPDATE_BARRIER_BIT* = 0x00000100.GLbitfield
  GL_BUFFER_UPDATE_BARRIER_BIT* = 0x00000200.GLbitfield
  GL_FRAMEBUFFER_BARRIER_BIT* = 0x00000400.GLbitfield
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT* = 0x00000800.GLbitfield
  GL_ATOMIC_COUNTER_BARRIER_BIT* = 0x00001000.GLbitfield
  GL_ALL_BARRIER_BITS* = 0xFFFFFFFF.GLbitfield
  GL_MAX_IMAGE_UNITS* = 0x8F38.GLenum
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS* = 0x8F39.GLenum
  GL_IMAGE_BINDING_NAME* = 0x8F3A.GLenum
  GL_IMAGE_BINDING_LEVEL* = 0x8F3B.GLenum
  GL_IMAGE_BINDING_LAYERED* = 0x8F3C.GLenum
  GL_IMAGE_BINDING_LAYER* = 0x8F3D.GLenum
  GL_IMAGE_BINDING_ACCESS* = 0x8F3E.GLenum
  GL_IMAGE_1D* = 0x904C.GLenum
  GL_IMAGE_2D* = 0x904D.GLenum
  GL_IMAGE_3D* = 0x904E.GLenum
  GL_IMAGE_2D_RECT* = 0x904F.GLenum
  GL_IMAGE_CUBE* = 0x9050.GLenum
  GL_IMAGE_BUFFER* = 0x9051.GLenum
  GL_IMAGE_1D_ARRAY* = 0x9052.GLenum
  GL_IMAGE_2D_ARRAY* = 0x9053.GLenum
  GL_IMAGE_CUBE_MAP_ARRAY* = 0x9054.GLenum
  GL_IMAGE_2D_MULTISAMPLE* = 0x9055.GLenum
  GL_IMAGE_2D_MULTISAMPLE_ARRAY* = 0x9056.GLenum
  GL_INT_IMAGE_1D* = 0x9057.GLenum
  GL_INT_IMAGE_2D* = 0x9058.GLenum
  GL_INT_IMAGE_3D* = 0x9059.GLenum
  GL_INT_IMAGE_2D_RECT* = 0x905A.GLenum
  GL_INT_IMAGE_CUBE* = 0x905B.GLenum
  GL_INT_IMAGE_BUFFER* = 0x905C.GLenum
  GL_INT_IMAGE_1D_ARRAY* = 0x905D.GLenum
  GL_INT_IMAGE_2D_ARRAY* = 0x905E.GLenum
  GL_INT_IMAGE_CUBE_MAP_ARRAY* = 0x905F.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE* = 0x9060.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY* = 0x9061.GLenum
  GL_UNSIGNED_INT_IMAGE_1D* = 0x9062.GLenum
  GL_UNSIGNED_INT_IMAGE_2D* = 0x9063.GLenum
  GL_UNSIGNED_INT_IMAGE_3D* = 0x9064.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_RECT* = 0x9065.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE* = 0x9066.GLenum
  GL_UNSIGNED_INT_IMAGE_BUFFER* = 0x9067.GLenum
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY* = 0x9068.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY* = 0x9069.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY* = 0x906A.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE* = 0x906B.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY* = 0x906C.GLenum
  GL_MAX_IMAGE_SAMPLES* = 0x906D.GLenum
  GL_IMAGE_BINDING_FORMAT* = 0x906E.GLenum
  GL_IMAGE_FORMAT_COMPATIBILITY_TYPE* = 0x90C7.GLenum
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE* = 0x90C8.GLenum
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS* = 0x90C9.GLenum
  GL_MAX_VERTEX_IMAGE_UNIFORMS* = 0x90CA.GLenum
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS* = 0x90CB.GLenum
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS* = 0x90CC.GLenum
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS* = 0x90CD.GLenum
  GL_MAX_FRAGMENT_IMAGE_UNIFORMS* = 0x90CE.GLenum
  GL_MAX_COMBINED_IMAGE_UNIFORMS* = 0x90CF.GLenum
  GL_COMPRESSED_RGBA_BPTC_UNORM* = 0x8E8C.GLenum
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM* = 0x8E8D.GLenum
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT* = 0x8E8E.GLenum
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT* = 0x8E8F.GLenum
  GL_TEXTURE_IMMUTABLE_FORMAT* = 0x912F.GLenum
  GL_NUM_SHADING_LANGUAGE_VERSIONS* = 0x82E9.GLenum
  GL_VERTEX_ATTRIB_ARRAY_LONG* = 0x874E.GLenum
  GL_COMPRESSED_RGB8_ETC2* = 0x9274.GLenum
  GL_COMPRESSED_SRGB8_ETC2* = 0x9275.GLenum
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2* = 0x9276.GLenum
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2* = 0x9277.GLenum
  GL_COMPRESSED_RGBA8_ETC2_EAC* = 0x9278.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC* = 0x9279.GLenum
  GL_COMPRESSED_R11_EAC* = 0x9270.GLenum
  GL_COMPRESSED_SIGNED_R11_EAC* = 0x9271.GLenum
  GL_COMPRESSED_RG11_EAC* = 0x9272.GLenum
  GL_COMPRESSED_SIGNED_RG11_EAC* = 0x9273.GLenum
  GL_PRIMITIVE_RESTART_FIXED_INDEX* = 0x8D69.GLenum
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE* = 0x8D6A.GLenum
  GL_MAX_ELEMENT_INDEX* = 0x8D6B.GLenum
  GL_COMPUTE_SHADER* = 0x91B9.GLenum
  GL_MAX_COMPUTE_UNIFORM_BLOCKS* = 0x91BB.GLenum
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS* = 0x91BC.GLenum
  GL_MAX_COMPUTE_IMAGE_UNIFORMS* = 0x91BD.GLenum
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE* = 0x8262.GLenum
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS* = 0x8263.GLenum
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS* = 0x8264.GLenum
  GL_MAX_COMPUTE_ATOMIC_COUNTERS* = 0x8265.GLenum
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS* = 0x8266.GLenum
  GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS* = 0x90EB.GLenum
  GL_MAX_COMPUTE_WORK_GROUP_COUNT* = 0x91BE.GLenum
  GL_MAX_COMPUTE_WORK_GROUP_SIZE* = 0x91BF.GLenum
  GL_COMPUTE_WORK_GROUP_SIZE* = 0x8267.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER* = 0x90EC.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER* = 0x90ED.GLenum
  GL_DISPATCH_INDIRECT_BUFFER* = 0x90EE.GLenum
  GL_DISPATCH_INDIRECT_BUFFER_BINDING* = 0x90EF.GLenum
  GL_COMPUTE_SHADER_BIT* = 0x00000020.GLbitfield
  GL_DEBUG_OUTPUT_SYNCHRONOUS* = 0x8242.GLenum
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH* = 0x8243.GLenum
  GL_DEBUG_CALLBACK_FUNCTION* = 0x8244.GLenum
  GL_DEBUG_CALLBACK_USER_PARAM* = 0x8245.GLenum
  GL_DEBUG_SOURCE_API* = 0x8246.GLenum
  GL_DEBUG_SOURCE_WINDOW_SYSTEM* = 0x8247.GLenum
  GL_DEBUG_SOURCE_SHADER_COMPILER* = 0x8248.GLenum
  GL_DEBUG_SOURCE_THIRD_PARTY* = 0x8249.GLenum
  GL_DEBUG_SOURCE_APPLICATION* = 0x824A.GLenum
  GL_DEBUG_SOURCE_OTHER* = 0x824B.GLenum
  GL_DEBUG_TYPE_ERROR* = 0x824C.GLenum
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR* = 0x824D.GLenum
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR* = 0x824E.GLenum
  GL_DEBUG_TYPE_PORTABILITY* = 0x824F.GLenum
  GL_DEBUG_TYPE_PERFORMANCE* = 0x8250.GLenum
  GL_DEBUG_TYPE_OTHER* = 0x8251.GLenum
  GL_MAX_DEBUG_MESSAGE_LENGTH* = 0x9143.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES* = 0x9144.GLenum
  GL_DEBUG_LOGGED_MESSAGES* = 0x9145.GLenum
  GL_DEBUG_SEVERITY_HIGH* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_MEDIUM* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_LOW* = 0x9148.GLenum
  GL_DEBUG_TYPE_MARKER* = 0x8268.GLenum
  GL_DEBUG_TYPE_PUSH_GROUP* = 0x8269.GLenum
  GL_DEBUG_TYPE_POP_GROUP* = 0x826A.GLenum
  GL_DEBUG_SEVERITY_NOTIFICATION* = 0x826B.GLenum
  GL_MAX_DEBUG_GROUP_STACK_DEPTH* = 0x826C.GLenum
  GL_DEBUG_GROUP_STACK_DEPTH* = 0x826D.GLenum
  GL_BUFFER* = 0x82E0.GLenum
  GL_SHADER* = 0x82E1.GLenum
  GL_PROGRAM* = 0x82E2.GLenum
  GL_VERTEX_ARRAY* = 0x8074.GLenum
  GL_QUERY* = 0x82E3.GLenum
  GL_PROGRAM_PIPELINE* = 0x82E4.GLenum
  GL_SAMPLER* = 0x82E6.GLenum
  GL_MAX_LABEL_LENGTH* = 0x82E8.GLenum
  GL_DEBUG_OUTPUT* = 0x92E0.GLenum
  GL_CONTEXT_FLAG_DEBUG_BIT* = 0x00000002.GLbitfield
  GL_MAX_UNIFORM_LOCATIONS* = 0x826E.GLenum
  GL_FRAMEBUFFER_DEFAULT_WIDTH* = 0x9310.GLenum
  GL_FRAMEBUFFER_DEFAULT_HEIGHT* = 0x9311.GLenum
  GL_FRAMEBUFFER_DEFAULT_LAYERS* = 0x9312.GLenum
  GL_FRAMEBUFFER_DEFAULT_SAMPLES* = 0x9313.GLenum
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS* = 0x9314.GLenum
  GL_MAX_FRAMEBUFFER_WIDTH* = 0x9315.GLenum
  GL_MAX_FRAMEBUFFER_HEIGHT* = 0x9316.GLenum
  GL_MAX_FRAMEBUFFER_LAYERS* = 0x9317.GLenum
  GL_MAX_FRAMEBUFFER_SAMPLES* = 0x9318.GLenum
  GL_INTERNALFORMAT_SUPPORTED* = 0x826F.GLenum
  GL_INTERNALFORMAT_PREFERRED* = 0x8270.GLenum
  GL_INTERNALFORMAT_RED_SIZE* = 0x8271.GLenum
  GL_INTERNALFORMAT_GREEN_SIZE* = 0x8272.GLenum
  GL_INTERNALFORMAT_BLUE_SIZE* = 0x8273.GLenum
  GL_INTERNALFORMAT_ALPHA_SIZE* = 0x8274.GLenum
  GL_INTERNALFORMAT_DEPTH_SIZE* = 0x8275.GLenum
  GL_INTERNALFORMAT_STENCIL_SIZE* = 0x8276.GLenum
  GL_INTERNALFORMAT_SHARED_SIZE* = 0x8277.GLenum
  GL_INTERNALFORMAT_RED_TYPE* = 0x8278.GLenum
  GL_INTERNALFORMAT_GREEN_TYPE* = 0x8279.GLenum
  GL_INTERNALFORMAT_BLUE_TYPE* = 0x827A.GLenum
  GL_INTERNALFORMAT_ALPHA_TYPE* = 0x827B.GLenum
  GL_INTERNALFORMAT_DEPTH_TYPE* = 0x827C.GLenum
  GL_INTERNALFORMAT_STENCIL_TYPE* = 0x827D.GLenum
  GL_MAX_WIDTH* = 0x827E.GLenum
  GL_MAX_HEIGHT* = 0x827F.GLenum
  GL_MAX_DEPTH* = 0x8280.GLenum
  GL_MAX_LAYERS* = 0x8281.GLenum
  GL_MAX_COMBINED_DIMENSIONS* = 0x8282.GLenum
  GL_COLOR_COMPONENTS* = 0x8283.GLenum
  GL_DEPTH_COMPONENTS* = 0x8284.GLenum
  GL_STENCIL_COMPONENTS* = 0x8285.GLenum
  GL_COLOR_RENDERABLE* = 0x8286.GLenum
  GL_DEPTH_RENDERABLE* = 0x8287.GLenum
  GL_STENCIL_RENDERABLE* = 0x8288.GLenum
  GL_FRAMEBUFFER_RENDERABLE* = 0x8289.GLenum
  GL_FRAMEBUFFER_RENDERABLE_LAYERED* = 0x828A.GLenum
  GL_FRAMEBUFFER_BLEND* = 0x828B.GLenum
  GL_READ_PIXELS* = 0x828C.GLenum
  GL_READ_PIXELS_FORMAT* = 0x828D.GLenum
  GL_READ_PIXELS_TYPE* = 0x828E.GLenum
  GL_TEXTURE_IMAGE_FORMAT* = 0x828F.GLenum
  GL_TEXTURE_IMAGE_TYPE* = 0x8290.GLenum
  GL_GET_TEXTURE_IMAGE_FORMAT* = 0x8291.GLenum
  GL_GET_TEXTURE_IMAGE_TYPE* = 0x8292.GLenum
  GL_MIPMAP* = 0x8293.GLenum
  GL_MANUAL_GENERATE_MIPMAP* = 0x8294.GLenum
  GL_AUTO_GENERATE_MIPMAP* = 0x8295.GLenum
  GL_COLOR_ENCODING* = 0x8296.GLenum
  GL_SRGB_READ* = 0x8297.GLenum
  GL_SRGB_WRITE* = 0x8298.GLenum
  GL_FILTER* = 0x829A.GLenum
  GL_VERTEX_TEXTURE* = 0x829B.GLenum
  GL_TESS_CONTROL_TEXTURE* = 0x829C.GLenum
  GL_TESS_EVALUATION_TEXTURE* = 0x829D.GLenum
  GL_GEOMETRY_TEXTURE* = 0x829E.GLenum
  GL_FRAGMENT_TEXTURE* = 0x829F.GLenum
  GL_COMPUTE_TEXTURE* = 0x82A0.GLenum
  GL_TEXTURE_SHADOW* = 0x82A1.GLenum
  GL_TEXTURE_GATHER* = 0x82A2.GLenum
  GL_TEXTURE_GATHER_SHADOW* = 0x82A3.GLenum
  GL_SHADER_IMAGE_LOAD* = 0x82A4.GLenum
  GL_SHADER_IMAGE_STORE* = 0x82A5.GLenum
  GL_SHADER_IMAGE_ATOMIC* = 0x82A6.GLenum
  GL_IMAGE_TEXEL_SIZE* = 0x82A7.GLenum
  GL_IMAGE_COMPATIBILITY_CLASS* = 0x82A8.GLenum
  GL_IMAGE_PIXEL_FORMAT* = 0x82A9.GLenum
  GL_IMAGE_PIXEL_TYPE* = 0x82AA.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST* = 0x82AC.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST* = 0x82AD.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE* = 0x82AE.GLenum
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE* = 0x82AF.GLenum
  GL_TEXTURE_COMPRESSED_BLOCK_WIDTH* = 0x82B1.GLenum
  GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT* = 0x82B2.GLenum
  GL_TEXTURE_COMPRESSED_BLOCK_SIZE* = 0x82B3.GLenum
  GL_CLEAR_BUFFER* = 0x82B4.GLenum
  GL_TEXTURE_VIEW* = 0x82B5.GLenum
  GL_VIEW_COMPATIBILITY_CLASS* = 0x82B6.GLenum
  GL_FULL_SUPPORT* = 0x82B7.GLenum
  GL_CAVEAT_SUPPORT* = 0x82B8.GLenum
  GL_IMAGE_CLASS_4_X_32* = 0x82B9.GLenum
  GL_IMAGE_CLASS_2_X_32* = 0x82BA.GLenum
  GL_IMAGE_CLASS_1_X_32* = 0x82BB.GLenum
  GL_IMAGE_CLASS_4_X_16* = 0x82BC.GLenum
  GL_IMAGE_CLASS_2_X_16* = 0x82BD.GLenum
  GL_IMAGE_CLASS_1_X_16* = 0x82BE.GLenum
  GL_IMAGE_CLASS_4_X_8* = 0x82BF.GLenum
  GL_IMAGE_CLASS_2_X_8* = 0x82C0.GLenum
  GL_IMAGE_CLASS_1_X_8* = 0x82C1.GLenum
  GL_IMAGE_CLASS_11_11_10* = 0x82C2.GLenum
  GL_IMAGE_CLASS_10_10_10_2* = 0x82C3.GLenum
  GL_VIEW_CLASS_128_BITS* = 0x82C4.GLbitfield
  GL_VIEW_CLASS_96_BITS* = 0x82C5.GLbitfield
  GL_VIEW_CLASS_64_BITS* = 0x82C6.GLbitfield
  GL_VIEW_CLASS_48_BITS* = 0x82C7.GLbitfield
  GL_VIEW_CLASS_32_BITS* = 0x82C8.GLbitfield
  GL_VIEW_CLASS_24_BITS* = 0x82C9.GLbitfield
  GL_VIEW_CLASS_16_BITS* = 0x82CA.GLbitfield
  GL_VIEW_CLASS_8_BITS* = 0x82CB.GLbitfield
  GL_VIEW_CLASS_S3TC_DXT1_RGB* = 0x82CC.GLenum
  GL_VIEW_CLASS_S3TC_DXT1_RGBA* = 0x82CD.GLenum
  GL_VIEW_CLASS_S3TC_DXT3_RGBA* = 0x82CE.GLenum
  GL_VIEW_CLASS_S3TC_DXT5_RGBA* = 0x82CF.GLenum
  GL_VIEW_CLASS_RGTC1_RED* = 0x82D0.GLenum
  GL_VIEW_CLASS_RGTC2_RG* = 0x82D1.GLenum
  GL_VIEW_CLASS_BPTC_UNORM* = 0x82D2.GLenum
  GL_VIEW_CLASS_BPTC_FLOAT* = 0x82D3.GLenum
  GL_UNIFORM* = 0x92E1.GLenum
  GL_UNIFORM_BLOCK* = 0x92E2.GLenum
  GL_PROGRAM_INPUT* = 0x92E3.GLenum
  GL_PROGRAM_OUTPUT* = 0x92E4.GLenum
  GL_BUFFER_VARIABLE* = 0x92E5.GLenum
  GL_SHADER_STORAGE_BLOCK* = 0x92E6.GLenum
  GL_VERTEX_SUBROUTINE* = 0x92E8.GLenum
  GL_TESS_CONTROL_SUBROUTINE* = 0x92E9.GLenum
  GL_TESS_EVALUATION_SUBROUTINE* = 0x92EA.GLenum
  GL_GEOMETRY_SUBROUTINE* = 0x92EB.GLenum
  GL_FRAGMENT_SUBROUTINE* = 0x92EC.GLenum
  GL_COMPUTE_SUBROUTINE* = 0x92ED.GLenum
  GL_VERTEX_SUBROUTINE_UNIFORM* = 0x92EE.GLenum
  GL_TESS_CONTROL_SUBROUTINE_UNIFORM* = 0x92EF.GLenum
  GL_TESS_EVALUATION_SUBROUTINE_UNIFORM* = 0x92F0.GLenum
  GL_GEOMETRY_SUBROUTINE_UNIFORM* = 0x92F1.GLenum
  GL_FRAGMENT_SUBROUTINE_UNIFORM* = 0x92F2.GLenum
  GL_COMPUTE_SUBROUTINE_UNIFORM* = 0x92F3.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING* = 0x92F4.GLenum
  GL_ACTIVE_RESOURCES* = 0x92F5.GLenum
  GL_MAX_NAME_LENGTH* = 0x92F6.GLenum
  GL_MAX_NUM_ACTIVE_VARIABLES* = 0x92F7.GLenum
  GL_MAX_NUM_COMPATIBLE_SUBROUTINES* = 0x92F8.GLenum
  GL_NAME_LENGTH* = 0x92F9.GLenum
  GL_TYPE* = 0x92FA.GLenum
  GL_ARRAY_SIZE* = 0x92FB.GLenum
  GL_OFFSET* = 0x92FC.GLenum
  GL_BLOCK_INDEX* = 0x92FD.GLenum
  GL_ARRAY_STRIDE* = 0x92FE.GLenum
  GL_MATRIX_STRIDE* = 0x92FF.GLenum
  GL_IS_ROW_MAJOR* = 0x9300.GLenum
  GL_ATOMIC_COUNTER_BUFFER_INDEX* = 0x9301.GLenum
  GL_BUFFER_BINDING* = 0x9302.GLenum
  GL_BUFFER_DATA_SIZE* = 0x9303.GLenum
  GL_NUM_ACTIVE_VARIABLES* = 0x9304.GLenum
  GL_ACTIVE_VARIABLES* = 0x9305.GLenum
  GL_REFERENCED_BY_VERTEX_SHADER* = 0x9306.GLenum
  GL_REFERENCED_BY_TESS_CONTROL_SHADER* = 0x9307.GLenum
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER* = 0x9308.GLenum
  GL_REFERENCED_BY_GEOMETRY_SHADER* = 0x9309.GLenum
  GL_REFERENCED_BY_FRAGMENT_SHADER* = 0x930A.GLenum
  GL_REFERENCED_BY_COMPUTE_SHADER* = 0x930B.GLenum
  GL_TOP_LEVEL_ARRAY_SIZE* = 0x930C.GLenum
  GL_TOP_LEVEL_ARRAY_STRIDE* = 0x930D.GLenum
  GL_LOCATION* = 0x930E.GLenum
  GL_LOCATION_INDEX* = 0x930F.GLenum
  GL_IS_PER_PATCH* = 0x92E7.GLenum
  GL_SHADER_STORAGE_BUFFER* = 0x90D2.GLenum
  GL_SHADER_STORAGE_BUFFER_BINDING* = 0x90D3.GLenum
  GL_SHADER_STORAGE_BUFFER_START* = 0x90D4.GLenum
  GL_SHADER_STORAGE_BUFFER_SIZE* = 0x90D5.GLenum
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS* = 0x90D6.GLenum
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS* = 0x90D7.GLenum
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS* = 0x90D8.GLenum
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS* = 0x90D9.GLenum
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS* = 0x90DA.GLenum
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS* = 0x90DB.GLenum
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS* = 0x90DC.GLenum
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS* = 0x90DD.GLenum
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE* = 0x90DE.GLenum
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT* = 0x90DF.GLenum
  GL_SHADER_STORAGE_BARRIER_BIT* = 0x00002000.GLbitfield
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES* = 0x8F39.GLenum
  GL_DEPTH_STENCIL_TEXTURE_MODE* = 0x90EA.GLenum
  GL_TEXTURE_BUFFER_OFFSET* = 0x919D.GLenum
  GL_TEXTURE_BUFFER_SIZE* = 0x919E.GLenum
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT* = 0x919F.GLenum
  GL_TEXTURE_VIEW_MIN_LEVEL* = 0x82DB.GLenum
  GL_TEXTURE_VIEW_NUM_LEVELS* = 0x82DC.GLenum
  GL_TEXTURE_VIEW_MIN_LAYER* = 0x82DD.GLenum
  GL_TEXTURE_VIEW_NUM_LAYERS* = 0x82DE.GLenum
  GL_TEXTURE_IMMUTABLE_LEVELS* = 0x82DF.GLenum
  GL_VERTEX_ATTRIB_BINDING* = 0x82D4.GLenum
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET* = 0x82D5.GLenum
  GL_VERTEX_BINDING_DIVISOR* = 0x82D6.GLenum
  GL_VERTEX_BINDING_OFFSET* = 0x82D7.GLenum
  GL_VERTEX_BINDING_STRIDE* = 0x82D8.GLenum
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET* = 0x82D9.GLenum
  GL_MAX_VERTEX_ATTRIB_BINDINGS* = 0x82DA.GLenum
  GL_VERTEX_BINDING_BUFFER* = 0x8F4F.GLenum
  GL_DISPLAY_LIST* = 0x82E7.GLenum
  GL_STACK_UNDERFLOW* = 0x0504.GLenum
  GL_STACK_OVERFLOW* = 0x0503.GLenum
  GL_MAX_VERTEX_ATTRIB_STRIDE* = 0x82E5.GLenum
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED* = 0x8221.GLenum
  GL_TEXTURE_BUFFER_BINDING* = 0x8C2A.GLenum
  GL_MAP_PERSISTENT_BIT* = 0x0040.GLbitfield
  GL_MAP_COHERENT_BIT* = 0x0080.GLbitfield
  GL_DYNAMIC_STORAGE_BIT* = 0x0100.GLbitfield
  GL_CLIENT_STORAGE_BIT* = 0x0200.GLbitfield
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT* = 0x00004000.GLbitfield
  GL_BUFFER_IMMUTABLE_STORAGE* = 0x821F.GLenum
  GL_BUFFER_STORAGE_FLAGS* = 0x8220.GLenum
  GL_CLEAR_TEXTURE* = 0x9365.GLenum
  GL_LOCATION_COMPONENT* = 0x934A.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_INDEX* = 0x934B.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE* = 0x934C.GLenum
  GL_QUERY_BUFFER* = 0x9192.GLenum
  GL_QUERY_BUFFER_BARRIER_BIT* = 0x00008000.GLbitfield
  GL_QUERY_BUFFER_BINDING* = 0x9193.GLenum
  GL_QUERY_RESULT_NO_WAIT* = 0x9194.GLenum
  GL_MIRROR_CLAMP_TO_EDGE* = 0x8743.GLenum
  GL_CONTEXT_LOST* = 0x0507.GLenum
  GL_NEGATIVE_ONE_TO_ONE* = 0x935E.GLenum
  GL_ZERO_TO_ONE* = 0x935F.GLenum
  GL_CLIP_ORIGIN* = 0x935C.GLenum
  GL_CLIP_DEPTH_MODE* = 0x935D.GLenum
  GL_QUERY_WAIT_INVERTED* = 0x8E17.GLenum
  GL_QUERY_NO_WAIT_INVERTED* = 0x8E18.GLenum
  GL_QUERY_BY_REGION_WAIT_INVERTED* = 0x8E19.GLenum
  GL_QUERY_BY_REGION_NO_WAIT_INVERTED* = 0x8E1A.GLenum
  GL_MAX_CULL_DISTANCES* = 0x82F9.GLenum
  GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES* = 0x82FA.GLenum
  GL_TEXTURE_TARGET* = 0x1006.GLenum
  GL_QUERY_TARGET* = 0x82EA.GLenum
  GL_GUILTY_CONTEXT_RESET* = 0x8253.GLenum
  GL_INNOCENT_CONTEXT_RESET* = 0x8254.GLenum
  GL_UNKNOWN_CONTEXT_RESET* = 0x8255.GLenum
  GL_RESET_NOTIFICATION_STRATEGY* = 0x8256.GLenum
  GL_LOSE_CONTEXT_ON_RESET* = 0x8252.GLenum
  GL_NO_RESET_NOTIFICATION* = 0x8261.GLenum
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT* = 0x00000004.GLbitfield
  GL_COLOR_TABLE* = 0x80D0.GLenum
  GL_POST_CONVOLUTION_COLOR_TABLE* = 0x80D1.GLenum
  GL_POST_COLOR_MATRIX_COLOR_TABLE* = 0x80D2.GLenum
  GL_PROXY_COLOR_TABLE* = 0x80D3.GLenum
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE* = 0x80D4.GLenum
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE* = 0x80D5.GLenum
  GL_CONVOLUTION_1D* = 0x8010.GLenum
  GL_CONVOLUTION_2D* = 0x8011.GLenum
  GL_SEPARABLE_2D* = 0x8012.GLenum
  GL_HISTOGRAM* = 0x8024.GLenum
  GL_PROXY_HISTOGRAM* = 0x8025.GLenum
  GL_MINMAX* = 0x802E.GLenum
  GL_CONTEXT_RELEASE_BEHAVIOR* = 0x82FB.GLenum
  GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH* = 0x82FC.GLenum
  GL_SHADER_BINARY_FORMAT_SPIR_V* = 0x9551.GLenum
  GL_SPIR_V_BINARY* = 0x9552.GLenum
  GL_PARAMETER_BUFFER* = 0x80EE.GLenum
  GL_PARAMETER_BUFFER_BINDING* = 0x80EF.GLenum
  GL_CONTEXT_FLAG_NO_ERROR_BIT* = 0x00000008.GLbitfield
  GL_VERTICES_SUBMITTED* = 0x82EE.GLenum
  GL_PRIMITIVES_SUBMITTED* = 0x82EF.GLenum
  GL_VERTEX_SHADER_INVOCATIONS* = 0x82F0.GLenum
  GL_TESS_CONTROL_SHADER_PATCHES* = 0x82F1.GLenum
  GL_TESS_EVALUATION_SHADER_INVOCATIONS* = 0x82F2.GLenum
  GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED* = 0x82F3.GLenum
  GL_FRAGMENT_SHADER_INVOCATIONS* = 0x82F4.GLenum
  GL_COMPUTE_SHADER_INVOCATIONS* = 0x82F5.GLenum
  GL_CLIPPING_INPUT_PRIMITIVES* = 0x82F6.GLenum
  GL_CLIPPING_OUTPUT_PRIMITIVES* = 0x82F7.GLenum
  GL_POLYGON_OFFSET_CLAMP* = 0x8E1B.GLenum
  GL_SPIR_V_EXTENSIONS* = 0x9553.GLenum
  GL_NUM_SPIR_V_EXTENSIONS* = 0x9554.GLenum
  GL_TEXTURE_MAX_ANISOTROPY* = 0x84FE.GLenum
  GL_MAX_TEXTURE_MAX_ANISOTROPY* = 0x84FF.GLenum
  GL_TRANSFORM_FEEDBACK_OVERFLOW* = 0x82EC.GLenum
  GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW* = 0x82ED.GLenum


# Functions
var
  GLAD_GL_VERSION_1_0*: bool
  GLAD_GL_VERSION_1_1*: bool
  GLAD_GL_VERSION_1_2*: bool
  GLAD_GL_VERSION_1_3*: bool
  GLAD_GL_VERSION_1_4*: bool
  GLAD_GL_VERSION_1_5*: bool
  GLAD_GL_VERSION_2_0*: bool
  GLAD_GL_VERSION_2_1*: bool
  GLAD_GL_VERSION_3_0*: bool
  GLAD_GL_VERSION_3_1*: bool
  GLAD_GL_VERSION_3_2*: bool
  GLAD_GL_VERSION_3_3*: bool
  GLAD_GL_VERSION_4_0*: bool
  GLAD_GL_VERSION_4_1*: bool
  GLAD_GL_VERSION_4_2*: bool
  GLAD_GL_VERSION_4_3*: bool
  GLAD_GL_VERSION_4_4*: bool
  GLAD_GL_VERSION_4_5*: bool
  GLAD_GL_VERSION_4_6*: bool

  glCullFace*: proc (mode: GLenum) {.stdcall.}
  glFrontFace*: proc (mode: GLenum) {.stdcall.}
  glHint*: proc (target: GLenum, mode: GLenum) {.stdcall.}
  glLineWidth*: proc (width: GLfloat) {.stdcall.}
  glPointSize*: proc (size: GLfloat) {.stdcall.}
  glPolygonMode*: proc (face: GLenum, mode: GLenum) {.stdcall.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glDrawBuffer*: proc (buf: GLenum) {.stdcall.}
  glClear*: proc (mask: GLbitfield) {.stdcall.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}
  glClearStencil*: proc (s: GLint) {.stdcall.}
  glClearDepth*: proc (depth: GLdouble) {.stdcall.}
  glStencilMask*: proc (mask: GLuint) {.stdcall.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}
  glDepthMask*: proc (flag: GLboolean) {.stdcall.}
  glDisable*: proc (cap: GLenum) {.stdcall.}
  glEnable*: proc (cap: GLenum) {.stdcall.}
  glFinish*: proc () {.stdcall.}
  glFlush*: proc () {.stdcall.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.stdcall.}
  glLogicOp*: proc (opcode: GLenum) {.stdcall.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.stdcall.}
  glDepthFunc*: proc (`func`: GLenum) {.stdcall.}
  glPixelStoref*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glReadBuffer*: proc (src: GLenum) {.stdcall.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.stdcall.}
  glGetDoublev*: proc (pname: GLenum, data: ptr GLdouble) {.stdcall.}
  glGetError*: proc (): GLenum {.stdcall.}
  glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat) {.stdcall.}
  glGetIntegerv*: proc (pname: GLenum, data: ptr GLint) {.stdcall.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.stdcall.}
  glGetTexImage*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTexLevelParameterfv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTexLevelParameteriv*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.stdcall.}
  glDepthRange*: proc (n: GLdouble, f: GLdouble) {.stdcall.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.stdcall.}
  glCopyTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}
  glCopyTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.stdcall.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.stdcall.}
  glDrawRangeElements*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}
  glTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCopyTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glActiveTexture*: proc (texture: GLenum) {.stdcall.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.stdcall.}
  glCompressedTexImage3D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexImage1D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage3D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage1D*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glGetCompressedTexImage*: proc (target: GLenum, level: GLint, img: pointer) {.stdcall.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}
  glMultiDrawArrays*: proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.stdcall.}
  glMultiDrawElements*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.stdcall.}
  glPointParameterf*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPointParameterfv*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glPointParameteri*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glPointParameteriv*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}
  glBlendEquation*: proc (mode: GLenum) {.stdcall.}
  glGenQueries*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glDeleteQueries*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsQuery*: proc (id: GLuint): GLboolean {.stdcall.}
  glBeginQuery*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glEndQuery*: proc (target: GLenum) {.stdcall.}
  glGetQueryiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetQueryObjectiv*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetQueryObjectuiv*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.stdcall.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glGetBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glMapBuffer*: proc (target: GLenum, access: GLenum): pointer {.stdcall.}
  glUnmapBuffer*: proc (target: GLenum): GLboolean {.stdcall.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetBufferPointerv*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glDrawBuffers*: proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.stdcall.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.stdcall.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.stdcall.}
  glCompileShader*: proc (shader: GLuint) {.stdcall.}
  glCreateProgram*: proc (): GLuint {.stdcall.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.stdcall.}
  glDeleteProgram*: proc (program: GLuint) {.stdcall.}
  glDeleteShader*: proc (shader: GLuint) {.stdcall.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.stdcall.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.stdcall.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.stdcall.}
  glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.stdcall.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.stdcall.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.stdcall.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.stdcall.}
  glGetVertexAttribdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}
  glIsProgram*: proc (program: GLuint): GLboolean {.stdcall.}
  glIsShader*: proc (shader: GLuint): GLboolean {.stdcall.}
  glLinkProgram*: proc (program: GLuint) {.stdcall.}
  glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.stdcall.}
  glUseProgram*: proc (program: GLuint) {.stdcall.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.stdcall.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.stdcall.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}
  glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glValidateProgram*: proc (program: GLuint) {.stdcall.}
  glVertexAttrib1d*: proc (index: GLuint, x: GLdouble) {.stdcall.}
  glVertexAttrib1dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.stdcall.}
  glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib1s*: proc (index: GLuint, x: GLshort) {.stdcall.}
  glVertexAttrib1sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexAttrib2dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}
  glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib2s*: proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}
  glVertexAttrib2sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexAttrib3dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib3s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}
  glVertexAttrib3sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4Nbv*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttrib4Niv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttrib4Nsv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4Nub*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}
  glVertexAttrib4Nubv*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttrib4Nuiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttrib4Nusv*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glVertexAttrib4bv*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttrib4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexAttrib4dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib4iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttrib4s*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}
  glVertexAttrib4sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4ubv*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttrib4uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttrib4usv*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}
  glUniformMatrix2x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix2x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4x2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3x4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4x3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glColorMaski*: proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.stdcall.}
  glGetBooleani_v*: proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.stdcall.}
  glGetIntegeri_v*: proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}
  glEnablei*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glDisablei*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glIsEnabledi*: proc (target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glBeginTransformFeedback*: proc (primitiveMode: GLenum) {.stdcall.}
  glEndTransformFeedback*: proc () {.stdcall.}
  glBindBufferRange*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glBindBufferBase*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}
  glTransformFeedbackVaryings*: proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}
  glGetTransformFeedbackVarying*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glClampColor*: proc (target: GLenum, clamp: GLenum) {.stdcall.}
  glBeginConditionalRender*: proc (id: GLuint, mode: GLenum) {.stdcall.}
  glEndConditionalRender*: proc () {.stdcall.}
  glVertexAttribIPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGetVertexAttribIiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribIuiv*: proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glVertexAttribI1i*: proc (index: GLuint, x: GLint) {.stdcall.}
  glVertexAttribI2i*: proc (index: GLuint, x: GLint, y: GLint) {.stdcall.}
  glVertexAttribI3i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.stdcall.}
  glVertexAttribI4i*: proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glVertexAttribI1ui*: proc (index: GLuint, x: GLuint) {.stdcall.}
  glVertexAttribI2ui*: proc (index: GLuint, x: GLuint, y: GLuint) {.stdcall.}
  glVertexAttribI3ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.stdcall.}
  glVertexAttribI4ui*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}
  glVertexAttribI1iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI2iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI3iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI4iv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI1uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI2uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI3uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI4uiv*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI4bv*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttribI4sv*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttribI4ubv*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttribI4usv*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glGetUniformuiv*: proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}
  glBindFragDataLocation*: proc (program: GLuint, color: GLuint, name: cstring) {.stdcall.}
  glGetFragDataLocation*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glUniform1ui*: proc (location: GLint, v0: GLuint) {.stdcall.}
  glUniform2ui*: proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}
  glUniform3ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}
  glUniform4ui*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}
  glUniform1uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform2uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform3uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform4uiv*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetTexParameterIiv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTexParameterIuiv*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glClearBufferiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}
  glClearBufferuiv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}
  glClearBufferfv*: proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}
  glClearBufferfi*: proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}
  glGetStringi*: proc (name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}
  glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean {.stdcall.}
  glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}
  glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean {.stdcall.}
  glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint) {.stdcall.}
  glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glCheckFramebufferStatus*: proc (target: GLenum): GLenum {.stdcall.}
  glFramebufferTexture1D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTexture3D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}
  glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}
  glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGenerateMipmap*: proc (target: GLenum) {.stdcall.}
  glBlitFramebuffer*: proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}
  glRenderbufferStorageMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glFramebufferTextureLayer*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}
  glMapBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glFlushMappedBufferRange*: proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.stdcall.}
  glBindVertexArray*: proc (array: GLuint) {.stdcall.}
  glDeleteVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glGenVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glIsVertexArray*: proc (array: GLuint): GLboolean {.stdcall.}
  glDrawArraysInstanced*: proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.stdcall.}
  glDrawElementsInstanced*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.stdcall.}
  glTexBuffer*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}
  glPrimitiveRestartIndex*: proc (index: GLuint) {.stdcall.}
  glCopyBufferSubData*: proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glGetUniformIndices*: proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.stdcall.}
  glGetActiveUniformsiv*: proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetActiveUniformName*: proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.stdcall.}
  glGetUniformBlockIndex*: proc (program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}
  glGetActiveUniformBlockiv*: proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetActiveUniformBlockName*: proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.stdcall.}
  glUniformBlockBinding*: proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.stdcall.}
  glDrawElementsBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}
  glDrawRangeElementsBaseVertex*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}
  glDrawElementsInstancedBaseVertex*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.stdcall.}
  glMultiDrawElementsBaseVertex*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.stdcall.}
  glProvokingVertex*: proc (mode: GLenum) {.stdcall.}
  glFenceSync*: proc (condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}
  glIsSync*: proc (sync: GLsync): GLboolean {.stdcall.}
  glDeleteSync*: proc (sync: GLsync) {.stdcall.}
  glClientWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}
  glWaitSync*: proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.stdcall.}
  glGetInteger64v*: proc (pname: GLenum, data: ptr GLint64) {.stdcall.}
  glGetSynciv*: proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}
  glGetInteger64i_v*: proc (target: GLenum, index: GLuint, data: ptr GLint64) {.stdcall.}
  glGetBufferParameteri64v*: proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glFramebufferTexture*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glTexImage2DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glTexImage3DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glGetMultisamplefv*: proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}
  glSampleMaski*: proc (maskNumber: GLuint, mask: GLbitfield) {.stdcall.}
  glBindFragDataLocationIndexed*: proc (program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring) {.stdcall.}
  glGetFragDataIndex*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGenSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glDeleteSamplers*: proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glIsSampler*: proc (sampler: GLuint): GLboolean {.stdcall.}
  glBindSampler*: proc (unit: GLuint, sampler: GLuint) {.stdcall.}
  glSamplerParameteri*: proc (sampler: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glSamplerParameterf*: proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}
  glSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}
  glSamplerParameterIiv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glSamplerParameterIuiv*: proc (sampler: GLuint, pname: GLenum, param: ptr GLuint) {.stdcall.}
  glGetSamplerParameteriv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSamplerParameterIiv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSamplerParameterfv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetSamplerParameterIuiv*: proc (sampler: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glQueryCounter*: proc (id: GLuint, target: GLenum) {.stdcall.}
  glGetQueryObjecti64v*: proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glGetQueryObjectui64v*: proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}
  glVertexAttribDivisor*: proc (index: GLuint, divisor: GLuint) {.stdcall.}
  glVertexAttribP1ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP1uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexAttribP2ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP2uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexAttribP3ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP3uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexAttribP4ui*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}
  glVertexAttribP4uiv*: proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}
  glVertexP2ui*: proc (`type`: GLenum, value: GLuint) {.stdcall.}
  glVertexP2uiv*: proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}
  glVertexP3ui*: proc (`type`: GLenum, value: GLuint) {.stdcall.}
  glVertexP3uiv*: proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}
  glVertexP4ui*: proc (`type`: GLenum, value: GLuint) {.stdcall.}
  glVertexP4uiv*: proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}
  glTexCoordP1ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP1uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glTexCoordP2ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP2uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glTexCoordP3ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP3uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glTexCoordP4ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glTexCoordP4uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP1ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP1uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP2ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP2uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP3ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP3uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glMultiTexCoordP4ui*: proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}
  glMultiTexCoordP4uiv*: proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glNormalP3ui*: proc (`type`: GLenum, coords: GLuint) {.stdcall.}
  glNormalP3uiv*: proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}
  glColorP3ui*: proc (`type`: GLenum, color: GLuint) {.stdcall.}
  glColorP3uiv*: proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}
  glColorP4ui*: proc (`type`: GLenum, color: GLuint) {.stdcall.}
  glColorP4uiv*: proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}
  glSecondaryColorP3ui*: proc (`type`: GLenum, color: GLuint) {.stdcall.}
  glSecondaryColorP3uiv*: proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}
  glMinSampleShading*: proc (value: GLfloat) {.stdcall.}
  glBlendEquationi*: proc (buf: GLuint, mode: GLenum) {.stdcall.}
  glBlendEquationSeparatei*: proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glBlendFunci*: proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}
  glBlendFuncSeparatei*: proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}
  glDrawArraysIndirect*: proc (mode: GLenum, indirect: pointer) {.stdcall.}
  glDrawElementsIndirect*: proc (mode: GLenum, `type`: GLenum, indirect: pointer) {.stdcall.}
  glUniform1d*: proc (location: GLint, x: GLdouble) {.stdcall.}
  glUniform2d*: proc (location: GLint, x: GLdouble, y: GLdouble) {.stdcall.}
  glUniform3d*: proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glUniform4d*: proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glUniform1dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniform2dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniform3dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniform4dv*: proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix2x3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix2x4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix3x2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix3x4dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix4x2dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glUniformMatrix4x3dv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glGetUniformdv*: proc (program: GLuint, location: GLint, params: ptr GLdouble) {.stdcall.}
  glGetSubroutineUniformLocation*: proc (program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}
  glGetSubroutineIndex*: proc (program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}
  glGetActiveSubroutineUniformiv*: proc (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint) {.stdcall.}
  glGetActiveSubroutineUniformName*: proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}
  glGetActiveSubroutineName*: proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}
  glUniformSubroutinesuiv*: proc (shadertype: GLenum, count: GLsizei, indices: ptr GLuint) {.stdcall.}
  glGetUniformSubroutineuiv*: proc (shadertype: GLenum, location: GLint, params: ptr GLuint) {.stdcall.}
  glGetProgramStageiv*: proc (program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint) {.stdcall.}
  glPatchParameteri*: proc (pname: GLenum, value: GLint) {.stdcall.}
  glPatchParameterfv*: proc (pname: GLenum, values: ptr GLfloat) {.stdcall.}
  glBindTransformFeedback*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glDeleteTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glGenTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsTransformFeedback*: proc (id: GLuint): GLboolean {.stdcall.}
  glPauseTransformFeedback*: proc () {.stdcall.}
  glResumeTransformFeedback*: proc () {.stdcall.}
  glDrawTransformFeedback*: proc (mode: GLenum, id: GLuint) {.stdcall.}
  glDrawTransformFeedbackStream*: proc (mode: GLenum, id: GLuint, stream: GLuint) {.stdcall.}
  glBeginQueryIndexed*: proc (target: GLenum, index: GLuint, id: GLuint) {.stdcall.}
  glEndQueryIndexed*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glGetQueryIndexediv*: proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glReleaseShaderCompiler*: proc () {.stdcall.}
  glShaderBinary*: proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}
  glGetShaderPrecisionFormat*: proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.stdcall.}
  glDepthRangef*: proc (n: GLfloat, f: GLfloat) {.stdcall.}
  glClearDepthf*: proc (d: GLfloat) {.stdcall.}
  glGetProgramBinary*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.stdcall.}
  glProgramBinary*: proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}
  glProgramParameteri*: proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}
  glUseProgramStages*: proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.stdcall.}
  glActiveShaderProgram*: proc (pipeline: GLuint, program: GLuint) {.stdcall.}
  glCreateShaderProgramv*: proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.stdcall.}
  glBindProgramPipeline*: proc (pipeline: GLuint) {.stdcall.}
  glDeleteProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}
  glGenProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}
  glIsProgramPipeline*: proc (pipeline: GLuint): GLboolean {.stdcall.}
  glGetProgramPipelineiv*: proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glProgramUniform1i*: proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}
  glProgramUniform1iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform1f*: proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}
  glProgramUniform1fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform1d*: proc (program: GLuint, location: GLint, v0: GLdouble) {.stdcall.}
  glProgramUniform1dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform1ui*: proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}
  glProgramUniform1uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform2i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}
  glProgramUniform2iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform2f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}
  glProgramUniform2fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform2d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) {.stdcall.}
  glProgramUniform2dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform2ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}
  glProgramUniform2uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform3i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}
  glProgramUniform3iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform3f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}
  glProgramUniform3fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform3d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) {.stdcall.}
  glProgramUniform3dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform3ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}
  glProgramUniform3uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform4i*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}
  glProgramUniform4iv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform4f*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}
  glProgramUniform4fv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform4d*: proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) {.stdcall.}
  glProgramUniform4dv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform4ui*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}
  glProgramUniform4uiv*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniformMatrix2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix2x3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3x2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2x4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4x2fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3x4fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4x3fv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2x3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3x2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix2x4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4x2dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3x4dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4x3dv*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glValidateProgramPipeline*: proc (pipeline: GLuint) {.stdcall.}
  glGetProgramPipelineInfoLog*: proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glVertexAttribL1d*: proc (index: GLuint, x: GLdouble) {.stdcall.}
  glVertexAttribL2d*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexAttribL3d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexAttribL4d*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexAttribL1dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL2dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL3dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL4dv*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribLPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGetVertexAttribLdv*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glViewportArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glViewportIndexedf*: proc (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) {.stdcall.}
  glViewportIndexedfv*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glScissorArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}
  glScissorIndexed*: proc (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glScissorIndexedv*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glDepthRangeArrayv*: proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glDepthRangeIndexed*: proc (index: GLuint, n: GLdouble, f: GLdouble) {.stdcall.}
  glGetFloati_v*: proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.stdcall.}
  glGetDoublei_v*: proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.stdcall.}
  glDrawArraysInstancedBaseInstance*: proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) {.stdcall.}
  glDrawElementsInstancedBaseInstance*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint) {.stdcall.}
  glDrawElementsInstancedBaseVertexBaseInstance*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) {.stdcall.}
  glGetInternalformativ*: proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint) {.stdcall.}
  glGetActiveAtomicCounterBufferiv*: proc (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glBindImageTexture*: proc (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) {.stdcall.}
  glMemoryBarrier*: proc (barriers: GLbitfield) {.stdcall.}
  glTexStorage1D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}
  glTexStorage2D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexStorage3D*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glDrawTransformFeedbackInstanced*: proc (mode: GLenum, id: GLuint, instancecount: GLsizei) {.stdcall.}
  glDrawTransformFeedbackStreamInstanced*: proc (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) {.stdcall.}
  glClearBufferData*: proc (target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glClearBufferSubData*: proc (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glDispatchCompute*: proc (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) {.stdcall.}
  glDispatchComputeIndirect*: proc (indirect: GLintptr) {.stdcall.}
  glCopyImageSubData*: proc (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) {.stdcall.}
  glFramebufferParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glGetFramebufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetInternalformati64v*: proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64) {.stdcall.}
  glInvalidateTexSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glInvalidateTexImage*: proc (texture: GLuint, level: GLint) {.stdcall.}
  glInvalidateBufferSubData*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}
  glInvalidateBufferData*: proc (buffer: GLuint) {.stdcall.}
  glInvalidateFramebuffer*: proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}
  glInvalidateSubFramebuffer*: proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glMultiDrawArraysIndirect*: proc (mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glMultiDrawElementsIndirect*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glGetProgramInterfaceiv*: proc (program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetProgramResourceIndex*: proc (program: GLuint, programInterface: GLenum, name: cstring): GLuint {.stdcall.}
  glGetProgramResourceName*: proc (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}
  glGetProgramResourceiv*: proc (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint) {.stdcall.}
  glGetProgramResourceLocation*: proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}
  glGetProgramResourceLocationIndex*: proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}
  glShaderStorageBlockBinding*: proc (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) {.stdcall.}
  glTexBufferRange*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glTexStorage2DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glTexStorage3DMultisample*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glTextureView*: proc (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) {.stdcall.}
  glBindVertexBuffer*: proc (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}
  glVertexAttribFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}
  glVertexAttribIFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}
  glVertexAttribLFormat*: proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}
  glVertexAttribBinding*: proc (attribindex: GLuint, bindingindex: GLuint) {.stdcall.}
  glVertexBindingDivisor*: proc (bindingindex: GLuint, divisor: GLuint) {.stdcall.}
  glDebugMessageControl*: proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}
  glDebugMessageInsert*: proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.stdcall.}
  glDebugMessageCallback*: proc (callback: GLDEBUGPROC, userParam: pointer) {.stdcall.}
  glGetDebugMessageLog*: proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}
  glPushDebugGroup*: proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.stdcall.}
  glPopDebugGroup*: proc () {.stdcall.}
  glObjectLabel*: proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.stdcall.}
  glGetObjectLabel*: proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}
  glObjectPtrLabel*: proc (`ptr`: pointer, length: GLsizei, label: cstring) {.stdcall.}
  glGetObjectPtrLabel*: proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}
  glGetPointerv*: proc (pname: GLenum, params: ptr pointer) {.stdcall.}
  glBufferStorage*: proc (target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}
  glClearTexImage*: proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glClearTexSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glBindBuffersBase*: proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glBindBuffersRange*: proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr) {.stdcall.}
  glBindTextures*: proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.stdcall.}
  glBindSamplers*: proc (first: GLuint, count: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glBindImageTextures*: proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.stdcall.}
  glBindVertexBuffers*: proc (first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.stdcall.}
  glClipControl*: proc (origin: GLenum, depth: GLenum) {.stdcall.}
  glCreateTransformFeedbacks*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glTransformFeedbackBufferBase*: proc (xfb: GLuint, index: GLuint, buffer: GLuint) {.stdcall.}
  glTransformFeedbackBufferRange*: proc (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glGetTransformFeedbackiv*: proc (xfb: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glGetTransformFeedbacki_v2*: proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint) {.stdcall.}
  glGetTransformFeedbacki64_v*: proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64) {.stdcall.}
  glCreateBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glNamedBufferStorage*: proc (buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}
  glNamedBufferData*: proc (buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}
  glNamedBufferSubData*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glCopyNamedBufferSubData*: proc (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glClearNamedBufferData*: proc (buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glClearNamedBufferSubData*: proc (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glMapNamedBuffer*: proc (buffer: GLuint, access: GLenum): pointer {.stdcall.}
  glMapNamedBufferRange*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glUnmapNamedBuffer*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glFlushMappedNamedBufferRange*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}
  glGetNamedBufferParameteriv*: proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetNamedBufferParameteri64v*: proc (buffer: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glGetNamedBufferPointerv*: proc (buffer: GLuint, pname: GLenum, params: ptr pointer) {.stdcall.}
  glGetNamedBufferSubData*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glCreateFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glNamedFramebufferRenderbuffer*: proc (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}
  glNamedFramebufferParameteri*: proc (framebuffer: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glNamedFramebufferTexture*: proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glNamedFramebufferTextureLayer*: proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}
  glNamedFramebufferDrawBuffer*: proc (framebuffer: GLuint, buf: GLenum) {.stdcall.}
  glNamedFramebufferDrawBuffers*: proc (framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum) {.stdcall.}
  glNamedFramebufferReadBuffer*: proc (framebuffer: GLuint, src: GLenum) {.stdcall.}
  glInvalidateNamedFramebufferData*: proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}
  glInvalidateNamedFramebufferSubData*: proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glClearNamedFramebufferiv*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}
  glClearNamedFramebufferuiv*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}
  glClearNamedFramebufferfv*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}
  glClearNamedFramebufferfi*: proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}
  glBlitNamedFramebuffer*: proc (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}
  glCheckNamedFramebufferStatus*: proc (framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}
  glGetNamedFramebufferParameteriv*: proc (framebuffer: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glGetNamedFramebufferAttachmentParameteriv*: proc (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCreateRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glNamedRenderbufferStorage*: proc (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glNamedRenderbufferStorageMultisample*: proc (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetNamedRenderbufferParameteriv*: proc (renderbuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCreateTextures*: proc (target: GLenum, n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glTextureBuffer*: proc (texture: GLuint, internalformat: GLenum, buffer: GLuint) {.stdcall.}
  glTextureBufferRange*: proc (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glTextureStorage1D*: proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}
  glTextureStorage2D*: proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glTextureStorage3D*: proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glTextureStorage2DMultisample*: proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glTextureStorage3DMultisample*: proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glTextureSubImage1D*: proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTextureSubImage2D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTextureSubImage3D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCompressedTextureSubImage1D*: proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTextureSubImage2D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTextureSubImage3D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCopyTextureSubImage1D*: proc (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyTextureSubImage2D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glCopyTextureSubImage3D*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glTextureParameterf*: proc (texture: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}
  glTextureParameterfv*: proc (texture: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}
  glTextureParameteri*: proc (texture: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glTextureParameterIiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTextureParameterIuiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glTextureParameteriv*: proc (texture: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glGenerateTextureMipmap*: proc (texture: GLuint) {.stdcall.}
  glBindTextureUnit*: proc (unit: GLuint, texture: GLuint) {.stdcall.}
  glGetTextureImage*: proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}
  glGetCompressedTextureImage*: proc (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer) {.stdcall.}
  glGetTextureLevelParameterfv*: proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTextureLevelParameteriv*: proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTextureParameterfv*: proc (texture: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTextureParameterIiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTextureParameterIuiv*: proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetTextureParameteriv*: proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCreateVertexArrays*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glDisableVertexArrayAttrib*: proc (vaobj: GLuint, index: GLuint) {.stdcall.}
  glEnableVertexArrayAttrib*: proc (vaobj: GLuint, index: GLuint) {.stdcall.}
  glVertexArrayElementBuffer*: proc (vaobj: GLuint, buffer: GLuint) {.stdcall.}
  glVertexArrayVertexBuffer*: proc (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}
  glVertexArrayVertexBuffers*: proc (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.stdcall.}
  glVertexArrayAttribBinding*: proc (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) {.stdcall.}
  glVertexArrayAttribFormat*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}
  glVertexArrayAttribIFormat*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}
  glVertexArrayAttribLFormat*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}
  glVertexArrayBindingDivisor*: proc (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) {.stdcall.}
  glGetVertexArrayiv*: proc (vaobj: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glGetVertexArrayIndexediv*: proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glGetVertexArrayIndexed64iv*: proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64) {.stdcall.}
  glCreateSamplers*: proc (n: GLsizei, samplers: ptr GLuint) {.stdcall.}
  glCreateProgramPipelines*: proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}
  glCreateQueries*: proc (target: GLenum, n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glGetQueryBufferObjecti64v*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}
  glGetQueryBufferObjectiv*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}
  glGetQueryBufferObjectui64v*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}
  glGetQueryBufferObjectuiv*: proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}
  glMemoryBarrierByRegion*: proc (barriers: GLbitfield) {.stdcall.}
  glGetTextureSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}
  glGetCompressedTextureSubImage*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer) {.stdcall.}
  glGetGraphicsResetStatus*: proc (): GLenum {.stdcall.}
  glGetnCompressedTexImage*: proc (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: pointer) {.stdcall.}
  glGetnTexImage*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}
  glGetnUniformdv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble) {.stdcall.}
  glGetnUniformfv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.stdcall.}
  glGetnUniformiv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.stdcall.}
  glGetnUniformuiv*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.stdcall.}
  glReadnPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.stdcall.}
  glGetnMapdv*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble) {.stdcall.}
  glGetnMapfv*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat) {.stdcall.}
  glGetnMapiv*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint) {.stdcall.}
  glGetnPixelMapfv*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLfloat) {.stdcall.}
  glGetnPixelMapuiv*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLuint) {.stdcall.}
  glGetnPixelMapusv*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLushort) {.stdcall.}
  glGetnPolygonStipple*: proc (bufSize: GLsizei, pattern: ptr GLubyte) {.stdcall.}
  glGetnColorTable*: proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer) {.stdcall.}
  glGetnConvolutionFilter*: proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer) {.stdcall.}
  glGetnSeparableFilter*: proc (target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer) {.stdcall.}
  glGetnHistogram*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}
  glGetnMinmax*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}
  glTextureBarrier*: proc () {.stdcall.}
  glSpecializeShader*: proc (shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint) {.stdcall.}
  glMultiDrawArraysIndirectCount*: proc (mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glMultiDrawElementsIndirectCount*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glPolygonOffsetClamp*: proc (factor: GLfloat, units: GLfloat, clamp: GLfloat) {.stdcall.}


# Extensions
var
  GLAD_GL_3DFX_multisample*: bool
  GL_MULTISAMPLE_3DFX* = 0x86B2.GLenum
  GL_SAMPLE_BUFFERS_3DFX* = 0x86B3.GLenum
  GL_SAMPLES_3DFX* = 0x86B4.GLenum
  GL_MULTISAMPLE_BIT_3DFX* = 0x20000000.GLbitfield

  GLAD_GL_3DFX_tbuffer*: bool

  GLAD_GL_3DFX_texture_compression_FXT1*: bool
  GL_COMPRESSED_RGB_FXT1_3DFX* = 0x86B0.GLenum
  GL_COMPRESSED_RGBA_FXT1_3DFX* = 0x86B1.GLenum

  GLAD_GL_AMD_blend_minmax_factor*: bool
  GL_FACTOR_MIN_AMD* = 0x901C.GLenum
  GL_FACTOR_MAX_AMD* = 0x901D.GLenum

  GLAD_GL_AMD_conservative_depth*: bool

  GLAD_GL_AMD_debug_output*: bool
  GL_MAX_DEBUG_MESSAGE_LENGTH_AMD* = 0x9143.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES_AMD* = 0x9144.GLenum
  GL_DEBUG_LOGGED_MESSAGES_AMD* = 0x9145.GLenum
  GL_DEBUG_SEVERITY_HIGH_AMD* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_MEDIUM_AMD* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_LOW_AMD* = 0x9148.GLenum
  GL_DEBUG_CATEGORY_API_ERROR_AMD* = 0x9149.GLenum
  GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD* = 0x914A.GLenum
  GL_DEBUG_CATEGORY_DEPRECATION_AMD* = 0x914B.GLenum
  GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD* = 0x914C.GLenum
  GL_DEBUG_CATEGORY_PERFORMANCE_AMD* = 0x914D.GLenum
  GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD* = 0x914E.GLenum
  GL_DEBUG_CATEGORY_APPLICATION_AMD* = 0x914F.GLenum
  GL_DEBUG_CATEGORY_OTHER_AMD* = 0x9150.GLenum

  GLAD_GL_AMD_depth_clamp_separate*: bool
  GL_DEPTH_CLAMP_NEAR_AMD* = 0x901E.GLenum
  GL_DEPTH_CLAMP_FAR_AMD* = 0x901F.GLenum

  GLAD_GL_AMD_draw_buffers_blend*: bool

  GLAD_GL_AMD_framebuffer_multisample_advanced*: bool
  GL_RENDERBUFFER_STORAGE_SAMPLES_AMD* = 0x91B2.GLenum
  GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD* = 0x91B3.GLenum
  GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD* = 0x91B4.GLenum
  GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD* = 0x91B5.GLenum
  GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD* = 0x91B6.GLenum
  GL_SUPPORTED_MULTISAMPLE_MODES_AMD* = 0x91B7.GLenum

  GLAD_GL_AMD_framebuffer_sample_positions*: bool
  GL_SUBSAMPLE_DISTANCE_AMD* = 0x883F.GLenum
  GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD* = 0x91AE.GLenum
  GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD* = 0x91AF.GLenum

  GLAD_GL_AMD_gcn_shader*: bool

  GLAD_GL_AMD_gpu_shader_half_float*: bool
  GL_FLOAT16_NV* = 0x8FF8.GLenum
  GL_FLOAT16_VEC2_NV* = 0x8FF9.GLenum
  GL_FLOAT16_VEC3_NV* = 0x8FFA.GLenum
  GL_FLOAT16_VEC4_NV* = 0x8FFB.GLenum
  GL_FLOAT16_MAT2_AMD* = 0x91C5.GLenum
  GL_FLOAT16_MAT3_AMD* = 0x91C6.GLenum
  GL_FLOAT16_MAT4_AMD* = 0x91C7.GLenum
  GL_FLOAT16_MAT2x3_AMD* = 0x91C8.GLenum
  GL_FLOAT16_MAT2x4_AMD* = 0x91C9.GLenum
  GL_FLOAT16_MAT3x2_AMD* = 0x91CA.GLenum
  GL_FLOAT16_MAT3x4_AMD* = 0x91CB.GLenum
  GL_FLOAT16_MAT4x2_AMD* = 0x91CC.GLenum
  GL_FLOAT16_MAT4x3_AMD* = 0x91CD.GLenum

  GLAD_GL_AMD_gpu_shader_int16*: bool

  GLAD_GL_AMD_gpu_shader_int64*: bool
  GL_INT64_NV* = 0x140E.GLenum
  GL_UNSIGNED_INT64_NV* = 0x140F.GLenum
  GL_INT8_NV* = 0x8FE0.GLenum
  GL_INT8_VEC2_NV* = 0x8FE1.GLenum
  GL_INT8_VEC3_NV* = 0x8FE2.GLenum
  GL_INT8_VEC4_NV* = 0x8FE3.GLenum
  GL_INT16_NV* = 0x8FE4.GLenum
  GL_INT16_VEC2_NV* = 0x8FE5.GLenum
  GL_INT16_VEC3_NV* = 0x8FE6.GLenum
  GL_INT16_VEC4_NV* = 0x8FE7.GLenum
  GL_INT64_VEC2_NV* = 0x8FE9.GLenum
  GL_INT64_VEC3_NV* = 0x8FEA.GLenum
  GL_INT64_VEC4_NV* = 0x8FEB.GLenum
  GL_UNSIGNED_INT8_NV* = 0x8FEC.GLenum
  GL_UNSIGNED_INT8_VEC2_NV* = 0x8FED.GLenum
  GL_UNSIGNED_INT8_VEC3_NV* = 0x8FEE.GLenum
  GL_UNSIGNED_INT8_VEC4_NV* = 0x8FEF.GLenum
  GL_UNSIGNED_INT16_NV* = 0x8FF0.GLenum
  GL_UNSIGNED_INT16_VEC2_NV* = 0x8FF1.GLenum
  GL_UNSIGNED_INT16_VEC3_NV* = 0x8FF2.GLenum
  GL_UNSIGNED_INT16_VEC4_NV* = 0x8FF3.GLenum
  GL_UNSIGNED_INT64_VEC2_NV* = 0x8FF5.GLenum
  GL_UNSIGNED_INT64_VEC3_NV* = 0x8FF6.GLenum
  GL_UNSIGNED_INT64_VEC4_NV* = 0x8FF7.GLenum

  GLAD_GL_AMD_interleaved_elements*: bool
  GL_VERTEX_ELEMENT_SWIZZLE_AMD* = 0x91A4.GLenum
  GL_VERTEX_ID_SWIZZLE_AMD* = 0x91A5.GLenum

  GLAD_GL_AMD_multi_draw_indirect*: bool

  GLAD_GL_AMD_name_gen_delete*: bool
  GL_DATA_BUFFER_AMD* = 0x9151.GLenum
  GL_PERFORMANCE_MONITOR_AMD* = 0x9152.GLenum
  GL_QUERY_OBJECT_AMD* = 0x9153.GLenum
  GL_VERTEX_ARRAY_OBJECT_AMD* = 0x9154.GLenum
  GL_SAMPLER_OBJECT_AMD* = 0x9155.GLenum

  GLAD_GL_AMD_occlusion_query_event*: bool
  GL_OCCLUSION_QUERY_EVENT_MASK_AMD* = 0x874F.GLenum
  GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD* = 0x00000001.GLbitfield
  GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD* = 0x00000002.GLbitfield
  GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD* = 0x00000004.GLbitfield
  GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD* = 0x00000008.GLbitfield
  GL_QUERY_ALL_EVENT_BITS_AMD* = 0xFFFFFFFF.GLbitfield

  GLAD_GL_AMD_performance_monitor*: bool
  GL_COUNTER_TYPE_AMD* = 0x8BC0.GLenum
  GL_COUNTER_RANGE_AMD* = 0x8BC1.GLenum
  GL_UNSIGNED_INT64_AMD* = 0x8BC2.GLenum
  GL_PERCENTAGE_AMD* = 0x8BC3.GLenum
  GL_PERFMON_RESULT_AVAILABLE_AMD* = 0x8BC4.GLenum
  GL_PERFMON_RESULT_SIZE_AMD* = 0x8BC5.GLenum
  GL_PERFMON_RESULT_AMD* = 0x8BC6.GLenum

  GLAD_GL_AMD_pinned_memory*: bool
  GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD* = 0x9160.GLenum

  GLAD_GL_AMD_query_buffer_object*: bool
  GL_QUERY_BUFFER_AMD* = 0x9192.GLenum
  GL_QUERY_BUFFER_BINDING_AMD* = 0x9193.GLenum
  GL_QUERY_RESULT_NO_WAIT_AMD* = 0x9194.GLenum

  GLAD_GL_AMD_sample_positions*: bool

  GLAD_GL_AMD_seamless_cubemap_per_texture*: bool

  GLAD_GL_AMD_shader_atomic_counter_ops*: bool

  GLAD_GL_AMD_shader_ballot*: bool

  GLAD_GL_AMD_shader_explicit_vertex_parameter*: bool

  GLAD_GL_AMD_shader_gpu_shader_half_float_fetch*: bool

  GLAD_GL_AMD_shader_image_load_store_lod*: bool

  GLAD_GL_AMD_shader_stencil_export*: bool

  GLAD_GL_AMD_shader_trinary_minmax*: bool

  GLAD_GL_AMD_sparse_texture*: bool
  GL_VIRTUAL_PAGE_SIZE_X_AMD* = 0x9195.GLenum
  GL_VIRTUAL_PAGE_SIZE_Y_AMD* = 0x9196.GLenum
  GL_VIRTUAL_PAGE_SIZE_Z_AMD* = 0x9197.GLenum
  GL_MAX_SPARSE_TEXTURE_SIZE_AMD* = 0x9198.GLenum
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD* = 0x9199.GLenum
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS* = 0x919A.GLenum
  GL_MIN_SPARSE_LEVEL_AMD* = 0x919B.GLenum
  GL_MIN_LOD_WARNING_AMD* = 0x919C.GLenum
  GL_TEXTURE_STORAGE_SPARSE_BIT_AMD* = 0x00000001.GLbitfield

  GLAD_GL_AMD_stencil_operation_extended*: bool
  GL_SET_AMD* = 0x874A.GLenum
  GL_REPLACE_VALUE_AMD* = 0x874B.GLenum
  GL_STENCIL_OP_VALUE_AMD* = 0x874C.GLenum
  GL_STENCIL_BACK_OP_VALUE_AMD* = 0x874D.GLenum

  GLAD_GL_AMD_texture_gather_bias_lod*: bool

  GLAD_GL_AMD_texture_texture4*: bool

  GLAD_GL_AMD_transform_feedback3_lines_triangles*: bool

  GLAD_GL_AMD_transform_feedback4*: bool
  GL_STREAM_RASTERIZATION_AMD* = 0x91A0.GLenum

  GLAD_GL_AMD_vertex_shader_layer*: bool

  GLAD_GL_AMD_vertex_shader_tessellator*: bool
  GL_SAMPLER_BUFFER_AMD* = 0x9001.GLenum
  GL_INT_SAMPLER_BUFFER_AMD* = 0x9002.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD* = 0x9003.GLenum
  GL_TESSELLATION_MODE_AMD* = 0x9004.GLenum
  GL_TESSELLATION_FACTOR_AMD* = 0x9005.GLenum
  GL_DISCRETE_AMD* = 0x9006.GLenum
  GL_CONTINUOUS_AMD* = 0x9007.GLenum

  GLAD_GL_AMD_vertex_shader_viewport_index*: bool

  GLAD_GL_APPLE_aux_depth_stencil*: bool
  GL_AUX_DEPTH_STENCIL_APPLE* = 0x8A14.GLenum

  GLAD_GL_APPLE_client_storage*: bool
  GL_UNPACK_CLIENT_STORAGE_APPLE* = 0x85B2.GLenum

  GLAD_GL_APPLE_element_array*: bool
  GL_ELEMENT_ARRAY_APPLE* = 0x8A0C.GLenum
  GL_ELEMENT_ARRAY_TYPE_APPLE* = 0x8A0D.GLenum
  GL_ELEMENT_ARRAY_POINTER_APPLE* = 0x8A0E.GLenum

  GLAD_GL_APPLE_fence*: bool
  GL_DRAW_PIXELS_APPLE* = 0x8A0A.GLenum
  GL_FENCE_APPLE* = 0x8A0B.GLenum

  GLAD_GL_APPLE_float_pixels*: bool
  GL_HALF_APPLE* = 0x140B.GLenum
  GL_RGBA_FLOAT32_APPLE* = 0x8814.GLenum
  GL_RGB_FLOAT32_APPLE* = 0x8815.GLenum
  GL_ALPHA_FLOAT32_APPLE* = 0x8816.GLenum
  GL_INTENSITY_FLOAT32_APPLE* = 0x8817.GLenum
  GL_LUMINANCE_FLOAT32_APPLE* = 0x8818.GLenum
  GL_LUMINANCE_ALPHA_FLOAT32_APPLE* = 0x8819.GLenum
  GL_RGBA_FLOAT16_APPLE* = 0x881A.GLenum
  GL_RGB_FLOAT16_APPLE* = 0x881B.GLenum
  GL_ALPHA_FLOAT16_APPLE* = 0x881C.GLenum
  GL_INTENSITY_FLOAT16_APPLE* = 0x881D.GLenum
  GL_LUMINANCE_FLOAT16_APPLE* = 0x881E.GLenum
  GL_LUMINANCE_ALPHA_FLOAT16_APPLE* = 0x881F.GLenum
  GL_COLOR_FLOAT_APPLE* = 0x8A0F.GLenum

  GLAD_GL_APPLE_flush_buffer_range*: bool
  GL_BUFFER_SERIALIZED_MODIFY_APPLE* = 0x8A12.GLenum
  GL_BUFFER_FLUSHING_UNMAP_APPLE* = 0x8A13.GLenum

  GLAD_GL_APPLE_object_purgeable*: bool
  GL_BUFFER_OBJECT_APPLE* = 0x85B3.GLenum
  GL_RELEASED_APPLE* = 0x8A19.GLenum
  GL_VOLATILE_APPLE* = 0x8A1A.GLenum
  GL_RETAINED_APPLE* = 0x8A1B.GLenum
  GL_UNDEFINED_APPLE* = 0x8A1C.GLenum
  GL_PURGEABLE_APPLE* = 0x8A1D.GLenum

  GLAD_GL_APPLE_rgb_422*: bool
  GL_RGB_422_APPLE* = 0x8A1F.GLenum
  GL_UNSIGNED_SHORT_8_8_APPLE* = 0x85BA.GLenum
  GL_UNSIGNED_SHORT_8_8_REV_APPLE* = 0x85BB.GLenum
  GL_RGB_RAW_422_APPLE* = 0x8A51.GLenum

  GLAD_GL_APPLE_row_bytes*: bool
  GL_PACK_ROW_BYTES_APPLE* = 0x8A15.GLenum
  GL_UNPACK_ROW_BYTES_APPLE* = 0x8A16.GLenum

  GLAD_GL_APPLE_specular_vector*: bool
  GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE* = 0x85B0.GLenum

  GLAD_GL_APPLE_texture_range*: bool
  GL_TEXTURE_RANGE_LENGTH_APPLE* = 0x85B7.GLenum
  GL_TEXTURE_RANGE_POINTER_APPLE* = 0x85B8.GLenum
  GL_TEXTURE_STORAGE_HINT_APPLE* = 0x85BC.GLenum
  GL_STORAGE_PRIVATE_APPLE* = 0x85BD.GLenum
  GL_STORAGE_CACHED_APPLE* = 0x85BE.GLenum
  GL_STORAGE_SHARED_APPLE* = 0x85BF.GLenum

  GLAD_GL_APPLE_transform_hint*: bool
  GL_TRANSFORM_HINT_APPLE* = 0x85B1.GLenum

  GLAD_GL_APPLE_vertex_array_object*: bool
  GL_VERTEX_ARRAY_BINDING_APPLE* = 0x85B5.GLenum

  GLAD_GL_APPLE_vertex_array_range*: bool
  GL_VERTEX_ARRAY_RANGE_APPLE* = 0x851D.GLenum
  GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE* = 0x851E.GLenum
  GL_VERTEX_ARRAY_STORAGE_HINT_APPLE* = 0x851F.GLenum
  GL_VERTEX_ARRAY_RANGE_POINTER_APPLE* = 0x8521.GLenum
  GL_STORAGE_CLIENT_APPLE* = 0x85B4.GLenum

  GLAD_GL_APPLE_vertex_program_evaluators*: bool
  GL_VERTEX_ATTRIB_MAP1_APPLE* = 0x8A00.GLenum
  GL_VERTEX_ATTRIB_MAP2_APPLE* = 0x8A01.GLenum
  GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE* = 0x8A02.GLenum
  GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE* = 0x8A03.GLenum
  GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE* = 0x8A04.GLenum
  GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE* = 0x8A05.GLenum
  GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE* = 0x8A06.GLenum
  GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE* = 0x8A07.GLenum
  GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE* = 0x8A08.GLenum
  GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE* = 0x8A09.GLenum

  GLAD_GL_APPLE_ycbcr_422*: bool
  GL_YCBCR_422_APPLE* = 0x85B9.GLenum

  GLAD_GL_ARB_ES2_compatibility*: bool

  GLAD_GL_ARB_ES3_1_compatibility*: bool

  GLAD_GL_ARB_ES3_2_compatibility*: bool
  GL_PRIMITIVE_BOUNDING_BOX_ARB* = 0x92BE.GLenum
  GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB* = 0x9381.GLenum
  GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB* = 0x9382.GLenum

  GLAD_GL_ARB_ES3_compatibility*: bool

  GLAD_GL_ARB_arrays_of_arrays*: bool

  GLAD_GL_ARB_base_instance*: bool

  GLAD_GL_ARB_bindless_texture*: bool
  GL_UNSIGNED_INT64_ARB* = 0x140F.GLenum

  GLAD_GL_ARB_blend_func_extended*: bool

  GLAD_GL_ARB_buffer_storage*: bool

  GLAD_GL_ARB_cl_event*: bool
  GL_SYNC_CL_EVENT_ARB* = 0x8240.GLenum
  GL_SYNC_CL_EVENT_COMPLETE_ARB* = 0x8241.GLenum

  GLAD_GL_ARB_clear_buffer_object*: bool

  GLAD_GL_ARB_clear_texture*: bool

  GLAD_GL_ARB_clip_control*: bool

  GLAD_GL_ARB_color_buffer_float*: bool
  GL_RGBA_FLOAT_MODE_ARB* = 0x8820.GLenum
  GL_CLAMP_VERTEX_COLOR_ARB* = 0x891A.GLenum
  GL_CLAMP_FRAGMENT_COLOR_ARB* = 0x891B.GLenum
  GL_CLAMP_READ_COLOR_ARB* = 0x891C.GLenum
  GL_FIXED_ONLY_ARB* = 0x891D.GLenum

  GLAD_GL_ARB_compatibility*: bool

  GLAD_GL_ARB_compressed_texture_pixel_storage*: bool

  GLAD_GL_ARB_compute_shader*: bool

  GLAD_GL_ARB_compute_variable_group_size*: bool
  GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB* = 0x9344.GLenum
  GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB* = 0x90EB.GLenum
  GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB* = 0x9345.GLenum
  GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB* = 0x91BF.GLenum

  GLAD_GL_ARB_conditional_render_inverted*: bool

  GLAD_GL_ARB_conservative_depth*: bool

  GLAD_GL_ARB_copy_buffer*: bool

  GLAD_GL_ARB_copy_image*: bool

  GLAD_GL_ARB_cull_distance*: bool

  GLAD_GL_ARB_debug_output*: bool
  GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB* = 0x8242.GLenum
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB* = 0x8243.GLenum
  GL_DEBUG_CALLBACK_FUNCTION_ARB* = 0x8244.GLenum
  GL_DEBUG_CALLBACK_USER_PARAM_ARB* = 0x8245.GLenum
  GL_DEBUG_SOURCE_API_ARB* = 0x8246.GLenum
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB* = 0x8247.GLenum
  GL_DEBUG_SOURCE_SHADER_COMPILER_ARB* = 0x8248.GLenum
  GL_DEBUG_SOURCE_THIRD_PARTY_ARB* = 0x8249.GLenum
  GL_DEBUG_SOURCE_APPLICATION_ARB* = 0x824A.GLenum
  GL_DEBUG_SOURCE_OTHER_ARB* = 0x824B.GLenum
  GL_DEBUG_TYPE_ERROR_ARB* = 0x824C.GLenum
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB* = 0x824D.GLenum
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB* = 0x824E.GLenum
  GL_DEBUG_TYPE_PORTABILITY_ARB* = 0x824F.GLenum
  GL_DEBUG_TYPE_PERFORMANCE_ARB* = 0x8250.GLenum
  GL_DEBUG_TYPE_OTHER_ARB* = 0x8251.GLenum
  GL_MAX_DEBUG_MESSAGE_LENGTH_ARB* = 0x9143.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES_ARB* = 0x9144.GLenum
  GL_DEBUG_LOGGED_MESSAGES_ARB* = 0x9145.GLenum
  GL_DEBUG_SEVERITY_HIGH_ARB* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_MEDIUM_ARB* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_LOW_ARB* = 0x9148.GLenum

  GLAD_GL_ARB_depth_buffer_float*: bool

  GLAD_GL_ARB_depth_clamp*: bool

  GLAD_GL_ARB_depth_texture*: bool
  GL_DEPTH_COMPONENT16_ARB* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT24_ARB* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT32_ARB* = 0x81A7.GLenum
  GL_TEXTURE_DEPTH_SIZE_ARB* = 0x884A.GLenum
  GL_DEPTH_TEXTURE_MODE_ARB* = 0x884B.GLenum

  GLAD_GL_ARB_derivative_control*: bool

  GLAD_GL_ARB_direct_state_access*: bool

  GLAD_GL_ARB_draw_buffers*: bool
  GL_MAX_DRAW_BUFFERS_ARB* = 0x8824.GLenum
  GL_DRAW_BUFFER0_ARB* = 0x8825.GLenum
  GL_DRAW_BUFFER1_ARB* = 0x8826.GLenum
  GL_DRAW_BUFFER2_ARB* = 0x8827.GLenum
  GL_DRAW_BUFFER3_ARB* = 0x8828.GLenum
  GL_DRAW_BUFFER4_ARB* = 0x8829.GLenum
  GL_DRAW_BUFFER5_ARB* = 0x882A.GLenum
  GL_DRAW_BUFFER6_ARB* = 0x882B.GLenum
  GL_DRAW_BUFFER7_ARB* = 0x882C.GLenum
  GL_DRAW_BUFFER8_ARB* = 0x882D.GLenum
  GL_DRAW_BUFFER9_ARB* = 0x882E.GLenum
  GL_DRAW_BUFFER10_ARB* = 0x882F.GLenum
  GL_DRAW_BUFFER11_ARB* = 0x8830.GLenum
  GL_DRAW_BUFFER12_ARB* = 0x8831.GLenum
  GL_DRAW_BUFFER13_ARB* = 0x8832.GLenum
  GL_DRAW_BUFFER14_ARB* = 0x8833.GLenum
  GL_DRAW_BUFFER15_ARB* = 0x8834.GLenum

  GLAD_GL_ARB_draw_buffers_blend*: bool

  GLAD_GL_ARB_draw_elements_base_vertex*: bool

  GLAD_GL_ARB_draw_indirect*: bool

  GLAD_GL_ARB_draw_instanced*: bool

  GLAD_GL_ARB_enhanced_layouts*: bool

  GLAD_GL_ARB_explicit_attrib_location*: bool

  GLAD_GL_ARB_explicit_uniform_location*: bool

  GLAD_GL_ARB_fragment_coord_conventions*: bool

  GLAD_GL_ARB_fragment_layer_viewport*: bool

  GLAD_GL_ARB_fragment_program*: bool
  GL_FRAGMENT_PROGRAM_ARB* = 0x8804.GLenum
  GL_PROGRAM_FORMAT_ASCII_ARB* = 0x8875.GLenum
  GL_PROGRAM_LENGTH_ARB* = 0x8627.GLenum
  GL_PROGRAM_FORMAT_ARB* = 0x8876.GLenum
  GL_PROGRAM_BINDING_ARB* = 0x8677.GLenum
  GL_PROGRAM_INSTRUCTIONS_ARB* = 0x88A0.GLenum
  GL_MAX_PROGRAM_INSTRUCTIONS_ARB* = 0x88A1.GLenum
  GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB* = 0x88A2.GLenum
  GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB* = 0x88A3.GLenum
  GL_PROGRAM_TEMPORARIES_ARB* = 0x88A4.GLenum
  GL_MAX_PROGRAM_TEMPORARIES_ARB* = 0x88A5.GLenum
  GL_PROGRAM_NATIVE_TEMPORARIES_ARB* = 0x88A6.GLenum
  GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB* = 0x88A7.GLenum
  GL_PROGRAM_PARAMETERS_ARB* = 0x88A8.GLenum
  GL_MAX_PROGRAM_PARAMETERS_ARB* = 0x88A9.GLenum
  GL_PROGRAM_NATIVE_PARAMETERS_ARB* = 0x88AA.GLenum
  GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB* = 0x88AB.GLenum
  GL_PROGRAM_ATTRIBS_ARB* = 0x88AC.GLenum
  GL_MAX_PROGRAM_ATTRIBS_ARB* = 0x88AD.GLenum
  GL_PROGRAM_NATIVE_ATTRIBS_ARB* = 0x88AE.GLenum
  GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB* = 0x88AF.GLenum
  GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB* = 0x88B4.GLenum
  GL_MAX_PROGRAM_ENV_PARAMETERS_ARB* = 0x88B5.GLenum
  GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB* = 0x88B6.GLenum
  GL_PROGRAM_ALU_INSTRUCTIONS_ARB* = 0x8805.GLenum
  GL_PROGRAM_TEX_INSTRUCTIONS_ARB* = 0x8806.GLenum
  GL_PROGRAM_TEX_INDIRECTIONS_ARB* = 0x8807.GLenum
  GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB* = 0x8808.GLenum
  GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB* = 0x8809.GLenum
  GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB* = 0x880A.GLenum
  GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB* = 0x880B.GLenum
  GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB* = 0x880C.GLenum
  GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB* = 0x880D.GLenum
  GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB* = 0x880E.GLenum
  GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB* = 0x880F.GLenum
  GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB* = 0x8810.GLenum
  GL_PROGRAM_STRING_ARB* = 0x8628.GLenum
  GL_PROGRAM_ERROR_POSITION_ARB* = 0x864B.GLenum
  GL_CURRENT_MATRIX_ARB* = 0x8641.GLenum
  GL_TRANSPOSE_CURRENT_MATRIX_ARB* = 0x88B7.GLenum
  GL_CURRENT_MATRIX_STACK_DEPTH_ARB* = 0x8640.GLenum
  GL_MAX_PROGRAM_MATRICES_ARB* = 0x862F.GLenum
  GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB* = 0x862E.GLenum
  GL_MAX_TEXTURE_COORDS_ARB* = 0x8871.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS_ARB* = 0x8872.GLenum
  GL_PROGRAM_ERROR_STRING_ARB* = 0x8874.GLenum
  GL_MATRIX0_ARB* = 0x88C0.GLenum
  GL_MATRIX1_ARB* = 0x88C1.GLenum
  GL_MATRIX2_ARB* = 0x88C2.GLenum
  GL_MATRIX3_ARB* = 0x88C3.GLenum
  GL_MATRIX4_ARB* = 0x88C4.GLenum
  GL_MATRIX5_ARB* = 0x88C5.GLenum
  GL_MATRIX6_ARB* = 0x88C6.GLenum
  GL_MATRIX7_ARB* = 0x88C7.GLenum
  GL_MATRIX8_ARB* = 0x88C8.GLenum
  GL_MATRIX9_ARB* = 0x88C9.GLenum
  GL_MATRIX10_ARB* = 0x88CA.GLenum
  GL_MATRIX11_ARB* = 0x88CB.GLenum
  GL_MATRIX12_ARB* = 0x88CC.GLenum
  GL_MATRIX13_ARB* = 0x88CD.GLenum
  GL_MATRIX14_ARB* = 0x88CE.GLenum
  GL_MATRIX15_ARB* = 0x88CF.GLenum
  GL_MATRIX16_ARB* = 0x88D0.GLenum
  GL_MATRIX17_ARB* = 0x88D1.GLenum
  GL_MATRIX18_ARB* = 0x88D2.GLenum
  GL_MATRIX19_ARB* = 0x88D3.GLenum
  GL_MATRIX20_ARB* = 0x88D4.GLenum
  GL_MATRIX21_ARB* = 0x88D5.GLenum
  GL_MATRIX22_ARB* = 0x88D6.GLenum
  GL_MATRIX23_ARB* = 0x88D7.GLenum
  GL_MATRIX24_ARB* = 0x88D8.GLenum
  GL_MATRIX25_ARB* = 0x88D9.GLenum
  GL_MATRIX26_ARB* = 0x88DA.GLenum
  GL_MATRIX27_ARB* = 0x88DB.GLenum
  GL_MATRIX28_ARB* = 0x88DC.GLenum
  GL_MATRIX29_ARB* = 0x88DD.GLenum
  GL_MATRIX30_ARB* = 0x88DE.GLenum
  GL_MATRIX31_ARB* = 0x88DF.GLenum

  GLAD_GL_ARB_fragment_program_shadow*: bool

  GLAD_GL_ARB_fragment_shader*: bool
  GL_FRAGMENT_SHADER_ARB* = 0x8B30.GLenum
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB* = 0x8B49.GLenum
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB* = 0x8B8B.GLenum

  GLAD_GL_ARB_fragment_shader_interlock*: bool

  GLAD_GL_ARB_framebuffer_no_attachments*: bool

  GLAD_GL_ARB_framebuffer_object*: bool
  GL_INDEX* = 0x8222.GLenum

  GLAD_GL_ARB_framebuffer_sRGB*: bool

  GLAD_GL_ARB_geometry_shader4*: bool
  GL_LINES_ADJACENCY_ARB* = 0x000A.GLenum
  GL_LINE_STRIP_ADJACENCY_ARB* = 0x000B.GLenum
  GL_TRIANGLES_ADJACENCY_ARB* = 0x000C.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY_ARB* = 0x000D.GLenum
  GL_PROGRAM_POINT_SIZE_ARB* = 0x8642.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB* = 0x8C29.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB* = 0x8DA8.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB* = 0x8DA9.GLenum
  GL_GEOMETRY_SHADER_ARB* = 0x8DD9.GLenum
  GL_GEOMETRY_VERTICES_OUT_ARB* = 0x8DDA.GLenum
  GL_GEOMETRY_INPUT_TYPE_ARB* = 0x8DDB.GLenum
  GL_GEOMETRY_OUTPUT_TYPE_ARB* = 0x8DDC.GLenum
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB* = 0x8DDD.GLenum
  GL_MAX_VERTEX_VARYING_COMPONENTS_ARB* = 0x8DDE.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB* = 0x8DE1.GLenum

  GLAD_GL_ARB_get_program_binary*: bool

  GLAD_GL_ARB_get_texture_sub_image*: bool

  GLAD_GL_ARB_gl_spirv*: bool
  GL_SHADER_BINARY_FORMAT_SPIR_V_ARB* = 0x9551.GLenum
  GL_SPIR_V_BINARY_ARB* = 0x9552.GLenum

  GLAD_GL_ARB_gpu_shader5*: bool

  GLAD_GL_ARB_gpu_shader_fp64*: bool

  GLAD_GL_ARB_gpu_shader_int64*: bool
  GL_INT64_ARB* = 0x140E.GLenum
  GL_INT64_VEC2_ARB* = 0x8FE9.GLenum
  GL_INT64_VEC3_ARB* = 0x8FEA.GLenum
  GL_INT64_VEC4_ARB* = 0x8FEB.GLenum
  GL_UNSIGNED_INT64_VEC2_ARB* = 0x8FF5.GLenum
  GL_UNSIGNED_INT64_VEC3_ARB* = 0x8FF6.GLenum
  GL_UNSIGNED_INT64_VEC4_ARB* = 0x8FF7.GLenum

  GLAD_GL_ARB_half_float_pixel*: bool
  GL_HALF_FLOAT_ARB* = 0x140B.GLenum

  GLAD_GL_ARB_half_float_vertex*: bool

  GLAD_GL_ARB_imaging*: bool
  GL_CONVOLUTION_BORDER_MODE* = 0x8013.GLenum
  GL_CONVOLUTION_FILTER_SCALE* = 0x8014.GLenum
  GL_CONVOLUTION_FILTER_BIAS* = 0x8015.GLenum
  GL_REDUCE* = 0x8016.GLenum
  GL_CONVOLUTION_FORMAT* = 0x8017.GLenum
  GL_CONVOLUTION_WIDTH* = 0x8018.GLenum
  GL_CONVOLUTION_HEIGHT* = 0x8019.GLenum
  GL_MAX_CONVOLUTION_WIDTH* = 0x801A.GLenum
  GL_MAX_CONVOLUTION_HEIGHT* = 0x801B.GLenum
  GL_POST_CONVOLUTION_RED_SCALE* = 0x801C.GLenum
  GL_POST_CONVOLUTION_GREEN_SCALE* = 0x801D.GLenum
  GL_POST_CONVOLUTION_BLUE_SCALE* = 0x801E.GLenum
  GL_POST_CONVOLUTION_ALPHA_SCALE* = 0x801F.GLenum
  GL_POST_CONVOLUTION_RED_BIAS* = 0x8020.GLenum
  GL_POST_CONVOLUTION_GREEN_BIAS* = 0x8021.GLenum
  GL_POST_CONVOLUTION_BLUE_BIAS* = 0x8022.GLenum
  GL_POST_CONVOLUTION_ALPHA_BIAS* = 0x8023.GLenum
  GL_HISTOGRAM_WIDTH* = 0x8026.GLenum
  GL_HISTOGRAM_FORMAT* = 0x8027.GLenum
  GL_HISTOGRAM_RED_SIZE* = 0x8028.GLenum
  GL_HISTOGRAM_GREEN_SIZE* = 0x8029.GLenum
  GL_HISTOGRAM_BLUE_SIZE* = 0x802A.GLenum
  GL_HISTOGRAM_ALPHA_SIZE* = 0x802B.GLenum
  GL_HISTOGRAM_LUMINANCE_SIZE* = 0x802C.GLenum
  GL_HISTOGRAM_SINK* = 0x802D.GLenum
  GL_MINMAX_FORMAT* = 0x802F.GLenum
  GL_MINMAX_SINK* = 0x8030.GLenum
  GL_TABLE_TOO_LARGE* = 0x8031.GLenum
  GL_COLOR_MATRIX* = 0x80B1.GLenum
  GL_COLOR_MATRIX_STACK_DEPTH* = 0x80B2.GLenum
  GL_MAX_COLOR_MATRIX_STACK_DEPTH* = 0x80B3.GLenum
  GL_POST_COLOR_MATRIX_RED_SCALE* = 0x80B4.GLenum
  GL_POST_COLOR_MATRIX_GREEN_SCALE* = 0x80B5.GLenum
  GL_POST_COLOR_MATRIX_BLUE_SCALE* = 0x80B6.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_SCALE* = 0x80B7.GLenum
  GL_POST_COLOR_MATRIX_RED_BIAS* = 0x80B8.GLenum
  GL_POST_COLOR_MATRIX_GREEN_BIAS* = 0x80B9.GLenum
  GL_POST_COLOR_MATRIX_BLUE_BIAS* = 0x80BA.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_BIAS* = 0x80BB.GLenum
  GL_COLOR_TABLE_SCALE* = 0x80D6.GLenum
  GL_COLOR_TABLE_BIAS* = 0x80D7.GLenum
  GL_COLOR_TABLE_FORMAT* = 0x80D8.GLenum
  GL_COLOR_TABLE_WIDTH* = 0x80D9.GLenum
  GL_COLOR_TABLE_RED_SIZE* = 0x80DA.GLenum
  GL_COLOR_TABLE_GREEN_SIZE* = 0x80DB.GLenum
  GL_COLOR_TABLE_BLUE_SIZE* = 0x80DC.GLenum
  GL_COLOR_TABLE_ALPHA_SIZE* = 0x80DD.GLenum
  GL_COLOR_TABLE_LUMINANCE_SIZE* = 0x80DE.GLenum
  GL_COLOR_TABLE_INTENSITY_SIZE* = 0x80DF.GLenum
  GL_CONSTANT_BORDER* = 0x8151.GLenum
  GL_REPLICATE_BORDER* = 0x8153.GLenum
  GL_CONVOLUTION_BORDER_COLOR* = 0x8154.GLenum

  GLAD_GL_ARB_indirect_parameters*: bool
  GL_PARAMETER_BUFFER_ARB* = 0x80EE.GLenum
  GL_PARAMETER_BUFFER_BINDING_ARB* = 0x80EF.GLenum

  GLAD_GL_ARB_instanced_arrays*: bool
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB* = 0x88FE.GLenum

  GLAD_GL_ARB_internalformat_query*: bool

  GLAD_GL_ARB_internalformat_query2*: bool
  GL_SRGB_DECODE_ARB* = 0x8299.GLenum
  GL_VIEW_CLASS_EAC_R11* = 0x9383.GLenum
  GL_VIEW_CLASS_EAC_RG11* = 0x9384.GLenum
  GL_VIEW_CLASS_ETC2_RGB* = 0x9385.GLenum
  GL_VIEW_CLASS_ETC2_RGBA* = 0x9386.GLenum
  GL_VIEW_CLASS_ETC2_EAC_RGBA* = 0x9387.GLenum
  GL_VIEW_CLASS_ASTC_4x4_RGBA* = 0x9388.GLenum
  GL_VIEW_CLASS_ASTC_5x4_RGBA* = 0x9389.GLenum
  GL_VIEW_CLASS_ASTC_5x5_RGBA* = 0x938A.GLenum
  GL_VIEW_CLASS_ASTC_6x5_RGBA* = 0x938B.GLenum
  GL_VIEW_CLASS_ASTC_6x6_RGBA* = 0x938C.GLenum
  GL_VIEW_CLASS_ASTC_8x5_RGBA* = 0x938D.GLenum
  GL_VIEW_CLASS_ASTC_8x6_RGBA* = 0x938E.GLenum
  GL_VIEW_CLASS_ASTC_8x8_RGBA* = 0x938F.GLenum
  GL_VIEW_CLASS_ASTC_10x5_RGBA* = 0x9390.GLenum
  GL_VIEW_CLASS_ASTC_10x6_RGBA* = 0x9391.GLenum
  GL_VIEW_CLASS_ASTC_10x8_RGBA* = 0x9392.GLenum
  GL_VIEW_CLASS_ASTC_10x10_RGBA* = 0x9393.GLenum
  GL_VIEW_CLASS_ASTC_12x10_RGBA* = 0x9394.GLenum
  GL_VIEW_CLASS_ASTC_12x12_RGBA* = 0x9395.GLenum

  GLAD_GL_ARB_invalidate_subdata*: bool

  GLAD_GL_ARB_map_buffer_alignment*: bool

  GLAD_GL_ARB_map_buffer_range*: bool

  GLAD_GL_ARB_matrix_palette*: bool
  GL_MATRIX_PALETTE_ARB* = 0x8840.GLenum
  GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB* = 0x8841.GLenum
  GL_MAX_PALETTE_MATRICES_ARB* = 0x8842.GLenum
  GL_CURRENT_PALETTE_MATRIX_ARB* = 0x8843.GLenum
  GL_MATRIX_INDEX_ARRAY_ARB* = 0x8844.GLenum
  GL_CURRENT_MATRIX_INDEX_ARB* = 0x8845.GLenum
  GL_MATRIX_INDEX_ARRAY_SIZE_ARB* = 0x8846.GLenum
  GL_MATRIX_INDEX_ARRAY_TYPE_ARB* = 0x8847.GLenum
  GL_MATRIX_INDEX_ARRAY_STRIDE_ARB* = 0x8848.GLenum
  GL_MATRIX_INDEX_ARRAY_POINTER_ARB* = 0x8849.GLenum

  GLAD_GL_ARB_multi_bind*: bool

  GLAD_GL_ARB_multi_draw_indirect*: bool

  GLAD_GL_ARB_multisample*: bool
  GL_MULTISAMPLE_ARB* = 0x809D.GLenum
  GL_SAMPLE_ALPHA_TO_COVERAGE_ARB* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_ONE_ARB* = 0x809F.GLenum
  GL_SAMPLE_COVERAGE_ARB* = 0x80A0.GLenum
  GL_SAMPLE_BUFFERS_ARB* = 0x80A8.GLenum
  GL_SAMPLES_ARB* = 0x80A9.GLenum
  GL_SAMPLE_COVERAGE_VALUE_ARB* = 0x80AA.GLenum
  GL_SAMPLE_COVERAGE_INVERT_ARB* = 0x80AB.GLenum
  GL_MULTISAMPLE_BIT_ARB* = 0x20000000.GLbitfield

  GLAD_GL_ARB_multitexture*: bool
  GL_TEXTURE0_ARB* = 0x84C0.GLenum
  GL_TEXTURE1_ARB* = 0x84C1.GLenum
  GL_TEXTURE2_ARB* = 0x84C2.GLenum
  GL_TEXTURE3_ARB* = 0x84C3.GLenum
  GL_TEXTURE4_ARB* = 0x84C4.GLenum
  GL_TEXTURE5_ARB* = 0x84C5.GLenum
  GL_TEXTURE6_ARB* = 0x84C6.GLenum
  GL_TEXTURE7_ARB* = 0x84C7.GLenum
  GL_TEXTURE8_ARB* = 0x84C8.GLenum
  GL_TEXTURE9_ARB* = 0x84C9.GLenum
  GL_TEXTURE10_ARB* = 0x84CA.GLenum
  GL_TEXTURE11_ARB* = 0x84CB.GLenum
  GL_TEXTURE12_ARB* = 0x84CC.GLenum
  GL_TEXTURE13_ARB* = 0x84CD.GLenum
  GL_TEXTURE14_ARB* = 0x84CE.GLenum
  GL_TEXTURE15_ARB* = 0x84CF.GLenum
  GL_TEXTURE16_ARB* = 0x84D0.GLenum
  GL_TEXTURE17_ARB* = 0x84D1.GLenum
  GL_TEXTURE18_ARB* = 0x84D2.GLenum
  GL_TEXTURE19_ARB* = 0x84D3.GLenum
  GL_TEXTURE20_ARB* = 0x84D4.GLenum
  GL_TEXTURE21_ARB* = 0x84D5.GLenum
  GL_TEXTURE22_ARB* = 0x84D6.GLenum
  GL_TEXTURE23_ARB* = 0x84D7.GLenum
  GL_TEXTURE24_ARB* = 0x84D8.GLenum
  GL_TEXTURE25_ARB* = 0x84D9.GLenum
  GL_TEXTURE26_ARB* = 0x84DA.GLenum
  GL_TEXTURE27_ARB* = 0x84DB.GLenum
  GL_TEXTURE28_ARB* = 0x84DC.GLenum
  GL_TEXTURE29_ARB* = 0x84DD.GLenum
  GL_TEXTURE30_ARB* = 0x84DE.GLenum
  GL_TEXTURE31_ARB* = 0x84DF.GLenum
  GL_ACTIVE_TEXTURE_ARB* = 0x84E0.GLenum
  GL_CLIENT_ACTIVE_TEXTURE_ARB* = 0x84E1.GLenum
  GL_MAX_TEXTURE_UNITS_ARB* = 0x84E2.GLenum

  GLAD_GL_ARB_occlusion_query*: bool
  GL_QUERY_COUNTER_BITS_ARB* = 0x8864.GLbitfield
  GL_CURRENT_QUERY_ARB* = 0x8865.GLenum
  GL_QUERY_RESULT_ARB* = 0x8866.GLenum
  GL_QUERY_RESULT_AVAILABLE_ARB* = 0x8867.GLenum
  GL_SAMPLES_PASSED_ARB* = 0x8914.GLenum

  GLAD_GL_ARB_occlusion_query2*: bool

  GLAD_GL_ARB_parallel_shader_compile*: bool
  GL_MAX_SHADER_COMPILER_THREADS_ARB* = 0x91B0.GLenum
  GL_COMPLETION_STATUS_ARB* = 0x91B1.GLenum

  GLAD_GL_ARB_pipeline_statistics_query*: bool
  GL_VERTICES_SUBMITTED_ARB* = 0x82EE.GLenum
  GL_PRIMITIVES_SUBMITTED_ARB* = 0x82EF.GLenum
  GL_VERTEX_SHADER_INVOCATIONS_ARB* = 0x82F0.GLenum
  GL_TESS_CONTROL_SHADER_PATCHES_ARB* = 0x82F1.GLenum
  GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB* = 0x82F2.GLenum
  GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB* = 0x82F3.GLenum
  GL_FRAGMENT_SHADER_INVOCATIONS_ARB* = 0x82F4.GLenum
  GL_COMPUTE_SHADER_INVOCATIONS_ARB* = 0x82F5.GLenum
  GL_CLIPPING_INPUT_PRIMITIVES_ARB* = 0x82F6.GLenum
  GL_CLIPPING_OUTPUT_PRIMITIVES_ARB* = 0x82F7.GLenum

  GLAD_GL_ARB_pixel_buffer_object*: bool
  GL_PIXEL_PACK_BUFFER_ARB* = 0x88EB.GLenum
  GL_PIXEL_UNPACK_BUFFER_ARB* = 0x88EC.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING_ARB* = 0x88ED.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING_ARB* = 0x88EF.GLenum

  GLAD_GL_ARB_point_parameters*: bool
  GL_POINT_SIZE_MIN_ARB* = 0x8126.GLenum
  GL_POINT_SIZE_MAX_ARB* = 0x8127.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE_ARB* = 0x8128.GLenum
  GL_POINT_DISTANCE_ATTENUATION_ARB* = 0x8129.GLenum

  GLAD_GL_ARB_point_sprite*: bool
  GL_POINT_SPRITE_ARB* = 0x8861.GLenum
  GL_COORD_REPLACE_ARB* = 0x8862.GLenum

  GLAD_GL_ARB_polygon_offset_clamp*: bool

  GLAD_GL_ARB_post_depth_coverage*: bool

  GLAD_GL_ARB_program_interface_query*: bool

  GLAD_GL_ARB_provoking_vertex*: bool

  GLAD_GL_ARB_query_buffer_object*: bool

  GLAD_GL_ARB_robust_buffer_access_behavior*: bool

  GLAD_GL_ARB_robustness*: bool
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB* = 0x00000004.GLbitfield
  GL_LOSE_CONTEXT_ON_RESET_ARB* = 0x8252.GLenum
  GL_GUILTY_CONTEXT_RESET_ARB* = 0x8253.GLenum
  GL_INNOCENT_CONTEXT_RESET_ARB* = 0x8254.GLenum
  GL_UNKNOWN_CONTEXT_RESET_ARB* = 0x8255.GLenum
  GL_RESET_NOTIFICATION_STRATEGY_ARB* = 0x8256.GLenum
  GL_NO_RESET_NOTIFICATION_ARB* = 0x8261.GLenum

  GLAD_GL_ARB_robustness_isolation*: bool

  GLAD_GL_ARB_sample_locations*: bool
  GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB* = 0x933D.GLbitfield
  GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB* = 0x933E.GLenum
  GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB* = 0x933F.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB* = 0x9340.GLenum
  GL_SAMPLE_LOCATION_ARB* = 0x8E50.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB* = 0x9341.GLenum
  GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB* = 0x9342.GLenum
  GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB* = 0x9343.GLenum

  GLAD_GL_ARB_sample_shading*: bool
  GL_SAMPLE_SHADING_ARB* = 0x8C36.GLenum
  GL_MIN_SAMPLE_SHADING_VALUE_ARB* = 0x8C37.GLenum

  GLAD_GL_ARB_sampler_objects*: bool

  GLAD_GL_ARB_seamless_cube_map*: bool

  GLAD_GL_ARB_seamless_cubemap_per_texture*: bool

  GLAD_GL_ARB_separate_shader_objects*: bool

  GLAD_GL_ARB_shader_atomic_counter_ops*: bool

  GLAD_GL_ARB_shader_atomic_counters*: bool

  GLAD_GL_ARB_shader_ballot*: bool

  GLAD_GL_ARB_shader_bit_encoding*: bool

  GLAD_GL_ARB_shader_clock*: bool

  GLAD_GL_ARB_shader_draw_parameters*: bool

  GLAD_GL_ARB_shader_group_vote*: bool

  GLAD_GL_ARB_shader_image_load_store*: bool

  GLAD_GL_ARB_shader_image_size*: bool

  GLAD_GL_ARB_shader_objects*: bool
  GL_PROGRAM_OBJECT_ARB* = 0x8B40.GLenum
  GL_SHADER_OBJECT_ARB* = 0x8B48.GLenum
  GL_OBJECT_TYPE_ARB* = 0x8B4E.GLenum
  GL_OBJECT_SUBTYPE_ARB* = 0x8B4F.GLenum
  GL_FLOAT_VEC2_ARB* = 0x8B50.GLenum
  GL_FLOAT_VEC3_ARB* = 0x8B51.GLenum
  GL_FLOAT_VEC4_ARB* = 0x8B52.GLenum
  GL_INT_VEC2_ARB* = 0x8B53.GLenum
  GL_INT_VEC3_ARB* = 0x8B54.GLenum
  GL_INT_VEC4_ARB* = 0x8B55.GLenum
  GL_BOOL_ARB* = 0x8B56.GLenum
  GL_BOOL_VEC2_ARB* = 0x8B57.GLenum
  GL_BOOL_VEC3_ARB* = 0x8B58.GLenum
  GL_BOOL_VEC4_ARB* = 0x8B59.GLenum
  GL_FLOAT_MAT2_ARB* = 0x8B5A.GLenum
  GL_FLOAT_MAT3_ARB* = 0x8B5B.GLenum
  GL_FLOAT_MAT4_ARB* = 0x8B5C.GLenum
  GL_SAMPLER_1D_ARB* = 0x8B5D.GLenum
  GL_SAMPLER_2D_ARB* = 0x8B5E.GLenum
  GL_SAMPLER_3D_ARB* = 0x8B5F.GLenum
  GL_SAMPLER_CUBE_ARB* = 0x8B60.GLenum
  GL_SAMPLER_1D_SHADOW_ARB* = 0x8B61.GLenum
  GL_SAMPLER_2D_SHADOW_ARB* = 0x8B62.GLenum
  GL_SAMPLER_2D_RECT_ARB* = 0x8B63.GLenum
  GL_SAMPLER_2D_RECT_SHADOW_ARB* = 0x8B64.GLenum
  GL_OBJECT_DELETE_STATUS_ARB* = 0x8B80.GLenum
  GL_OBJECT_COMPILE_STATUS_ARB* = 0x8B81.GLenum
  GL_OBJECT_LINK_STATUS_ARB* = 0x8B82.GLenum
  GL_OBJECT_VALIDATE_STATUS_ARB* = 0x8B83.GLenum
  GL_OBJECT_INFO_LOG_LENGTH_ARB* = 0x8B84.GLenum
  GL_OBJECT_ATTACHED_OBJECTS_ARB* = 0x8B85.GLenum
  GL_OBJECT_ACTIVE_UNIFORMS_ARB* = 0x8B86.GLenum
  GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB* = 0x8B87.GLenum
  GL_OBJECT_SHADER_SOURCE_LENGTH_ARB* = 0x8B88.GLenum

  GLAD_GL_ARB_shader_precision*: bool

  GLAD_GL_ARB_shader_stencil_export*: bool

  GLAD_GL_ARB_shader_storage_buffer_object*: bool

  GLAD_GL_ARB_shader_subroutine*: bool

  GLAD_GL_ARB_shader_texture_image_samples*: bool

  GLAD_GL_ARB_shader_texture_lod*: bool

  GLAD_GL_ARB_shader_viewport_layer_array*: bool

  GLAD_GL_ARB_shading_language_100*: bool
  GL_SHADING_LANGUAGE_VERSION_ARB* = 0x8B8C.GLenum

  GLAD_GL_ARB_shading_language_420pack*: bool

  GLAD_GL_ARB_shading_language_include*: bool
  GL_SHADER_INCLUDE_ARB* = 0x8DAE.GLenum
  GL_NAMED_STRING_LENGTH_ARB* = 0x8DE9.GLenum
  GL_NAMED_STRING_TYPE_ARB* = 0x8DEA.GLenum

  GLAD_GL_ARB_shading_language_packing*: bool

  GLAD_GL_ARB_shadow*: bool
  GL_TEXTURE_COMPARE_MODE_ARB* = 0x884C.GLenum
  GL_TEXTURE_COMPARE_FUNC_ARB* = 0x884D.GLenum
  GL_COMPARE_R_TO_TEXTURE_ARB* = 0x884E.GLenum

  GLAD_GL_ARB_shadow_ambient*: bool
  GL_TEXTURE_COMPARE_FAIL_VALUE_ARB* = 0x80BF.GLenum

  GLAD_GL_ARB_sparse_buffer*: bool
  GL_SPARSE_STORAGE_BIT_ARB* = 0x0400.GLbitfield
  GL_SPARSE_BUFFER_PAGE_SIZE_ARB* = 0x82F8.GLenum

  GLAD_GL_ARB_sparse_texture*: bool
  GL_TEXTURE_SPARSE_ARB* = 0x91A6.GLenum
  GL_VIRTUAL_PAGE_SIZE_INDEX_ARB* = 0x91A7.GLenum
  GL_NUM_SPARSE_LEVELS_ARB* = 0x91AA.GLenum
  GL_NUM_VIRTUAL_PAGE_SIZES_ARB* = 0x91A8.GLenum
  GL_VIRTUAL_PAGE_SIZE_X_ARB* = 0x9195.GLenum
  GL_VIRTUAL_PAGE_SIZE_Y_ARB* = 0x9196.GLenum
  GL_VIRTUAL_PAGE_SIZE_Z_ARB* = 0x9197.GLenum
  GL_MAX_SPARSE_TEXTURE_SIZE_ARB* = 0x9198.GLenum
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB* = 0x9199.GLenum
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB* = 0x919A.GLenum
  GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB* = 0x91A9.GLenum

  GLAD_GL_ARB_sparse_texture2*: bool

  GLAD_GL_ARB_sparse_texture_clamp*: bool

  GLAD_GL_ARB_spirv_extensions*: bool

  GLAD_GL_ARB_stencil_texturing*: bool

  GLAD_GL_ARB_sync*: bool

  GLAD_GL_ARB_tessellation_shader*: bool

  GLAD_GL_ARB_texture_barrier*: bool

  GLAD_GL_ARB_texture_border_clamp*: bool
  GL_CLAMP_TO_BORDER_ARB* = 0x812D.GLenum

  GLAD_GL_ARB_texture_buffer_object*: bool
  GL_TEXTURE_BUFFER_ARB* = 0x8C2A.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE_ARB* = 0x8C2B.GLenum
  GL_TEXTURE_BINDING_BUFFER_ARB* = 0x8C2C.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB* = 0x8C2D.GLenum
  GL_TEXTURE_BUFFER_FORMAT_ARB* = 0x8C2E.GLenum

  GLAD_GL_ARB_texture_buffer_object_rgb32*: bool

  GLAD_GL_ARB_texture_buffer_range*: bool

  GLAD_GL_ARB_texture_compression*: bool
  GL_COMPRESSED_ALPHA_ARB* = 0x84E9.GLenum
  GL_COMPRESSED_LUMINANCE_ARB* = 0x84EA.GLenum
  GL_COMPRESSED_LUMINANCE_ALPHA_ARB* = 0x84EB.GLenum
  GL_COMPRESSED_INTENSITY_ARB* = 0x84EC.GLenum
  GL_COMPRESSED_RGB_ARB* = 0x84ED.GLenum
  GL_COMPRESSED_RGBA_ARB* = 0x84EE.GLenum
  GL_TEXTURE_COMPRESSION_HINT_ARB* = 0x84EF.GLenum
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB* = 0x86A0.GLenum
  GL_TEXTURE_COMPRESSED_ARB* = 0x86A1.GLenum
  GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB* = 0x86A2.GLenum
  GL_COMPRESSED_TEXTURE_FORMATS_ARB* = 0x86A3.GLenum

  GLAD_GL_ARB_texture_compression_bptc*: bool
  GL_COMPRESSED_RGBA_BPTC_UNORM_ARB* = 0x8E8C.GLenum
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB* = 0x8E8D.GLenum
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB* = 0x8E8E.GLenum
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB* = 0x8E8F.GLenum

  GLAD_GL_ARB_texture_compression_rgtc*: bool

  GLAD_GL_ARB_texture_cube_map*: bool
  GL_NORMAL_MAP_ARB* = 0x8511.GLenum
  GL_REFLECTION_MAP_ARB* = 0x8512.GLenum
  GL_TEXTURE_CUBE_MAP_ARB* = 0x8513.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARB* = 0x8514.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB* = 0x851A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_ARB* = 0x851B.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB* = 0x851C.GLenum

  GLAD_GL_ARB_texture_cube_map_array*: bool
  GL_TEXTURE_CUBE_MAP_ARRAY_ARB* = 0x9009.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB* = 0x900A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB* = 0x900B.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_ARB* = 0x900C.GLenum
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB* = 0x900D.GLenum
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB* = 0x900E.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB* = 0x900F.GLenum

  GLAD_GL_ARB_texture_env_add*: bool

  GLAD_GL_ARB_texture_env_combine*: bool
  GL_COMBINE_ARB* = 0x8570.GLenum
  GL_COMBINE_RGB_ARB* = 0x8571.GLenum
  GL_COMBINE_ALPHA_ARB* = 0x8572.GLenum
  GL_SOURCE0_RGB_ARB* = 0x8580.GLenum
  GL_SOURCE1_RGB_ARB* = 0x8581.GLenum
  GL_SOURCE2_RGB_ARB* = 0x8582.GLenum
  GL_SOURCE0_ALPHA_ARB* = 0x8588.GLenum
  GL_SOURCE1_ALPHA_ARB* = 0x8589.GLenum
  GL_SOURCE2_ALPHA_ARB* = 0x858A.GLenum
  GL_OPERAND0_RGB_ARB* = 0x8590.GLenum
  GL_OPERAND1_RGB_ARB* = 0x8591.GLenum
  GL_OPERAND2_RGB_ARB* = 0x8592.GLenum
  GL_OPERAND0_ALPHA_ARB* = 0x8598.GLenum
  GL_OPERAND1_ALPHA_ARB* = 0x8599.GLenum
  GL_OPERAND2_ALPHA_ARB* = 0x859A.GLenum
  GL_RGB_SCALE_ARB* = 0x8573.GLenum
  GL_ADD_SIGNED_ARB* = 0x8574.GLenum
  GL_INTERPOLATE_ARB* = 0x8575.GLenum
  GL_SUBTRACT_ARB* = 0x84E7.GLenum
  GL_CONSTANT_ARB* = 0x8576.GLenum
  GL_PRIMARY_COLOR_ARB* = 0x8577.GLenum
  GL_PREVIOUS_ARB* = 0x8578.GLenum

  GLAD_GL_ARB_texture_env_crossbar*: bool

  GLAD_GL_ARB_texture_env_dot3*: bool
  GL_DOT3_RGB_ARB* = 0x86AE.GLenum
  GL_DOT3_RGBA_ARB* = 0x86AF.GLenum

  GLAD_GL_ARB_texture_filter_anisotropic*: bool

  GLAD_GL_ARB_texture_filter_minmax*: bool
  GL_TEXTURE_REDUCTION_MODE_ARB* = 0x9366.GLenum
  GL_WEIGHTED_AVERAGE_ARB* = 0x9367.GLenum

  GLAD_GL_ARB_texture_float*: bool
  GL_TEXTURE_RED_TYPE_ARB* = 0x8C10.GLenum
  GL_TEXTURE_GREEN_TYPE_ARB* = 0x8C11.GLenum
  GL_TEXTURE_BLUE_TYPE_ARB* = 0x8C12.GLenum
  GL_TEXTURE_ALPHA_TYPE_ARB* = 0x8C13.GLenum
  GL_TEXTURE_LUMINANCE_TYPE_ARB* = 0x8C14.GLenum
  GL_TEXTURE_INTENSITY_TYPE_ARB* = 0x8C15.GLenum
  GL_TEXTURE_DEPTH_TYPE_ARB* = 0x8C16.GLenum
  GL_UNSIGNED_NORMALIZED_ARB* = 0x8C17.GLenum
  GL_RGBA32F_ARB* = 0x8814.GLenum
  GL_RGB32F_ARB* = 0x8815.GLenum
  GL_ALPHA32F_ARB* = 0x8816.GLenum
  GL_INTENSITY32F_ARB* = 0x8817.GLenum
  GL_LUMINANCE32F_ARB* = 0x8818.GLenum
  GL_LUMINANCE_ALPHA32F_ARB* = 0x8819.GLenum
  GL_RGBA16F_ARB* = 0x881A.GLenum
  GL_RGB16F_ARB* = 0x881B.GLenum
  GL_ALPHA16F_ARB* = 0x881C.GLenum
  GL_INTENSITY16F_ARB* = 0x881D.GLenum
  GL_LUMINANCE16F_ARB* = 0x881E.GLenum
  GL_LUMINANCE_ALPHA16F_ARB* = 0x881F.GLenum

  GLAD_GL_ARB_texture_gather*: bool
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB* = 0x8E5E.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB* = 0x8E5F.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB* = 0x8F9F.GLenum

  GLAD_GL_ARB_texture_mirror_clamp_to_edge*: bool

  GLAD_GL_ARB_texture_mirrored_repeat*: bool
  GL_MIRRORED_REPEAT_ARB* = 0x8370.GLenum

  GLAD_GL_ARB_texture_multisample*: bool

  GLAD_GL_ARB_texture_non_power_of_two*: bool

  GLAD_GL_ARB_texture_query_levels*: bool

  GLAD_GL_ARB_texture_query_lod*: bool

  GLAD_GL_ARB_texture_rectangle*: bool
  GL_TEXTURE_RECTANGLE_ARB* = 0x84F5.GLenum
  GL_TEXTURE_BINDING_RECTANGLE_ARB* = 0x84F6.GLenum
  GL_PROXY_TEXTURE_RECTANGLE_ARB* = 0x84F7.GLenum
  GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB* = 0x84F8.GLenum

  GLAD_GL_ARB_texture_rg*: bool

  GLAD_GL_ARB_texture_rgb10_a2ui*: bool

  GLAD_GL_ARB_texture_stencil8*: bool

  GLAD_GL_ARB_texture_storage*: bool

  GLAD_GL_ARB_texture_storage_multisample*: bool

  GLAD_GL_ARB_texture_swizzle*: bool

  GLAD_GL_ARB_texture_view*: bool

  GLAD_GL_ARB_timer_query*: bool

  GLAD_GL_ARB_transform_feedback2*: bool

  GLAD_GL_ARB_transform_feedback3*: bool

  GLAD_GL_ARB_transform_feedback_instanced*: bool

  GLAD_GL_ARB_transform_feedback_overflow_query*: bool
  GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB* = 0x82EC.GLenum
  GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB* = 0x82ED.GLenum

  GLAD_GL_ARB_transpose_matrix*: bool
  GL_TRANSPOSE_MODELVIEW_MATRIX_ARB* = 0x84E3.GLenum
  GL_TRANSPOSE_PROJECTION_MATRIX_ARB* = 0x84E4.GLenum
  GL_TRANSPOSE_TEXTURE_MATRIX_ARB* = 0x84E5.GLenum
  GL_TRANSPOSE_COLOR_MATRIX_ARB* = 0x84E6.GLenum

  GLAD_GL_ARB_uniform_buffer_object*: bool

  GLAD_GL_ARB_vertex_array_bgra*: bool

  GLAD_GL_ARB_vertex_array_object*: bool

  GLAD_GL_ARB_vertex_attrib_64bit*: bool

  GLAD_GL_ARB_vertex_attrib_binding*: bool

  GLAD_GL_ARB_vertex_blend*: bool
  GL_MAX_VERTEX_UNITS_ARB* = 0x86A4.GLenum
  GL_ACTIVE_VERTEX_UNITS_ARB* = 0x86A5.GLenum
  GL_WEIGHT_SUM_UNITY_ARB* = 0x86A6.GLenum
  GL_VERTEX_BLEND_ARB* = 0x86A7.GLenum
  GL_CURRENT_WEIGHT_ARB* = 0x86A8.GLenum
  GL_WEIGHT_ARRAY_TYPE_ARB* = 0x86A9.GLenum
  GL_WEIGHT_ARRAY_STRIDE_ARB* = 0x86AA.GLenum
  GL_WEIGHT_ARRAY_SIZE_ARB* = 0x86AB.GLenum
  GL_WEIGHT_ARRAY_POINTER_ARB* = 0x86AC.GLenum
  GL_WEIGHT_ARRAY_ARB* = 0x86AD.GLenum
  GL_MODELVIEW0_ARB* = 0x1700.GLenum
  GL_MODELVIEW1_ARB* = 0x850A.GLenum
  GL_MODELVIEW2_ARB* = 0x8722.GLenum
  GL_MODELVIEW3_ARB* = 0x8723.GLenum
  GL_MODELVIEW4_ARB* = 0x8724.GLenum
  GL_MODELVIEW5_ARB* = 0x8725.GLenum
  GL_MODELVIEW6_ARB* = 0x8726.GLenum
  GL_MODELVIEW7_ARB* = 0x8727.GLenum
  GL_MODELVIEW8_ARB* = 0x8728.GLenum
  GL_MODELVIEW9_ARB* = 0x8729.GLenum
  GL_MODELVIEW10_ARB* = 0x872A.GLenum
  GL_MODELVIEW11_ARB* = 0x872B.GLenum
  GL_MODELVIEW12_ARB* = 0x872C.GLenum
  GL_MODELVIEW13_ARB* = 0x872D.GLenum
  GL_MODELVIEW14_ARB* = 0x872E.GLenum
  GL_MODELVIEW15_ARB* = 0x872F.GLenum
  GL_MODELVIEW16_ARB* = 0x8730.GLenum
  GL_MODELVIEW17_ARB* = 0x8731.GLenum
  GL_MODELVIEW18_ARB* = 0x8732.GLenum
  GL_MODELVIEW19_ARB* = 0x8733.GLenum
  GL_MODELVIEW20_ARB* = 0x8734.GLenum
  GL_MODELVIEW21_ARB* = 0x8735.GLenum
  GL_MODELVIEW22_ARB* = 0x8736.GLenum
  GL_MODELVIEW23_ARB* = 0x8737.GLenum
  GL_MODELVIEW24_ARB* = 0x8738.GLenum
  GL_MODELVIEW25_ARB* = 0x8739.GLenum
  GL_MODELVIEW26_ARB* = 0x873A.GLenum
  GL_MODELVIEW27_ARB* = 0x873B.GLenum
  GL_MODELVIEW28_ARB* = 0x873C.GLenum
  GL_MODELVIEW29_ARB* = 0x873D.GLenum
  GL_MODELVIEW30_ARB* = 0x873E.GLenum
  GL_MODELVIEW31_ARB* = 0x873F.GLenum

  GLAD_GL_ARB_vertex_buffer_object*: bool
  GL_BUFFER_SIZE_ARB* = 0x8764.GLenum
  GL_BUFFER_USAGE_ARB* = 0x8765.GLenum
  GL_ARRAY_BUFFER_ARB* = 0x8892.GLenum
  GL_ELEMENT_ARRAY_BUFFER_ARB* = 0x8893.GLenum
  GL_ARRAY_BUFFER_BINDING_ARB* = 0x8894.GLenum
  GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB* = 0x8895.GLenum
  GL_VERTEX_ARRAY_BUFFER_BINDING_ARB* = 0x8896.GLenum
  GL_NORMAL_ARRAY_BUFFER_BINDING_ARB* = 0x8897.GLenum
  GL_COLOR_ARRAY_BUFFER_BINDING_ARB* = 0x8898.GLenum
  GL_INDEX_ARRAY_BUFFER_BINDING_ARB* = 0x8899.GLenum
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB* = 0x889A.GLenum
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB* = 0x889B.GLenum
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB* = 0x889C.GLenum
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB* = 0x889D.GLenum
  GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB* = 0x889E.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB* = 0x889F.GLenum
  GL_READ_ONLY_ARB* = 0x88B8.GLenum
  GL_WRITE_ONLY_ARB* = 0x88B9.GLenum
  GL_READ_WRITE_ARB* = 0x88BA.GLenum
  GL_BUFFER_ACCESS_ARB* = 0x88BB.GLenum
  GL_BUFFER_MAPPED_ARB* = 0x88BC.GLenum
  GL_BUFFER_MAP_POINTER_ARB* = 0x88BD.GLenum
  GL_STREAM_DRAW_ARB* = 0x88E0.GLenum
  GL_STREAM_READ_ARB* = 0x88E1.GLenum
  GL_STREAM_COPY_ARB* = 0x88E2.GLenum
  GL_STATIC_DRAW_ARB* = 0x88E4.GLenum
  GL_STATIC_READ_ARB* = 0x88E5.GLenum
  GL_STATIC_COPY_ARB* = 0x88E6.GLenum
  GL_DYNAMIC_DRAW_ARB* = 0x88E8.GLenum
  GL_DYNAMIC_READ_ARB* = 0x88E9.GLenum
  GL_DYNAMIC_COPY_ARB* = 0x88EA.GLenum

  GLAD_GL_ARB_vertex_program*: bool
  GL_COLOR_SUM_ARB* = 0x8458.GLenum
  GL_VERTEX_PROGRAM_ARB* = 0x8620.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB* = 0x8622.GLenum
  GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB* = 0x8623.GLenum
  GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB* = 0x8624.GLenum
  GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB* = 0x8625.GLenum
  GL_CURRENT_VERTEX_ATTRIB_ARB* = 0x8626.GLenum
  GL_VERTEX_PROGRAM_POINT_SIZE_ARB* = 0x8642.GLenum
  GL_VERTEX_PROGRAM_TWO_SIDE_ARB* = 0x8643.GLenum
  GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB* = 0x8645.GLenum
  GL_MAX_VERTEX_ATTRIBS_ARB* = 0x8869.GLenum
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB* = 0x886A.GLenum
  GL_PROGRAM_ADDRESS_REGISTERS_ARB* = 0x88B0.GLenum
  GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB* = 0x88B1.GLenum
  GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB* = 0x88B2.GLenum
  GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB* = 0x88B3.GLenum

  GLAD_GL_ARB_vertex_shader*: bool
  GL_VERTEX_SHADER_ARB* = 0x8B31.GLenum
  GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB* = 0x8B4A.GLenum
  GL_MAX_VARYING_FLOATS_ARB* = 0x8B4B.GLenum
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB* = 0x8B4C.GLenum
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB* = 0x8B4D.GLenum
  GL_OBJECT_ACTIVE_ATTRIBUTES_ARB* = 0x8B89.GLenum
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB* = 0x8B8A.GLenum

  GLAD_GL_ARB_vertex_type_10f_11f_11f_rev*: bool

  GLAD_GL_ARB_vertex_type_2_10_10_10_rev*: bool

  GLAD_GL_ARB_viewport_array*: bool

  GLAD_GL_ARB_window_pos*: bool

  GLAD_GL_ATI_draw_buffers*: bool
  GL_MAX_DRAW_BUFFERS_ATI* = 0x8824.GLenum
  GL_DRAW_BUFFER0_ATI* = 0x8825.GLenum
  GL_DRAW_BUFFER1_ATI* = 0x8826.GLenum
  GL_DRAW_BUFFER2_ATI* = 0x8827.GLenum
  GL_DRAW_BUFFER3_ATI* = 0x8828.GLenum
  GL_DRAW_BUFFER4_ATI* = 0x8829.GLenum
  GL_DRAW_BUFFER5_ATI* = 0x882A.GLenum
  GL_DRAW_BUFFER6_ATI* = 0x882B.GLenum
  GL_DRAW_BUFFER7_ATI* = 0x882C.GLenum
  GL_DRAW_BUFFER8_ATI* = 0x882D.GLenum
  GL_DRAW_BUFFER9_ATI* = 0x882E.GLenum
  GL_DRAW_BUFFER10_ATI* = 0x882F.GLenum
  GL_DRAW_BUFFER11_ATI* = 0x8830.GLenum
  GL_DRAW_BUFFER12_ATI* = 0x8831.GLenum
  GL_DRAW_BUFFER13_ATI* = 0x8832.GLenum
  GL_DRAW_BUFFER14_ATI* = 0x8833.GLenum
  GL_DRAW_BUFFER15_ATI* = 0x8834.GLenum

  GLAD_GL_ATI_element_array*: bool
  GL_ELEMENT_ARRAY_ATI* = 0x8768.GLenum
  GL_ELEMENT_ARRAY_TYPE_ATI* = 0x8769.GLenum
  GL_ELEMENT_ARRAY_POINTER_ATI* = 0x876A.GLenum

  GLAD_GL_ATI_envmap_bumpmap*: bool
  GL_BUMP_ROT_MATRIX_ATI* = 0x8775.GLenum
  GL_BUMP_ROT_MATRIX_SIZE_ATI* = 0x8776.GLenum
  GL_BUMP_NUM_TEX_UNITS_ATI* = 0x8777.GLenum
  GL_BUMP_TEX_UNITS_ATI* = 0x8778.GLenum
  GL_DUDV_ATI* = 0x8779.GLenum
  GL_DU8DV8_ATI* = 0x877A.GLenum
  GL_BUMP_ENVMAP_ATI* = 0x877B.GLenum
  GL_BUMP_TARGET_ATI* = 0x877C.GLenum

  GLAD_GL_ATI_fragment_shader*: bool
  GL_FRAGMENT_SHADER_ATI* = 0x8920.GLenum
  GL_REG_0_ATI* = 0x8921.GLenum
  GL_REG_1_ATI* = 0x8922.GLenum
  GL_REG_2_ATI* = 0x8923.GLenum
  GL_REG_3_ATI* = 0x8924.GLenum
  GL_REG_4_ATI* = 0x8925.GLenum
  GL_REG_5_ATI* = 0x8926.GLenum
  GL_REG_6_ATI* = 0x8927.GLenum
  GL_REG_7_ATI* = 0x8928.GLenum
  GL_REG_8_ATI* = 0x8929.GLenum
  GL_REG_9_ATI* = 0x892A.GLenum
  GL_REG_10_ATI* = 0x892B.GLenum
  GL_REG_11_ATI* = 0x892C.GLenum
  GL_REG_12_ATI* = 0x892D.GLenum
  GL_REG_13_ATI* = 0x892E.GLenum
  GL_REG_14_ATI* = 0x892F.GLenum
  GL_REG_15_ATI* = 0x8930.GLenum
  GL_REG_16_ATI* = 0x8931.GLenum
  GL_REG_17_ATI* = 0x8932.GLenum
  GL_REG_18_ATI* = 0x8933.GLenum
  GL_REG_19_ATI* = 0x8934.GLenum
  GL_REG_20_ATI* = 0x8935.GLenum
  GL_REG_21_ATI* = 0x8936.GLenum
  GL_REG_22_ATI* = 0x8937.GLenum
  GL_REG_23_ATI* = 0x8938.GLenum
  GL_REG_24_ATI* = 0x8939.GLenum
  GL_REG_25_ATI* = 0x893A.GLenum
  GL_REG_26_ATI* = 0x893B.GLenum
  GL_REG_27_ATI* = 0x893C.GLenum
  GL_REG_28_ATI* = 0x893D.GLenum
  GL_REG_29_ATI* = 0x893E.GLenum
  GL_REG_30_ATI* = 0x893F.GLenum
  GL_REG_31_ATI* = 0x8940.GLenum
  GL_CON_0_ATI* = 0x8941.GLenum
  GL_CON_1_ATI* = 0x8942.GLenum
  GL_CON_2_ATI* = 0x8943.GLenum
  GL_CON_3_ATI* = 0x8944.GLenum
  GL_CON_4_ATI* = 0x8945.GLenum
  GL_CON_5_ATI* = 0x8946.GLenum
  GL_CON_6_ATI* = 0x8947.GLenum
  GL_CON_7_ATI* = 0x8948.GLenum
  GL_CON_8_ATI* = 0x8949.GLenum
  GL_CON_9_ATI* = 0x894A.GLenum
  GL_CON_10_ATI* = 0x894B.GLenum
  GL_CON_11_ATI* = 0x894C.GLenum
  GL_CON_12_ATI* = 0x894D.GLenum
  GL_CON_13_ATI* = 0x894E.GLenum
  GL_CON_14_ATI* = 0x894F.GLenum
  GL_CON_15_ATI* = 0x8950.GLenum
  GL_CON_16_ATI* = 0x8951.GLenum
  GL_CON_17_ATI* = 0x8952.GLenum
  GL_CON_18_ATI* = 0x8953.GLenum
  GL_CON_19_ATI* = 0x8954.GLenum
  GL_CON_20_ATI* = 0x8955.GLenum
  GL_CON_21_ATI* = 0x8956.GLenum
  GL_CON_22_ATI* = 0x8957.GLenum
  GL_CON_23_ATI* = 0x8958.GLenum
  GL_CON_24_ATI* = 0x8959.GLenum
  GL_CON_25_ATI* = 0x895A.GLenum
  GL_CON_26_ATI* = 0x895B.GLenum
  GL_CON_27_ATI* = 0x895C.GLenum
  GL_CON_28_ATI* = 0x895D.GLenum
  GL_CON_29_ATI* = 0x895E.GLenum
  GL_CON_30_ATI* = 0x895F.GLenum
  GL_CON_31_ATI* = 0x8960.GLenum
  GL_MOV_ATI* = 0x8961.GLenum
  GL_ADD_ATI* = 0x8963.GLenum
  GL_MUL_ATI* = 0x8964.GLenum
  GL_SUB_ATI* = 0x8965.GLenum
  GL_DOT3_ATI* = 0x8966.GLenum
  GL_DOT4_ATI* = 0x8967.GLenum
  GL_MAD_ATI* = 0x8968.GLenum
  GL_LERP_ATI* = 0x8969.GLenum
  GL_CND_ATI* = 0x896A.GLenum
  GL_CND0_ATI* = 0x896B.GLenum
  GL_DOT2_ADD_ATI* = 0x896C.GLenum
  GL_SECONDARY_INTERPOLATOR_ATI* = 0x896D.GLenum
  GL_NUM_FRAGMENT_REGISTERS_ATI* = 0x896E.GLenum
  GL_NUM_FRAGMENT_CONSTANTS_ATI* = 0x896F.GLenum
  GL_NUM_PASSES_ATI* = 0x8970.GLenum
  GL_NUM_INSTRUCTIONS_PER_PASS_ATI* = 0x8971.GLenum
  GL_NUM_INSTRUCTIONS_TOTAL_ATI* = 0x8972.GLenum
  GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI* = 0x8973.GLenum
  GL_NUM_LOOPBACK_COMPONENTS_ATI* = 0x8974.GLenum
  GL_COLOR_ALPHA_PAIRING_ATI* = 0x8975.GLenum
  GL_SWIZZLE_STR_ATI* = 0x8976.GLenum
  GL_SWIZZLE_STQ_ATI* = 0x8977.GLenum
  GL_SWIZZLE_STR_DR_ATI* = 0x8978.GLenum
  GL_SWIZZLE_STQ_DQ_ATI* = 0x8979.GLenum
  GL_SWIZZLE_STRQ_ATI* = 0x897A.GLenum
  GL_SWIZZLE_STRQ_DQ_ATI* = 0x897B.GLenum
  GL_RED_BIT_ATI* = 0x00000001.GLbitfield
  GL_GREEN_BIT_ATI* = 0x00000002.GLbitfield
  GL_BLUE_BIT_ATI* = 0x00000004.GLbitfield
  GL_2X_BIT_ATI* = 0x00000001.GLbitfield
  GL_4X_BIT_ATI* = 0x00000002.GLbitfield
  GL_8X_BIT_ATI* = 0x00000004.GLbitfield
  GL_HALF_BIT_ATI* = 0x00000008.GLbitfield
  GL_QUARTER_BIT_ATI* = 0x00000010.GLbitfield
  GL_EIGHTH_BIT_ATI* = 0x00000020.GLbitfield
  GL_SATURATE_BIT_ATI* = 0x00000040.GLbitfield
  GL_COMP_BIT_ATI* = 0x00000002.GLbitfield
  GL_NEGATE_BIT_ATI* = 0x00000004.GLbitfield
  GL_BIAS_BIT_ATI* = 0x00000008.GLbitfield

  GLAD_GL_ATI_map_object_buffer*: bool

  GLAD_GL_ATI_meminfo*: bool
  GL_VBO_FREE_MEMORY_ATI* = 0x87FB.GLenum
  GL_TEXTURE_FREE_MEMORY_ATI* = 0x87FC.GLenum
  GL_RENDERBUFFER_FREE_MEMORY_ATI* = 0x87FD.GLenum

  GLAD_GL_ATI_pixel_format_float*: bool
  GL_RGBA_FLOAT_MODE_ATI* = 0x8820.GLenum
  GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI* = 0x8835.GLenum

  GLAD_GL_ATI_pn_triangles*: bool
  GL_PN_TRIANGLES_ATI* = 0x87F0.GLenum
  GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI* = 0x87F1.GLenum
  GL_PN_TRIANGLES_POINT_MODE_ATI* = 0x87F2.GLenum
  GL_PN_TRIANGLES_NORMAL_MODE_ATI* = 0x87F3.GLenum
  GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI* = 0x87F4.GLenum
  GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI* = 0x87F5.GLenum
  GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI* = 0x87F6.GLenum
  GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI* = 0x87F7.GLenum
  GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI* = 0x87F8.GLenum

  GLAD_GL_ATI_separate_stencil*: bool
  GL_STENCIL_BACK_FUNC_ATI* = 0x8800.GLenum
  GL_STENCIL_BACK_FAIL_ATI* = 0x8801.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI* = 0x8802.GLenum
  GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI* = 0x8803.GLenum

  GLAD_GL_ATI_text_fragment_shader*: bool
  GL_TEXT_FRAGMENT_SHADER_ATI* = 0x8200.GLenum

  GLAD_GL_ATI_texture_env_combine3*: bool
  GL_MODULATE_ADD_ATI* = 0x8744.GLenum
  GL_MODULATE_SIGNED_ADD_ATI* = 0x8745.GLenum
  GL_MODULATE_SUBTRACT_ATI* = 0x8746.GLenum

  GLAD_GL_ATI_texture_float*: bool
  GL_RGBA_FLOAT32_ATI* = 0x8814.GLenum
  GL_RGB_FLOAT32_ATI* = 0x8815.GLenum
  GL_ALPHA_FLOAT32_ATI* = 0x8816.GLenum
  GL_INTENSITY_FLOAT32_ATI* = 0x8817.GLenum
  GL_LUMINANCE_FLOAT32_ATI* = 0x8818.GLenum
  GL_LUMINANCE_ALPHA_FLOAT32_ATI* = 0x8819.GLenum
  GL_RGBA_FLOAT16_ATI* = 0x881A.GLenum
  GL_RGB_FLOAT16_ATI* = 0x881B.GLenum
  GL_ALPHA_FLOAT16_ATI* = 0x881C.GLenum
  GL_INTENSITY_FLOAT16_ATI* = 0x881D.GLenum
  GL_LUMINANCE_FLOAT16_ATI* = 0x881E.GLenum
  GL_LUMINANCE_ALPHA_FLOAT16_ATI* = 0x881F.GLenum

  GLAD_GL_ATI_texture_mirror_once*: bool
  GL_MIRROR_CLAMP_ATI* = 0x8742.GLenum
  GL_MIRROR_CLAMP_TO_EDGE_ATI* = 0x8743.GLenum

  GLAD_GL_ATI_vertex_array_object*: bool
  GL_STATIC_ATI* = 0x8760.GLenum
  GL_DYNAMIC_ATI* = 0x8761.GLenum
  GL_PRESERVE_ATI* = 0x8762.GLenum
  GL_DISCARD_ATI* = 0x8763.GLenum
  GL_OBJECT_BUFFER_SIZE_ATI* = 0x8764.GLenum
  GL_OBJECT_BUFFER_USAGE_ATI* = 0x8765.GLenum
  GL_ARRAY_OBJECT_BUFFER_ATI* = 0x8766.GLenum
  GL_ARRAY_OBJECT_OFFSET_ATI* = 0x8767.GLenum

  GLAD_GL_ATI_vertex_attrib_array_object*: bool

  GLAD_GL_ATI_vertex_streams*: bool
  GL_MAX_VERTEX_STREAMS_ATI* = 0x876B.GLenum
  GL_VERTEX_STREAM0_ATI* = 0x876C.GLenum
  GL_VERTEX_STREAM1_ATI* = 0x876D.GLenum
  GL_VERTEX_STREAM2_ATI* = 0x876E.GLenum
  GL_VERTEX_STREAM3_ATI* = 0x876F.GLenum
  GL_VERTEX_STREAM4_ATI* = 0x8770.GLenum
  GL_VERTEX_STREAM5_ATI* = 0x8771.GLenum
  GL_VERTEX_STREAM6_ATI* = 0x8772.GLenum
  GL_VERTEX_STREAM7_ATI* = 0x8773.GLenum
  GL_VERTEX_SOURCE_ATI* = 0x8774.GLenum

  GLAD_GL_EXT_422_pixels*: bool
  GL_422_EXT* = 0x80CC.GLenum
  GL_422_REV_EXT* = 0x80CD.GLenum
  GL_422_AVERAGE_EXT* = 0x80CE.GLenum
  GL_422_REV_AVERAGE_EXT* = 0x80CF.GLenum

  GLAD_GL_EXT_EGL_image_storage*: bool

  GLAD_GL_EXT_EGL_sync*: bool

  GLAD_GL_EXT_abgr*: bool
  GL_ABGR_EXT* = 0x8000.GLenum

  GLAD_GL_EXT_bgra*: bool
  GL_BGR_EXT* = 0x80E0.GLenum
  GL_BGRA_EXT* = 0x80E1.GLenum

  GLAD_GL_EXT_bindable_uniform*: bool
  GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT* = 0x8DE2.GLenum
  GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT* = 0x8DE3.GLenum
  GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT* = 0x8DE4.GLenum
  GL_MAX_BINDABLE_UNIFORM_SIZE_EXT* = 0x8DED.GLenum
  GL_UNIFORM_BUFFER_EXT* = 0x8DEE.GLenum
  GL_UNIFORM_BUFFER_BINDING_EXT* = 0x8DEF.GLenum

  GLAD_GL_EXT_blend_color*: bool
  GL_CONSTANT_COLOR_EXT* = 0x8001.GLenum
  GL_ONE_MINUS_CONSTANT_COLOR_EXT* = 0x8002.GLenum
  GL_CONSTANT_ALPHA_EXT* = 0x8003.GLenum
  GL_ONE_MINUS_CONSTANT_ALPHA_EXT* = 0x8004.GLenum
  GL_BLEND_COLOR_EXT* = 0x8005.GLenum

  GLAD_GL_EXT_blend_equation_separate*: bool
  GL_BLEND_EQUATION_RGB_EXT* = 0x8009.GLenum
  GL_BLEND_EQUATION_ALPHA_EXT* = 0x883D.GLenum

  GLAD_GL_EXT_blend_func_separate*: bool
  GL_BLEND_DST_RGB_EXT* = 0x80C8.GLenum
  GL_BLEND_SRC_RGB_EXT* = 0x80C9.GLenum
  GL_BLEND_DST_ALPHA_EXT* = 0x80CA.GLenum
  GL_BLEND_SRC_ALPHA_EXT* = 0x80CB.GLenum

  GLAD_GL_EXT_blend_logic_op*: bool

  GLAD_GL_EXT_blend_minmax*: bool
  GL_MIN_EXT* = 0x8007.GLenum
  GL_MAX_EXT* = 0x8008.GLenum
  GL_FUNC_ADD_EXT* = 0x8006.GLenum
  GL_BLEND_EQUATION_EXT* = 0x8009.GLenum

  GLAD_GL_EXT_blend_subtract*: bool
  GL_FUNC_SUBTRACT_EXT* = 0x800A.GLenum
  GL_FUNC_REVERSE_SUBTRACT_EXT* = 0x800B.GLenum

  GLAD_GL_EXT_clip_volume_hint*: bool
  GL_CLIP_VOLUME_CLIPPING_HINT_EXT* = 0x80F0.GLenum

  GLAD_GL_EXT_cmyka*: bool
  GL_CMYK_EXT* = 0x800C.GLenum
  GL_CMYKA_EXT* = 0x800D.GLenum
  GL_PACK_CMYK_HINT_EXT* = 0x800E.GLenum
  GL_UNPACK_CMYK_HINT_EXT* = 0x800F.GLenum

  GLAD_GL_EXT_color_subtable*: bool

  GLAD_GL_EXT_compiled_vertex_array*: bool
  GL_ARRAY_ELEMENT_LOCK_FIRST_EXT* = 0x81A8.GLenum
  GL_ARRAY_ELEMENT_LOCK_COUNT_EXT* = 0x81A9.GLenum

  GLAD_GL_EXT_convolution*: bool
  GL_CONVOLUTION_1D_EXT* = 0x8010.GLenum
  GL_CONVOLUTION_2D_EXT* = 0x8011.GLenum
  GL_SEPARABLE_2D_EXT* = 0x8012.GLenum
  GL_CONVOLUTION_BORDER_MODE_EXT* = 0x8013.GLenum
  GL_CONVOLUTION_FILTER_SCALE_EXT* = 0x8014.GLenum
  GL_CONVOLUTION_FILTER_BIAS_EXT* = 0x8015.GLenum
  GL_REDUCE_EXT* = 0x8016.GLenum
  GL_CONVOLUTION_FORMAT_EXT* = 0x8017.GLenum
  GL_CONVOLUTION_WIDTH_EXT* = 0x8018.GLenum
  GL_CONVOLUTION_HEIGHT_EXT* = 0x8019.GLenum
  GL_MAX_CONVOLUTION_WIDTH_EXT* = 0x801A.GLenum
  GL_MAX_CONVOLUTION_HEIGHT_EXT* = 0x801B.GLenum
  GL_POST_CONVOLUTION_RED_SCALE_EXT* = 0x801C.GLenum
  GL_POST_CONVOLUTION_GREEN_SCALE_EXT* = 0x801D.GLenum
  GL_POST_CONVOLUTION_BLUE_SCALE_EXT* = 0x801E.GLenum
  GL_POST_CONVOLUTION_ALPHA_SCALE_EXT* = 0x801F.GLenum
  GL_POST_CONVOLUTION_RED_BIAS_EXT* = 0x8020.GLenum
  GL_POST_CONVOLUTION_GREEN_BIAS_EXT* = 0x8021.GLenum
  GL_POST_CONVOLUTION_BLUE_BIAS_EXT* = 0x8022.GLenum
  GL_POST_CONVOLUTION_ALPHA_BIAS_EXT* = 0x8023.GLenum

  GLAD_GL_EXT_coordinate_frame*: bool
  GL_TANGENT_ARRAY_EXT* = 0x8439.GLenum
  GL_BINORMAL_ARRAY_EXT* = 0x843A.GLenum
  GL_CURRENT_TANGENT_EXT* = 0x843B.GLenum
  GL_CURRENT_BINORMAL_EXT* = 0x843C.GLenum
  GL_TANGENT_ARRAY_TYPE_EXT* = 0x843E.GLenum
  GL_TANGENT_ARRAY_STRIDE_EXT* = 0x843F.GLenum
  GL_BINORMAL_ARRAY_TYPE_EXT* = 0x8440.GLenum
  GL_BINORMAL_ARRAY_STRIDE_EXT* = 0x8441.GLenum
  GL_TANGENT_ARRAY_POINTER_EXT* = 0x8442.GLenum
  GL_BINORMAL_ARRAY_POINTER_EXT* = 0x8443.GLenum
  GL_MAP1_TANGENT_EXT* = 0x8444.GLenum
  GL_MAP2_TANGENT_EXT* = 0x8445.GLenum
  GL_MAP1_BINORMAL_EXT* = 0x8446.GLenum
  GL_MAP2_BINORMAL_EXT* = 0x8447.GLenum

  GLAD_GL_EXT_copy_texture*: bool

  GLAD_GL_EXT_cull_vertex*: bool
  GL_CULL_VERTEX_EXT* = 0x81AA.GLenum
  GL_CULL_VERTEX_EYE_POSITION_EXT* = 0x81AB.GLenum
  GL_CULL_VERTEX_OBJECT_POSITION_EXT* = 0x81AC.GLenum

  GLAD_GL_EXT_debug_label*: bool
  GL_PROGRAM_PIPELINE_OBJECT_EXT* = 0x8A4F.GLenum
  GL_PROGRAM_OBJECT_EXT* = 0x8B40.GLenum
  GL_SHADER_OBJECT_EXT* = 0x8B48.GLenum
  GL_BUFFER_OBJECT_EXT* = 0x9151.GLenum
  GL_QUERY_OBJECT_EXT* = 0x9153.GLenum
  GL_VERTEX_ARRAY_OBJECT_EXT* = 0x9154.GLenum

  GLAD_GL_EXT_debug_marker*: bool

  GLAD_GL_EXT_depth_bounds_test*: bool
  GL_DEPTH_BOUNDS_TEST_EXT* = 0x8890.GLenum
  GL_DEPTH_BOUNDS_EXT* = 0x8891.GLenum

  GLAD_GL_EXT_direct_state_access*: bool
  GL_PROGRAM_MATRIX_EXT* = 0x8E2D.GLenum
  GL_TRANSPOSE_PROGRAM_MATRIX_EXT* = 0x8E2E.GLenum
  GL_PROGRAM_MATRIX_STACK_DEPTH_EXT* = 0x8E2F.GLenum

  GLAD_GL_EXT_draw_buffers2*: bool

  GLAD_GL_EXT_draw_instanced*: bool

  GLAD_GL_EXT_draw_range_elements*: bool
  GL_MAX_ELEMENTS_VERTICES_EXT* = 0x80E8.GLenum
  GL_MAX_ELEMENTS_INDICES_EXT* = 0x80E9.GLenum

  GLAD_GL_EXT_external_buffer*: bool

  GLAD_GL_EXT_fog_coord*: bool
  GL_FOG_COORDINATE_SOURCE_EXT* = 0x8450.GLenum
  GL_FOG_COORDINATE_EXT* = 0x8451.GLenum
  GL_FRAGMENT_DEPTH_EXT* = 0x8452.GLenum
  GL_CURRENT_FOG_COORDINATE_EXT* = 0x8453.GLenum
  GL_FOG_COORDINATE_ARRAY_TYPE_EXT* = 0x8454.GLenum
  GL_FOG_COORDINATE_ARRAY_STRIDE_EXT* = 0x8455.GLenum
  GL_FOG_COORDINATE_ARRAY_POINTER_EXT* = 0x8456.GLenum
  GL_FOG_COORDINATE_ARRAY_EXT* = 0x8457.GLenum

  GLAD_GL_EXT_framebuffer_blit*: bool
  GL_READ_FRAMEBUFFER_EXT* = 0x8CA8.GLenum
  GL_DRAW_FRAMEBUFFER_EXT* = 0x8CA9.GLenum
  GL_DRAW_FRAMEBUFFER_BINDING_EXT* = 0x8CA6.GLenum
  GL_READ_FRAMEBUFFER_BINDING_EXT* = 0x8CAA.GLenum

  GLAD_GL_EXT_framebuffer_multisample*: bool
  GL_RENDERBUFFER_SAMPLES_EXT* = 0x8CAB.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT* = 0x8D56.GLenum
  GL_MAX_SAMPLES_EXT* = 0x8D57.GLenum

  GLAD_GL_EXT_framebuffer_multisample_blit_scaled*: bool
  GL_SCALED_RESOLVE_FASTEST_EXT* = 0x90BA.GLenum
  GL_SCALED_RESOLVE_NICEST_EXT* = 0x90BB.GLenum

  GLAD_GL_EXT_framebuffer_object*: bool
  GL_INVALID_FRAMEBUFFER_OPERATION_EXT* = 0x0506.GLenum
  GL_MAX_RENDERBUFFER_SIZE_EXT* = 0x84E8.GLenum
  GL_FRAMEBUFFER_BINDING_EXT* = 0x8CA6.GLenum
  GL_RENDERBUFFER_BINDING_EXT* = 0x8CA7.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT* = 0x8CD0.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT* = 0x8CD1.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT* = 0x8CD2.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT* = 0x8CD3.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT* = 0x8CD4.GLenum
  GL_FRAMEBUFFER_COMPLETE_EXT* = 0x8CD5.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT* = 0x8CD6.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT* = 0x8CD7.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT* = 0x8CD9.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT* = 0x8CDA.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT* = 0x8CDB.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT* = 0x8CDC.GLenum
  GL_FRAMEBUFFER_UNSUPPORTED_EXT* = 0x8CDD.GLenum
  GL_MAX_COLOR_ATTACHMENTS_EXT* = 0x8CDF.GLenum
  GL_COLOR_ATTACHMENT0_EXT* = 0x8CE0.GLenum
  GL_COLOR_ATTACHMENT1_EXT* = 0x8CE1.GLenum
  GL_COLOR_ATTACHMENT2_EXT* = 0x8CE2.GLenum
  GL_COLOR_ATTACHMENT3_EXT* = 0x8CE3.GLenum
  GL_COLOR_ATTACHMENT4_EXT* = 0x8CE4.GLenum
  GL_COLOR_ATTACHMENT5_EXT* = 0x8CE5.GLenum
  GL_COLOR_ATTACHMENT6_EXT* = 0x8CE6.GLenum
  GL_COLOR_ATTACHMENT7_EXT* = 0x8CE7.GLenum
  GL_COLOR_ATTACHMENT8_EXT* = 0x8CE8.GLenum
  GL_COLOR_ATTACHMENT9_EXT* = 0x8CE9.GLenum
  GL_COLOR_ATTACHMENT10_EXT* = 0x8CEA.GLenum
  GL_COLOR_ATTACHMENT11_EXT* = 0x8CEB.GLenum
  GL_COLOR_ATTACHMENT12_EXT* = 0x8CEC.GLenum
  GL_COLOR_ATTACHMENT13_EXT* = 0x8CED.GLenum
  GL_COLOR_ATTACHMENT14_EXT* = 0x8CEE.GLenum
  GL_COLOR_ATTACHMENT15_EXT* = 0x8CEF.GLenum
  GL_DEPTH_ATTACHMENT_EXT* = 0x8D00.GLenum
  GL_STENCIL_ATTACHMENT_EXT* = 0x8D20.GLenum
  GL_FRAMEBUFFER_EXT* = 0x8D40.GLenum
  GL_RENDERBUFFER_EXT* = 0x8D41.GLenum
  GL_RENDERBUFFER_WIDTH_EXT* = 0x8D42.GLenum
  GL_RENDERBUFFER_HEIGHT_EXT* = 0x8D43.GLenum
  GL_RENDERBUFFER_INTERNAL_FORMAT_EXT* = 0x8D44.GLenum
  GL_STENCIL_INDEX1_EXT* = 0x8D46.GLenum
  GL_STENCIL_INDEX4_EXT* = 0x8D47.GLenum
  GL_STENCIL_INDEX8_EXT* = 0x8D48.GLenum
  GL_STENCIL_INDEX16_EXT* = 0x8D49.GLenum
  GL_RENDERBUFFER_RED_SIZE_EXT* = 0x8D50.GLenum
  GL_RENDERBUFFER_GREEN_SIZE_EXT* = 0x8D51.GLenum
  GL_RENDERBUFFER_BLUE_SIZE_EXT* = 0x8D52.GLenum
  GL_RENDERBUFFER_ALPHA_SIZE_EXT* = 0x8D53.GLenum
  GL_RENDERBUFFER_DEPTH_SIZE_EXT* = 0x8D54.GLenum
  GL_RENDERBUFFER_STENCIL_SIZE_EXT* = 0x8D55.GLenum

  GLAD_GL_EXT_framebuffer_sRGB*: bool
  GL_FRAMEBUFFER_SRGB_EXT* = 0x8DB9.GLenum
  GL_FRAMEBUFFER_SRGB_CAPABLE_EXT* = 0x8DBA.GLenum

  GLAD_GL_EXT_geometry_shader4*: bool
  GL_GEOMETRY_SHADER_EXT* = 0x8DD9.GLenum
  GL_GEOMETRY_VERTICES_OUT_EXT* = 0x8DDA.GLenum
  GL_GEOMETRY_INPUT_TYPE_EXT* = 0x8DDB.GLenum
  GL_GEOMETRY_OUTPUT_TYPE_EXT* = 0x8DDC.GLenum
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT* = 0x8C29.GLenum
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT* = 0x8DDD.GLenum
  GL_MAX_VERTEX_VARYING_COMPONENTS_EXT* = 0x8DDE.GLenum
  GL_MAX_VARYING_COMPONENTS_EXT* = 0x8B4B.GLenum
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT* = 0x8DDF.GLenum
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT* = 0x8DE0.GLenum
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT* = 0x8DE1.GLenum
  GL_LINES_ADJACENCY_EXT* = 0x000A.GLenum
  GL_LINE_STRIP_ADJACENCY_EXT* = 0x000B.GLenum
  GL_TRIANGLES_ADJACENCY_EXT* = 0x000C.GLenum
  GL_TRIANGLE_STRIP_ADJACENCY_EXT* = 0x000D.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT* = 0x8DA8.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT* = 0x8DA9.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT* = 0x8DA7.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT* = 0x8CD4.GLenum
  GL_PROGRAM_POINT_SIZE_EXT* = 0x8642.GLenum

  GLAD_GL_EXT_gpu_program_parameters*: bool

  GLAD_GL_EXT_gpu_shader4*: bool
  GL_SAMPLER_1D_ARRAY_EXT* = 0x8DC0.GLenum
  GL_SAMPLER_2D_ARRAY_EXT* = 0x8DC1.GLenum
  GL_SAMPLER_BUFFER_EXT* = 0x8DC2.GLenum
  GL_SAMPLER_1D_ARRAY_SHADOW_EXT* = 0x8DC3.GLenum
  GL_SAMPLER_2D_ARRAY_SHADOW_EXT* = 0x8DC4.GLenum
  GL_SAMPLER_CUBE_SHADOW_EXT* = 0x8DC5.GLenum
  GL_UNSIGNED_INT_VEC2_EXT* = 0x8DC6.GLenum
  GL_UNSIGNED_INT_VEC3_EXT* = 0x8DC7.GLenum
  GL_UNSIGNED_INT_VEC4_EXT* = 0x8DC8.GLenum
  GL_INT_SAMPLER_1D_EXT* = 0x8DC9.GLenum
  GL_INT_SAMPLER_2D_EXT* = 0x8DCA.GLenum
  GL_INT_SAMPLER_3D_EXT* = 0x8DCB.GLenum
  GL_INT_SAMPLER_CUBE_EXT* = 0x8DCC.GLenum
  GL_INT_SAMPLER_2D_RECT_EXT* = 0x8DCD.GLenum
  GL_INT_SAMPLER_1D_ARRAY_EXT* = 0x8DCE.GLenum
  GL_INT_SAMPLER_2D_ARRAY_EXT* = 0x8DCF.GLenum
  GL_INT_SAMPLER_BUFFER_EXT* = 0x8DD0.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D_EXT* = 0x8DD1.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_EXT* = 0x8DD2.GLenum
  GL_UNSIGNED_INT_SAMPLER_3D_EXT* = 0x8DD3.GLenum
  GL_UNSIGNED_INT_SAMPLER_CUBE_EXT* = 0x8DD4.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT* = 0x8DD5.GLenum
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT* = 0x8DD6.GLenum
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT* = 0x8DD7.GLenum
  GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT* = 0x8DD8.GLenum
  GL_MIN_PROGRAM_TEXEL_OFFSET_EXT* = 0x8904.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET_EXT* = 0x8905.GLenum
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT* = 0x88FD.GLenum

  GLAD_GL_EXT_histogram*: bool
  GL_HISTOGRAM_EXT* = 0x8024.GLenum
  GL_PROXY_HISTOGRAM_EXT* = 0x8025.GLenum
  GL_HISTOGRAM_WIDTH_EXT* = 0x8026.GLenum
  GL_HISTOGRAM_FORMAT_EXT* = 0x8027.GLenum
  GL_HISTOGRAM_RED_SIZE_EXT* = 0x8028.GLenum
  GL_HISTOGRAM_GREEN_SIZE_EXT* = 0x8029.GLenum
  GL_HISTOGRAM_BLUE_SIZE_EXT* = 0x802A.GLenum
  GL_HISTOGRAM_ALPHA_SIZE_EXT* = 0x802B.GLenum
  GL_HISTOGRAM_LUMINANCE_SIZE_EXT* = 0x802C.GLenum
  GL_HISTOGRAM_SINK_EXT* = 0x802D.GLenum
  GL_MINMAX_EXT* = 0x802E.GLenum
  GL_MINMAX_FORMAT_EXT* = 0x802F.GLenum
  GL_MINMAX_SINK_EXT* = 0x8030.GLenum
  GL_TABLE_TOO_LARGE_EXT* = 0x8031.GLenum

  GLAD_GL_EXT_index_array_formats*: bool
  GL_IUI_V2F_EXT* = 0x81AD.GLenum
  GL_IUI_V3F_EXT* = 0x81AE.GLenum
  GL_IUI_N3F_V2F_EXT* = 0x81AF.GLenum
  GL_IUI_N3F_V3F_EXT* = 0x81B0.GLenum
  GL_T2F_IUI_V2F_EXT* = 0x81B1.GLenum
  GL_T2F_IUI_V3F_EXT* = 0x81B2.GLenum
  GL_T2F_IUI_N3F_V2F_EXT* = 0x81B3.GLenum
  GL_T2F_IUI_N3F_V3F_EXT* = 0x81B4.GLenum

  GLAD_GL_EXT_index_func*: bool
  GL_INDEX_TEST_EXT* = 0x81B5.GLenum
  GL_INDEX_TEST_FUNC_EXT* = 0x81B6.GLenum
  GL_INDEX_TEST_REF_EXT* = 0x81B7.GLenum

  GLAD_GL_EXT_index_material*: bool
  GL_INDEX_MATERIAL_EXT* = 0x81B8.GLenum
  GL_INDEX_MATERIAL_PARAMETER_EXT* = 0x81B9.GLenum
  GL_INDEX_MATERIAL_FACE_EXT* = 0x81BA.GLenum

  GLAD_GL_EXT_index_texture*: bool

  GLAD_GL_EXT_light_texture*: bool
  GL_FRAGMENT_MATERIAL_EXT* = 0x8349.GLenum
  GL_FRAGMENT_NORMAL_EXT* = 0x834A.GLenum
  GL_FRAGMENT_COLOR_EXT* = 0x834C.GLenum
  GL_ATTENUATION_EXT* = 0x834D.GLenum
  GL_SHADOW_ATTENUATION_EXT* = 0x834E.GLenum
  GL_TEXTURE_APPLICATION_MODE_EXT* = 0x834F.GLenum
  GL_TEXTURE_LIGHT_EXT* = 0x8350.GLenum
  GL_TEXTURE_MATERIAL_FACE_EXT* = 0x8351.GLenum
  GL_TEXTURE_MATERIAL_PARAMETER_EXT* = 0x8352.GLenum

  GLAD_GL_EXT_memory_object*: bool
  GL_TEXTURE_TILING_EXT* = 0x9580.GLenum
  GL_DEDICATED_MEMORY_OBJECT_EXT* = 0x9581.GLenum
  GL_PROTECTED_MEMORY_OBJECT_EXT* = 0x959B.GLenum
  GL_NUM_TILING_TYPES_EXT* = 0x9582.GLenum
  GL_TILING_TYPES_EXT* = 0x9583.GLenum
  GL_OPTIMAL_TILING_EXT* = 0x9584.GLenum
  GL_LINEAR_TILING_EXT* = 0x9585.GLenum
  GL_NUM_DEVICE_UUIDS_EXT* = 0x9596.GLenum
  GL_DEVICE_UUID_EXT* = 0x9597.GLenum
  GL_DRIVER_UUID_EXT* = 0x9598.GLenum

  GLAD_GL_EXT_memory_object_fd*: bool
  GL_HANDLE_TYPE_OPAQUE_FD_EXT* = 0x9586.GLenum

  GLAD_GL_EXT_memory_object_win32*: bool
  GL_HANDLE_TYPE_OPAQUE_WIN32_EXT* = 0x9587.GLenum
  GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT* = 0x9588.GLenum
  GL_DEVICE_LUID_EXT* = 0x9599.GLenum
  GL_DEVICE_NODE_MASK_EXT* = 0x959A.GLenum
  GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT* = 0x9589.GLenum
  GL_HANDLE_TYPE_D3D12_RESOURCE_EXT* = 0x958A.GLenum
  GL_HANDLE_TYPE_D3D11_IMAGE_EXT* = 0x958B.GLenum
  GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT* = 0x958C.GLenum

  GLAD_GL_EXT_misc_attribute*: bool

  GLAD_GL_EXT_multi_draw_arrays*: bool

  GLAD_GL_EXT_multisample*: bool
  GL_MULTISAMPLE_EXT* = 0x809D.GLenum
  GL_SAMPLE_ALPHA_TO_MASK_EXT* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_ONE_EXT* = 0x809F.GLenum
  GL_SAMPLE_MASK_EXT* = 0x80A0.GLenum
  GL_1PASS_EXT* = 0x80A1.GLenum
  GL_2PASS_0_EXT* = 0x80A2.GLenum
  GL_2PASS_1_EXT* = 0x80A3.GLenum
  GL_4PASS_0_EXT* = 0x80A4.GLenum
  GL_4PASS_1_EXT* = 0x80A5.GLenum
  GL_4PASS_2_EXT* = 0x80A6.GLenum
  GL_4PASS_3_EXT* = 0x80A7.GLenum
  GL_SAMPLE_BUFFERS_EXT* = 0x80A8.GLenum
  GL_SAMPLES_EXT* = 0x80A9.GLenum
  GL_SAMPLE_MASK_VALUE_EXT* = 0x80AA.GLenum
  GL_SAMPLE_MASK_INVERT_EXT* = 0x80AB.GLenum
  GL_SAMPLE_PATTERN_EXT* = 0x80AC.GLenum
  GL_MULTISAMPLE_BIT_EXT* = 0x20000000.GLbitfield

  GLAD_GL_EXT_multiview_tessellation_geometry_shader*: bool

  GLAD_GL_EXT_multiview_texture_multisample*: bool

  GLAD_GL_EXT_multiview_timer_query*: bool

  GLAD_GL_EXT_packed_depth_stencil*: bool
  GL_DEPTH_STENCIL_EXT* = 0x84F9.GLenum
  GL_UNSIGNED_INT_24_8_EXT* = 0x84FA.GLenum
  GL_DEPTH24_STENCIL8_EXT* = 0x88F0.GLenum
  GL_TEXTURE_STENCIL_SIZE_EXT* = 0x88F1.GLenum

  GLAD_GL_EXT_packed_float*: bool
  GL_R11F_G11F_B10F_EXT* = 0x8C3A.GLenum
  GL_UNSIGNED_INT_10F_11F_11F_REV_EXT* = 0x8C3B.GLenum
  GL_RGBA_SIGNED_COMPONENTS_EXT* = 0x8C3C.GLenum

  GLAD_GL_EXT_packed_pixels*: bool
  GL_UNSIGNED_BYTE_3_3_2_EXT* = 0x8032.GLenum
  GL_UNSIGNED_SHORT_4_4_4_4_EXT* = 0x8033.GLenum
  GL_UNSIGNED_SHORT_5_5_5_1_EXT* = 0x8034.GLenum
  GL_UNSIGNED_INT_8_8_8_8_EXT* = 0x8035.GLenum
  GL_UNSIGNED_INT_10_10_10_2_EXT* = 0x8036.GLenum

  GLAD_GL_EXT_paletted_texture*: bool
  GL_COLOR_INDEX1_EXT* = 0x80E2.GLenum
  GL_COLOR_INDEX2_EXT* = 0x80E3.GLenum
  GL_COLOR_INDEX4_EXT* = 0x80E4.GLenum
  GL_COLOR_INDEX8_EXT* = 0x80E5.GLenum
  GL_COLOR_INDEX12_EXT* = 0x80E6.GLenum
  GL_COLOR_INDEX16_EXT* = 0x80E7.GLenum
  GL_TEXTURE_INDEX_SIZE_EXT* = 0x80ED.GLenum

  GLAD_GL_EXT_pixel_buffer_object*: bool
  GL_PIXEL_PACK_BUFFER_EXT* = 0x88EB.GLenum
  GL_PIXEL_UNPACK_BUFFER_EXT* = 0x88EC.GLenum
  GL_PIXEL_PACK_BUFFER_BINDING_EXT* = 0x88ED.GLenum
  GL_PIXEL_UNPACK_BUFFER_BINDING_EXT* = 0x88EF.GLenum

  GLAD_GL_EXT_pixel_transform*: bool
  GL_PIXEL_TRANSFORM_2D_EXT* = 0x8330.GLenum
  GL_PIXEL_MAG_FILTER_EXT* = 0x8331.GLenum
  GL_PIXEL_MIN_FILTER_EXT* = 0x8332.GLenum
  GL_PIXEL_CUBIC_WEIGHT_EXT* = 0x8333.GLenum
  GL_CUBIC_EXT* = 0x8334.GLenum
  GL_AVERAGE_EXT* = 0x8335.GLenum
  GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT* = 0x8336.GLenum
  GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT* = 0x8337.GLenum
  GL_PIXEL_TRANSFORM_2D_MATRIX_EXT* = 0x8338.GLenum

  GLAD_GL_EXT_pixel_transform_color_table*: bool

  GLAD_GL_EXT_point_parameters*: bool
  GL_POINT_SIZE_MIN_EXT* = 0x8126.GLenum
  GL_POINT_SIZE_MAX_EXT* = 0x8127.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE_EXT* = 0x8128.GLenum
  GL_DISTANCE_ATTENUATION_EXT* = 0x8129.GLenum

  GLAD_GL_EXT_polygon_offset*: bool
  GL_POLYGON_OFFSET_EXT* = 0x8037.GLenum
  GL_POLYGON_OFFSET_FACTOR_EXT* = 0x8038.GLenum
  GL_POLYGON_OFFSET_BIAS_EXT* = 0x8039.GLenum

  GLAD_GL_EXT_polygon_offset_clamp*: bool
  GL_POLYGON_OFFSET_CLAMP_EXT* = 0x8E1B.GLenum

  GLAD_GL_EXT_post_depth_coverage*: bool

  GLAD_GL_EXT_provoking_vertex*: bool
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT* = 0x8E4C.GLenum
  GL_FIRST_VERTEX_CONVENTION_EXT* = 0x8E4D.GLenum
  GL_LAST_VERTEX_CONVENTION_EXT* = 0x8E4E.GLenum
  GL_PROVOKING_VERTEX_EXT* = 0x8E4F.GLenum

  GLAD_GL_EXT_raster_multisample*: bool
  GL_RASTER_MULTISAMPLE_EXT* = 0x9327.GLenum
  GL_RASTER_SAMPLES_EXT* = 0x9328.GLenum
  GL_MAX_RASTER_SAMPLES_EXT* = 0x9329.GLenum
  GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT* = 0x932A.GLenum
  GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT* = 0x932B.GLenum
  GL_EFFECTIVE_RASTER_SAMPLES_EXT* = 0x932C.GLenum

  GLAD_GL_EXT_rescale_normal*: bool
  GL_RESCALE_NORMAL_EXT* = 0x803A.GLenum

  GLAD_GL_EXT_secondary_color*: bool
  GL_COLOR_SUM_EXT* = 0x8458.GLenum
  GL_CURRENT_SECONDARY_COLOR_EXT* = 0x8459.GLenum
  GL_SECONDARY_COLOR_ARRAY_SIZE_EXT* = 0x845A.GLenum
  GL_SECONDARY_COLOR_ARRAY_TYPE_EXT* = 0x845B.GLenum
  GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT* = 0x845C.GLenum
  GL_SECONDARY_COLOR_ARRAY_POINTER_EXT* = 0x845D.GLenum
  GL_SECONDARY_COLOR_ARRAY_EXT* = 0x845E.GLenum

  GLAD_GL_EXT_semaphore*: bool
  GL_LAYOUT_GENERAL_EXT* = 0x958D.GLenum
  GL_LAYOUT_COLOR_ATTACHMENT_EXT* = 0x958E.GLenum
  GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT* = 0x958F.GLenum
  GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT* = 0x9590.GLenum
  GL_LAYOUT_SHADER_READ_ONLY_EXT* = 0x9591.GLenum
  GL_LAYOUT_TRANSFER_SRC_EXT* = 0x9592.GLenum
  GL_LAYOUT_TRANSFER_DST_EXT* = 0x9593.GLenum
  GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT* = 0x9530.GLenum
  GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT* = 0x9531.GLenum

  GLAD_GL_EXT_semaphore_fd*: bool

  GLAD_GL_EXT_semaphore_win32*: bool
  GL_HANDLE_TYPE_D3D12_FENCE_EXT* = 0x9594.GLenum
  GL_D3D12_FENCE_VALUE_EXT* = 0x9595.GLenum

  GLAD_GL_EXT_separate_shader_objects*: bool
  GL_ACTIVE_PROGRAM_EXT* = 0x8B8D.GLenum
  GL_VERTEX_SHADER_BIT_EXT* = 0x00000001.GLbitfield
  GL_FRAGMENT_SHADER_BIT_EXT* = 0x00000002.GLbitfield
  GL_ALL_SHADER_BITS_EXT* = 0xFFFFFFFF.GLbitfield
  GL_PROGRAM_SEPARABLE_EXT* = 0x8258.GLenum
  GL_PROGRAM_PIPELINE_BINDING_EXT* = 0x825A.GLenum

  GLAD_GL_EXT_separate_specular_color*: bool
  GL_LIGHT_MODEL_COLOR_CONTROL_EXT* = 0x81F8.GLenum
  GL_SINGLE_COLOR_EXT* = 0x81F9.GLenum
  GL_SEPARATE_SPECULAR_COLOR_EXT* = 0x81FA.GLenum

  GLAD_GL_EXT_shader_framebuffer_fetch*: bool
  GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT* = 0x8A52.GLenum

  GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent*: bool

  GLAD_GL_EXT_shader_image_load_formatted*: bool

  GLAD_GL_EXT_shader_image_load_store*: bool
  GL_MAX_IMAGE_UNITS_EXT* = 0x8F38.GLenum
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT* = 0x8F39.GLenum
  GL_IMAGE_BINDING_NAME_EXT* = 0x8F3A.GLenum
  GL_IMAGE_BINDING_LEVEL_EXT* = 0x8F3B.GLenum
  GL_IMAGE_BINDING_LAYERED_EXT* = 0x8F3C.GLenum
  GL_IMAGE_BINDING_LAYER_EXT* = 0x8F3D.GLenum
  GL_IMAGE_BINDING_ACCESS_EXT* = 0x8F3E.GLenum
  GL_IMAGE_1D_EXT* = 0x904C.GLenum
  GL_IMAGE_2D_EXT* = 0x904D.GLenum
  GL_IMAGE_3D_EXT* = 0x904E.GLenum
  GL_IMAGE_2D_RECT_EXT* = 0x904F.GLenum
  GL_IMAGE_CUBE_EXT* = 0x9050.GLenum
  GL_IMAGE_BUFFER_EXT* = 0x9051.GLenum
  GL_IMAGE_1D_ARRAY_EXT* = 0x9052.GLenum
  GL_IMAGE_2D_ARRAY_EXT* = 0x9053.GLenum
  GL_IMAGE_CUBE_MAP_ARRAY_EXT* = 0x9054.GLenum
  GL_IMAGE_2D_MULTISAMPLE_EXT* = 0x9055.GLenum
  GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT* = 0x9056.GLenum
  GL_INT_IMAGE_1D_EXT* = 0x9057.GLenum
  GL_INT_IMAGE_2D_EXT* = 0x9058.GLenum
  GL_INT_IMAGE_3D_EXT* = 0x9059.GLenum
  GL_INT_IMAGE_2D_RECT_EXT* = 0x905A.GLenum
  GL_INT_IMAGE_CUBE_EXT* = 0x905B.GLenum
  GL_INT_IMAGE_BUFFER_EXT* = 0x905C.GLenum
  GL_INT_IMAGE_1D_ARRAY_EXT* = 0x905D.GLenum
  GL_INT_IMAGE_2D_ARRAY_EXT* = 0x905E.GLenum
  GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT* = 0x905F.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE_EXT* = 0x9060.GLenum
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT* = 0x9061.GLenum
  GL_UNSIGNED_INT_IMAGE_1D_EXT* = 0x9062.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_EXT* = 0x9063.GLenum
  GL_UNSIGNED_INT_IMAGE_3D_EXT* = 0x9064.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT* = 0x9065.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE_EXT* = 0x9066.GLenum
  GL_UNSIGNED_INT_IMAGE_BUFFER_EXT* = 0x9067.GLenum
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT* = 0x9068.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT* = 0x9069.GLenum
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT* = 0x906A.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT* = 0x906B.GLenum
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT* = 0x906C.GLenum
  GL_MAX_IMAGE_SAMPLES_EXT* = 0x906D.GLenum
  GL_IMAGE_BINDING_FORMAT_EXT* = 0x906E.GLenum
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT* = 0x00000001.GLbitfield
  GL_ELEMENT_ARRAY_BARRIER_BIT_EXT* = 0x00000002.GLbitfield
  GL_UNIFORM_BARRIER_BIT_EXT* = 0x00000004.GLbitfield
  GL_TEXTURE_FETCH_BARRIER_BIT_EXT* = 0x00000008.GLbitfield
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT* = 0x00000020.GLbitfield
  GL_COMMAND_BARRIER_BIT_EXT* = 0x00000040.GLbitfield
  GL_PIXEL_BUFFER_BARRIER_BIT_EXT* = 0x00000080.GLbitfield
  GL_TEXTURE_UPDATE_BARRIER_BIT_EXT* = 0x00000100.GLbitfield
  GL_BUFFER_UPDATE_BARRIER_BIT_EXT* = 0x00000200.GLbitfield
  GL_FRAMEBUFFER_BARRIER_BIT_EXT* = 0x00000400.GLbitfield
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT* = 0x00000800.GLbitfield
  GL_ATOMIC_COUNTER_BARRIER_BIT_EXT* = 0x00001000.GLbitfield
  GL_ALL_BARRIER_BITS_EXT* = 0xFFFFFFFF.GLbitfield

  GLAD_GL_EXT_shader_integer_mix*: bool

  GLAD_GL_EXT_shadow_funcs*: bool

  GLAD_GL_EXT_shared_texture_palette*: bool
  GL_SHARED_TEXTURE_PALETTE_EXT* = 0x81FB.GLenum

  GLAD_GL_EXT_sparse_texture2*: bool

  GLAD_GL_EXT_stencil_clear_tag*: bool
  GL_STENCIL_TAG_BITS_EXT* = 0x88F2.GLbitfield
  GL_STENCIL_CLEAR_TAG_VALUE_EXT* = 0x88F3.GLenum

  GLAD_GL_EXT_stencil_two_side*: bool
  GL_STENCIL_TEST_TWO_SIDE_EXT* = 0x8910.GLenum
  GL_ACTIVE_STENCIL_FACE_EXT* = 0x8911.GLenum

  GLAD_GL_EXT_stencil_wrap*: bool
  GL_INCR_WRAP_EXT* = 0x8507.GLenum
  GL_DECR_WRAP_EXT* = 0x8508.GLenum

  GLAD_GL_EXT_subtexture*: bool

  GLAD_GL_EXT_texture*: bool
  GL_ALPHA4_EXT* = 0x803B.GLenum
  GL_ALPHA8_EXT* = 0x803C.GLenum
  GL_ALPHA12_EXT* = 0x803D.GLenum
  GL_ALPHA16_EXT* = 0x803E.GLenum
  GL_LUMINANCE4_EXT* = 0x803F.GLenum
  GL_LUMINANCE8_EXT* = 0x8040.GLenum
  GL_LUMINANCE12_EXT* = 0x8041.GLenum
  GL_LUMINANCE16_EXT* = 0x8042.GLenum
  GL_LUMINANCE4_ALPHA4_EXT* = 0x8043.GLenum
  GL_LUMINANCE6_ALPHA2_EXT* = 0x8044.GLenum
  GL_LUMINANCE8_ALPHA8_EXT* = 0x8045.GLenum
  GL_LUMINANCE12_ALPHA4_EXT* = 0x8046.GLenum
  GL_LUMINANCE12_ALPHA12_EXT* = 0x8047.GLenum
  GL_LUMINANCE16_ALPHA16_EXT* = 0x8048.GLenum
  GL_INTENSITY_EXT* = 0x8049.GLenum
  GL_INTENSITY4_EXT* = 0x804A.GLenum
  GL_INTENSITY8_EXT* = 0x804B.GLenum
  GL_INTENSITY12_EXT* = 0x804C.GLenum
  GL_INTENSITY16_EXT* = 0x804D.GLenum
  GL_RGB2_EXT* = 0x804E.GLenum
  GL_RGB4_EXT* = 0x804F.GLenum
  GL_RGB5_EXT* = 0x8050.GLenum
  GL_RGB8_EXT* = 0x8051.GLenum
  GL_RGB10_EXT* = 0x8052.GLenum
  GL_RGB12_EXT* = 0x8053.GLenum
  GL_RGB16_EXT* = 0x8054.GLenum
  GL_RGBA2_EXT* = 0x8055.GLenum
  GL_RGBA4_EXT* = 0x8056.GLenum
  GL_RGB5_A1_EXT* = 0x8057.GLenum
  GL_RGBA8_EXT* = 0x8058.GLenum
  GL_RGB10_A2_EXT* = 0x8059.GLenum
  GL_RGBA12_EXT* = 0x805A.GLenum
  GL_RGBA16_EXT* = 0x805B.GLenum
  GL_TEXTURE_RED_SIZE_EXT* = 0x805C.GLenum
  GL_TEXTURE_GREEN_SIZE_EXT* = 0x805D.GLenum
  GL_TEXTURE_BLUE_SIZE_EXT* = 0x805E.GLenum
  GL_TEXTURE_ALPHA_SIZE_EXT* = 0x805F.GLenum
  GL_TEXTURE_LUMINANCE_SIZE_EXT* = 0x8060.GLenum
  GL_TEXTURE_INTENSITY_SIZE_EXT* = 0x8061.GLenum
  GL_REPLACE_EXT* = 0x8062.GLenum
  GL_PROXY_TEXTURE_1D_EXT* = 0x8063.GLenum
  GL_PROXY_TEXTURE_2D_EXT* = 0x8064.GLenum
  GL_TEXTURE_TOO_LARGE_EXT* = 0x8065.GLenum

  GLAD_GL_EXT_texture3D*: bool
  GL_PACK_SKIP_IMAGES_EXT* = 0x806B.GLenum
  GL_PACK_IMAGE_HEIGHT_EXT* = 0x806C.GLenum
  GL_UNPACK_SKIP_IMAGES_EXT* = 0x806D.GLenum
  GL_UNPACK_IMAGE_HEIGHT_EXT* = 0x806E.GLenum
  GL_TEXTURE_3D_EXT* = 0x806F.GLenum
  GL_PROXY_TEXTURE_3D_EXT* = 0x8070.GLenum
  GL_TEXTURE_DEPTH_EXT* = 0x8071.GLenum
  GL_TEXTURE_WRAP_R_EXT* = 0x8072.GLenum
  GL_MAX_3D_TEXTURE_SIZE_EXT* = 0x8073.GLenum

  GLAD_GL_EXT_texture_array*: bool
  GL_TEXTURE_1D_ARRAY_EXT* = 0x8C18.GLenum
  GL_PROXY_TEXTURE_1D_ARRAY_EXT* = 0x8C19.GLenum
  GL_TEXTURE_2D_ARRAY_EXT* = 0x8C1A.GLenum
  GL_PROXY_TEXTURE_2D_ARRAY_EXT* = 0x8C1B.GLenum
  GL_TEXTURE_BINDING_1D_ARRAY_EXT* = 0x8C1C.GLenum
  GL_TEXTURE_BINDING_2D_ARRAY_EXT* = 0x8C1D.GLenum
  GL_MAX_ARRAY_TEXTURE_LAYERS_EXT* = 0x88FF.GLenum
  GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT* = 0x884E.GLenum

  GLAD_GL_EXT_texture_buffer_object*: bool
  GL_TEXTURE_BUFFER_EXT* = 0x8C2A.GLenum
  GL_MAX_TEXTURE_BUFFER_SIZE_EXT* = 0x8C2B.GLenum
  GL_TEXTURE_BINDING_BUFFER_EXT* = 0x8C2C.GLenum
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT* = 0x8C2D.GLenum
  GL_TEXTURE_BUFFER_FORMAT_EXT* = 0x8C2E.GLenum

  GLAD_GL_EXT_texture_compression_latc*: bool
  GL_COMPRESSED_LUMINANCE_LATC1_EXT* = 0x8C70.GLenum
  GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT* = 0x8C71.GLenum
  GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT* = 0x8C72.GLenum
  GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT* = 0x8C73.GLenum

  GLAD_GL_EXT_texture_compression_rgtc*: bool
  GL_COMPRESSED_RED_RGTC1_EXT* = 0x8DBB.GLenum
  GL_COMPRESSED_SIGNED_RED_RGTC1_EXT* = 0x8DBC.GLenum
  GL_COMPRESSED_RED_GREEN_RGTC2_EXT* = 0x8DBD.GLenum
  GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT* = 0x8DBE.GLenum

  GLAD_GL_EXT_texture_compression_s3tc*: bool
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT* = 0x83F0.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT* = 0x83F1.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT* = 0x83F2.GLenum
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT* = 0x83F3.GLenum

  GLAD_GL_EXT_texture_cube_map*: bool
  GL_NORMAL_MAP_EXT* = 0x8511.GLenum
  GL_REFLECTION_MAP_EXT* = 0x8512.GLenum
  GL_TEXTURE_CUBE_MAP_EXT* = 0x8513.GLenum
  GL_TEXTURE_BINDING_CUBE_MAP_EXT* = 0x8514.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT* = 0x8515.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT* = 0x8516.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT* = 0x8517.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT* = 0x8518.GLenum
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT* = 0x8519.GLenum
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT* = 0x851A.GLenum
  GL_PROXY_TEXTURE_CUBE_MAP_EXT* = 0x851B.GLenum
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT* = 0x851C.GLenum

  GLAD_GL_EXT_texture_env_add*: bool

  GLAD_GL_EXT_texture_env_combine*: bool
  GL_COMBINE_EXT* = 0x8570.GLenum
  GL_COMBINE_RGB_EXT* = 0x8571.GLenum
  GL_COMBINE_ALPHA_EXT* = 0x8572.GLenum
  GL_RGB_SCALE_EXT* = 0x8573.GLenum
  GL_ADD_SIGNED_EXT* = 0x8574.GLenum
  GL_INTERPOLATE_EXT* = 0x8575.GLenum
  GL_CONSTANT_EXT* = 0x8576.GLenum
  GL_PRIMARY_COLOR_EXT* = 0x8577.GLenum
  GL_PREVIOUS_EXT* = 0x8578.GLenum
  GL_SOURCE0_RGB_EXT* = 0x8580.GLenum
  GL_SOURCE1_RGB_EXT* = 0x8581.GLenum
  GL_SOURCE2_RGB_EXT* = 0x8582.GLenum
  GL_SOURCE0_ALPHA_EXT* = 0x8588.GLenum
  GL_SOURCE1_ALPHA_EXT* = 0x8589.GLenum
  GL_SOURCE2_ALPHA_EXT* = 0x858A.GLenum
  GL_OPERAND0_RGB_EXT* = 0x8590.GLenum
  GL_OPERAND1_RGB_EXT* = 0x8591.GLenum
  GL_OPERAND2_RGB_EXT* = 0x8592.GLenum
  GL_OPERAND0_ALPHA_EXT* = 0x8598.GLenum
  GL_OPERAND1_ALPHA_EXT* = 0x8599.GLenum
  GL_OPERAND2_ALPHA_EXT* = 0x859A.GLenum

  GLAD_GL_EXT_texture_env_dot3*: bool
  GL_DOT3_RGB_EXT* = 0x8740.GLenum
  GL_DOT3_RGBA_EXT* = 0x8741.GLenum

  GLAD_GL_EXT_texture_filter_anisotropic*: bool
  GL_TEXTURE_MAX_ANISOTROPY_EXT* = 0x84FE.GLenum
  GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT* = 0x84FF.GLenum

  GLAD_GL_EXT_texture_filter_minmax*: bool
  GL_TEXTURE_REDUCTION_MODE_EXT* = 0x9366.GLenum
  GL_WEIGHTED_AVERAGE_EXT* = 0x9367.GLenum

  GLAD_GL_EXT_texture_integer*: bool
  GL_RGBA32UI_EXT* = 0x8D70.GLenum
  GL_RGB32UI_EXT* = 0x8D71.GLenum
  GL_ALPHA32UI_EXT* = 0x8D72.GLenum
  GL_INTENSITY32UI_EXT* = 0x8D73.GLenum
  GL_LUMINANCE32UI_EXT* = 0x8D74.GLenum
  GL_LUMINANCE_ALPHA32UI_EXT* = 0x8D75.GLenum
  GL_RGBA16UI_EXT* = 0x8D76.GLenum
  GL_RGB16UI_EXT* = 0x8D77.GLenum
  GL_ALPHA16UI_EXT* = 0x8D78.GLenum
  GL_INTENSITY16UI_EXT* = 0x8D79.GLenum
  GL_LUMINANCE16UI_EXT* = 0x8D7A.GLenum
  GL_LUMINANCE_ALPHA16UI_EXT* = 0x8D7B.GLenum
  GL_RGBA8UI_EXT* = 0x8D7C.GLenum
  GL_RGB8UI_EXT* = 0x8D7D.GLenum
  GL_ALPHA8UI_EXT* = 0x8D7E.GLenum
  GL_INTENSITY8UI_EXT* = 0x8D7F.GLenum
  GL_LUMINANCE8UI_EXT* = 0x8D80.GLenum
  GL_LUMINANCE_ALPHA8UI_EXT* = 0x8D81.GLenum
  GL_RGBA32I_EXT* = 0x8D82.GLenum
  GL_RGB32I_EXT* = 0x8D83.GLenum
  GL_ALPHA32I_EXT* = 0x8D84.GLenum
  GL_INTENSITY32I_EXT* = 0x8D85.GLenum
  GL_LUMINANCE32I_EXT* = 0x8D86.GLenum
  GL_LUMINANCE_ALPHA32I_EXT* = 0x8D87.GLenum
  GL_RGBA16I_EXT* = 0x8D88.GLenum
  GL_RGB16I_EXT* = 0x8D89.GLenum
  GL_ALPHA16I_EXT* = 0x8D8A.GLenum
  GL_INTENSITY16I_EXT* = 0x8D8B.GLenum
  GL_LUMINANCE16I_EXT* = 0x8D8C.GLenum
  GL_LUMINANCE_ALPHA16I_EXT* = 0x8D8D.GLenum
  GL_RGBA8I_EXT* = 0x8D8E.GLenum
  GL_RGB8I_EXT* = 0x8D8F.GLenum
  GL_ALPHA8I_EXT* = 0x8D90.GLenum
  GL_INTENSITY8I_EXT* = 0x8D91.GLenum
  GL_LUMINANCE8I_EXT* = 0x8D92.GLenum
  GL_LUMINANCE_ALPHA8I_EXT* = 0x8D93.GLenum
  GL_RED_INTEGER_EXT* = 0x8D94.GLenum
  GL_GREEN_INTEGER_EXT* = 0x8D95.GLenum
  GL_BLUE_INTEGER_EXT* = 0x8D96.GLenum
  GL_ALPHA_INTEGER_EXT* = 0x8D97.GLenum
  GL_RGB_INTEGER_EXT* = 0x8D98.GLenum
  GL_RGBA_INTEGER_EXT* = 0x8D99.GLenum
  GL_BGR_INTEGER_EXT* = 0x8D9A.GLenum
  GL_BGRA_INTEGER_EXT* = 0x8D9B.GLenum
  GL_LUMINANCE_INTEGER_EXT* = 0x8D9C.GLenum
  GL_LUMINANCE_ALPHA_INTEGER_EXT* = 0x8D9D.GLenum
  GL_RGBA_INTEGER_MODE_EXT* = 0x8D9E.GLenum

  GLAD_GL_EXT_texture_lod_bias*: bool
  GL_MAX_TEXTURE_LOD_BIAS_EXT* = 0x84FD.GLenum
  GL_TEXTURE_FILTER_CONTROL_EXT* = 0x8500.GLenum
  GL_TEXTURE_LOD_BIAS_EXT* = 0x8501.GLenum

  GLAD_GL_EXT_texture_mirror_clamp*: bool
  GL_MIRROR_CLAMP_EXT* = 0x8742.GLenum
  GL_MIRROR_CLAMP_TO_EDGE_EXT* = 0x8743.GLenum
  GL_MIRROR_CLAMP_TO_BORDER_EXT* = 0x8912.GLenum

  GLAD_GL_EXT_texture_object*: bool
  GL_TEXTURE_PRIORITY_EXT* = 0x8066.GLenum
  GL_TEXTURE_RESIDENT_EXT* = 0x8067.GLenum
  GL_TEXTURE_1D_BINDING_EXT* = 0x8068.GLenum
  GL_TEXTURE_2D_BINDING_EXT* = 0x8069.GLenum
  GL_TEXTURE_3D_BINDING_EXT* = 0x806A.GLenum

  GLAD_GL_EXT_texture_perturb_normal*: bool
  GL_PERTURB_EXT* = 0x85AE.GLenum
  GL_TEXTURE_NORMAL_EXT* = 0x85AF.GLenum

  GLAD_GL_EXT_texture_sRGB*: bool
  GL_SRGB_EXT* = 0x8C40.GLenum
  GL_SRGB8_EXT* = 0x8C41.GLenum
  GL_SRGB_ALPHA_EXT* = 0x8C42.GLenum
  GL_SRGB8_ALPHA8_EXT* = 0x8C43.GLenum
  GL_SLUMINANCE_ALPHA_EXT* = 0x8C44.GLenum
  GL_SLUMINANCE8_ALPHA8_EXT* = 0x8C45.GLenum
  GL_SLUMINANCE_EXT* = 0x8C46.GLenum
  GL_SLUMINANCE8_EXT* = 0x8C47.GLenum
  GL_COMPRESSED_SRGB_EXT* = 0x8C48.GLenum
  GL_COMPRESSED_SRGB_ALPHA_EXT* = 0x8C49.GLenum
  GL_COMPRESSED_SLUMINANCE_EXT* = 0x8C4A.GLenum
  GL_COMPRESSED_SLUMINANCE_ALPHA_EXT* = 0x8C4B.GLenum
  GL_COMPRESSED_SRGB_S3TC_DXT1_EXT* = 0x8C4C.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT* = 0x8C4D.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT* = 0x8C4E.GLenum
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT* = 0x8C4F.GLenum

  GLAD_GL_EXT_texture_sRGB_R8*: bool
  GL_SR8_EXT* = 0x8FBD.GLenum

  GLAD_GL_EXT_texture_sRGB_RG8*: bool
  GL_SRG8_EXT* = 0x8FBE.GLenum

  GLAD_GL_EXT_texture_sRGB_decode*: bool
  GL_TEXTURE_SRGB_DECODE_EXT* = 0x8A48.GLenum
  GL_DECODE_EXT* = 0x8A49.GLenum
  GL_SKIP_DECODE_EXT* = 0x8A4A.GLenum

  GLAD_GL_EXT_texture_shadow_lod*: bool

  GLAD_GL_EXT_texture_shared_exponent*: bool
  GL_RGB9_E5_EXT* = 0x8C3D.GLenum
  GL_UNSIGNED_INT_5_9_9_9_REV_EXT* = 0x8C3E.GLenum
  GL_TEXTURE_SHARED_SIZE_EXT* = 0x8C3F.GLenum

  GLAD_GL_EXT_texture_snorm*: bool
  GL_ALPHA_SNORM* = 0x9010.GLenum
  GL_LUMINANCE_SNORM* = 0x9011.GLenum
  GL_LUMINANCE_ALPHA_SNORM* = 0x9012.GLenum
  GL_INTENSITY_SNORM* = 0x9013.GLenum
  GL_ALPHA8_SNORM* = 0x9014.GLenum
  GL_LUMINANCE8_SNORM* = 0x9015.GLenum
  GL_LUMINANCE8_ALPHA8_SNORM* = 0x9016.GLenum
  GL_INTENSITY8_SNORM* = 0x9017.GLenum
  GL_ALPHA16_SNORM* = 0x9018.GLenum
  GL_LUMINANCE16_SNORM* = 0x9019.GLenum
  GL_LUMINANCE16_ALPHA16_SNORM* = 0x901A.GLenum
  GL_INTENSITY16_SNORM* = 0x901B.GLenum
  GL_RED_SNORM* = 0x8F90.GLenum
  GL_RG_SNORM* = 0x8F91.GLenum
  GL_RGB_SNORM* = 0x8F92.GLenum
  GL_RGBA_SNORM* = 0x8F93.GLenum

  GLAD_GL_EXT_texture_storage*: bool
  GL_TEXTURE_IMMUTABLE_FORMAT_EXT* = 0x912F.GLenum
  GL_RGBA32F_EXT* = 0x8814.GLenum
  GL_RGB32F_EXT* = 0x8815.GLenum
  GL_ALPHA32F_EXT* = 0x8816.GLenum
  GL_LUMINANCE32F_EXT* = 0x8818.GLenum
  GL_LUMINANCE_ALPHA32F_EXT* = 0x8819.GLenum
  GL_RGBA16F_EXT* = 0x881A.GLenum
  GL_RGB16F_EXT* = 0x881B.GLenum
  GL_ALPHA16F_EXT* = 0x881C.GLenum
  GL_LUMINANCE16F_EXT* = 0x881E.GLenum
  GL_LUMINANCE_ALPHA16F_EXT* = 0x881F.GLenum
  GL_BGRA8_EXT* = 0x93A1.GLenum
  GL_R8_EXT* = 0x8229.GLenum
  GL_RG8_EXT* = 0x822B.GLenum
  GL_R32F_EXT* = 0x822E.GLenum
  GL_RG32F_EXT* = 0x8230.GLenum
  GL_R16F_EXT* = 0x822D.GLenum
  GL_RG16F_EXT* = 0x822F.GLenum

  GLAD_GL_EXT_texture_swizzle*: bool
  GL_TEXTURE_SWIZZLE_R_EXT* = 0x8E42.GLenum
  GL_TEXTURE_SWIZZLE_G_EXT* = 0x8E43.GLenum
  GL_TEXTURE_SWIZZLE_B_EXT* = 0x8E44.GLenum
  GL_TEXTURE_SWIZZLE_A_EXT* = 0x8E45.GLenum
  GL_TEXTURE_SWIZZLE_RGBA_EXT* = 0x8E46.GLenum

  GLAD_GL_EXT_timer_query*: bool
  GL_TIME_ELAPSED_EXT* = 0x88BF.GLenum

  GLAD_GL_EXT_transform_feedback*: bool
  GL_TRANSFORM_FEEDBACK_BUFFER_EXT* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT* = 0x8C85.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT* = 0x8C8F.GLenum
  GL_INTERLEAVED_ATTRIBS_EXT* = 0x8C8C.GLenum
  GL_SEPARATE_ATTRIBS_EXT* = 0x8C8D.GLenum
  GL_PRIMITIVES_GENERATED_EXT* = 0x8C87.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT* = 0x8C88.GLenum
  GL_RASTERIZER_DISCARD_EXT* = 0x8C89.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT* = 0x8C8B.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT* = 0x8C80.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS_EXT* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT* = 0x8C7F.GLenum
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT* = 0x8C76.GLenum

  GLAD_GL_EXT_vertex_array*: bool
  GL_VERTEX_ARRAY_EXT* = 0x8074.GLenum
  GL_NORMAL_ARRAY_EXT* = 0x8075.GLenum
  GL_COLOR_ARRAY_EXT* = 0x8076.GLenum
  GL_INDEX_ARRAY_EXT* = 0x8077.GLenum
  GL_TEXTURE_COORD_ARRAY_EXT* = 0x8078.GLenum
  GL_EDGE_FLAG_ARRAY_EXT* = 0x8079.GLenum
  GL_VERTEX_ARRAY_SIZE_EXT* = 0x807A.GLenum
  GL_VERTEX_ARRAY_TYPE_EXT* = 0x807B.GLenum
  GL_VERTEX_ARRAY_STRIDE_EXT* = 0x807C.GLenum
  GL_VERTEX_ARRAY_COUNT_EXT* = 0x807D.GLenum
  GL_NORMAL_ARRAY_TYPE_EXT* = 0x807E.GLenum
  GL_NORMAL_ARRAY_STRIDE_EXT* = 0x807F.GLenum
  GL_NORMAL_ARRAY_COUNT_EXT* = 0x8080.GLenum
  GL_COLOR_ARRAY_SIZE_EXT* = 0x8081.GLenum
  GL_COLOR_ARRAY_TYPE_EXT* = 0x8082.GLenum
  GL_COLOR_ARRAY_STRIDE_EXT* = 0x8083.GLenum
  GL_COLOR_ARRAY_COUNT_EXT* = 0x8084.GLenum
  GL_INDEX_ARRAY_TYPE_EXT* = 0x8085.GLenum
  GL_INDEX_ARRAY_STRIDE_EXT* = 0x8086.GLenum
  GL_INDEX_ARRAY_COUNT_EXT* = 0x8087.GLenum
  GL_TEXTURE_COORD_ARRAY_SIZE_EXT* = 0x8088.GLenum
  GL_TEXTURE_COORD_ARRAY_TYPE_EXT* = 0x8089.GLenum
  GL_TEXTURE_COORD_ARRAY_STRIDE_EXT* = 0x808A.GLenum
  GL_TEXTURE_COORD_ARRAY_COUNT_EXT* = 0x808B.GLenum
  GL_EDGE_FLAG_ARRAY_STRIDE_EXT* = 0x808C.GLenum
  GL_EDGE_FLAG_ARRAY_COUNT_EXT* = 0x808D.GLenum
  GL_VERTEX_ARRAY_POINTER_EXT* = 0x808E.GLenum
  GL_NORMAL_ARRAY_POINTER_EXT* = 0x808F.GLenum
  GL_COLOR_ARRAY_POINTER_EXT* = 0x8090.GLenum
  GL_INDEX_ARRAY_POINTER_EXT* = 0x8091.GLenum
  GL_TEXTURE_COORD_ARRAY_POINTER_EXT* = 0x8092.GLenum
  GL_EDGE_FLAG_ARRAY_POINTER_EXT* = 0x8093.GLenum

  GLAD_GL_EXT_vertex_array_bgra*: bool

  GLAD_GL_EXT_vertex_attrib_64bit*: bool
  GL_DOUBLE_VEC2_EXT* = 0x8FFC.GLenum
  GL_DOUBLE_VEC3_EXT* = 0x8FFD.GLenum
  GL_DOUBLE_VEC4_EXT* = 0x8FFE.GLenum
  GL_DOUBLE_MAT2_EXT* = 0x8F46.GLenum
  GL_DOUBLE_MAT3_EXT* = 0x8F47.GLenum
  GL_DOUBLE_MAT4_EXT* = 0x8F48.GLenum
  GL_DOUBLE_MAT2x3_EXT* = 0x8F49.GLenum
  GL_DOUBLE_MAT2x4_EXT* = 0x8F4A.GLenum
  GL_DOUBLE_MAT3x2_EXT* = 0x8F4B.GLenum
  GL_DOUBLE_MAT3x4_EXT* = 0x8F4C.GLenum
  GL_DOUBLE_MAT4x2_EXT* = 0x8F4D.GLenum
  GL_DOUBLE_MAT4x3_EXT* = 0x8F4E.GLenum

  GLAD_GL_EXT_vertex_shader*: bool
  GL_VERTEX_SHADER_EXT* = 0x8780.GLenum
  GL_VERTEX_SHADER_BINDING_EXT* = 0x8781.GLenum
  GL_OP_INDEX_EXT* = 0x8782.GLenum
  GL_OP_NEGATE_EXT* = 0x8783.GLenum
  GL_OP_DOT3_EXT* = 0x8784.GLenum
  GL_OP_DOT4_EXT* = 0x8785.GLenum
  GL_OP_MUL_EXT* = 0x8786.GLenum
  GL_OP_ADD_EXT* = 0x8787.GLenum
  GL_OP_MADD_EXT* = 0x8788.GLenum
  GL_OP_FRAC_EXT* = 0x8789.GLenum
  GL_OP_MAX_EXT* = 0x878A.GLenum
  GL_OP_MIN_EXT* = 0x878B.GLenum
  GL_OP_SET_GE_EXT* = 0x878C.GLenum
  GL_OP_SET_LT_EXT* = 0x878D.GLenum
  GL_OP_CLAMP_EXT* = 0x878E.GLenum
  GL_OP_FLOOR_EXT* = 0x878F.GLenum
  GL_OP_ROUND_EXT* = 0x8790.GLenum
  GL_OP_EXP_BASE_2_EXT* = 0x8791.GLenum
  GL_OP_LOG_BASE_2_EXT* = 0x8792.GLenum
  GL_OP_POWER_EXT* = 0x8793.GLenum
  GL_OP_RECIP_EXT* = 0x8794.GLenum
  GL_OP_RECIP_SQRT_EXT* = 0x8795.GLenum
  GL_OP_SUB_EXT* = 0x8796.GLenum
  GL_OP_CROSS_PRODUCT_EXT* = 0x8797.GLenum
  GL_OP_MULTIPLY_MATRIX_EXT* = 0x8798.GLenum
  GL_OP_MOV_EXT* = 0x8799.GLenum
  GL_OUTPUT_VERTEX_EXT* = 0x879A.GLenum
  GL_OUTPUT_COLOR0_EXT* = 0x879B.GLenum
  GL_OUTPUT_COLOR1_EXT* = 0x879C.GLenum
  GL_OUTPUT_TEXTURE_COORD0_EXT* = 0x879D.GLenum
  GL_OUTPUT_TEXTURE_COORD1_EXT* = 0x879E.GLenum
  GL_OUTPUT_TEXTURE_COORD2_EXT* = 0x879F.GLenum
  GL_OUTPUT_TEXTURE_COORD3_EXT* = 0x87A0.GLenum
  GL_OUTPUT_TEXTURE_COORD4_EXT* = 0x87A1.GLenum
  GL_OUTPUT_TEXTURE_COORD5_EXT* = 0x87A2.GLenum
  GL_OUTPUT_TEXTURE_COORD6_EXT* = 0x87A3.GLenum
  GL_OUTPUT_TEXTURE_COORD7_EXT* = 0x87A4.GLenum
  GL_OUTPUT_TEXTURE_COORD8_EXT* = 0x87A5.GLenum
  GL_OUTPUT_TEXTURE_COORD9_EXT* = 0x87A6.GLenum
  GL_OUTPUT_TEXTURE_COORD10_EXT* = 0x87A7.GLenum
  GL_OUTPUT_TEXTURE_COORD11_EXT* = 0x87A8.GLenum
  GL_OUTPUT_TEXTURE_COORD12_EXT* = 0x87A9.GLenum
  GL_OUTPUT_TEXTURE_COORD13_EXT* = 0x87AA.GLenum
  GL_OUTPUT_TEXTURE_COORD14_EXT* = 0x87AB.GLenum
  GL_OUTPUT_TEXTURE_COORD15_EXT* = 0x87AC.GLenum
  GL_OUTPUT_TEXTURE_COORD16_EXT* = 0x87AD.GLenum
  GL_OUTPUT_TEXTURE_COORD17_EXT* = 0x87AE.GLenum
  GL_OUTPUT_TEXTURE_COORD18_EXT* = 0x87AF.GLenum
  GL_OUTPUT_TEXTURE_COORD19_EXT* = 0x87B0.GLenum
  GL_OUTPUT_TEXTURE_COORD20_EXT* = 0x87B1.GLenum
  GL_OUTPUT_TEXTURE_COORD21_EXT* = 0x87B2.GLenum
  GL_OUTPUT_TEXTURE_COORD22_EXT* = 0x87B3.GLenum
  GL_OUTPUT_TEXTURE_COORD23_EXT* = 0x87B4.GLenum
  GL_OUTPUT_TEXTURE_COORD24_EXT* = 0x87B5.GLenum
  GL_OUTPUT_TEXTURE_COORD25_EXT* = 0x87B6.GLenum
  GL_OUTPUT_TEXTURE_COORD26_EXT* = 0x87B7.GLenum
  GL_OUTPUT_TEXTURE_COORD27_EXT* = 0x87B8.GLenum
  GL_OUTPUT_TEXTURE_COORD28_EXT* = 0x87B9.GLenum
  GL_OUTPUT_TEXTURE_COORD29_EXT* = 0x87BA.GLenum
  GL_OUTPUT_TEXTURE_COORD30_EXT* = 0x87BB.GLenum
  GL_OUTPUT_TEXTURE_COORD31_EXT* = 0x87BC.GLenum
  GL_OUTPUT_FOG_EXT* = 0x87BD.GLenum
  GL_SCALAR_EXT* = 0x87BE.GLenum
  GL_VECTOR_EXT* = 0x87BF.GLenum
  GL_MATRIX_EXT* = 0x87C0.GLenum
  GL_VARIANT_EXT* = 0x87C1.GLenum
  GL_INVARIANT_EXT* = 0x87C2.GLenum
  GL_LOCAL_CONSTANT_EXT* = 0x87C3.GLenum
  GL_LOCAL_EXT* = 0x87C4.GLenum
  GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT* = 0x87C5.GLenum
  GL_MAX_VERTEX_SHADER_VARIANTS_EXT* = 0x87C6.GLenum
  GL_MAX_VERTEX_SHADER_INVARIANTS_EXT* = 0x87C7.GLenum
  GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT* = 0x87C8.GLenum
  GL_MAX_VERTEX_SHADER_LOCALS_EXT* = 0x87C9.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT* = 0x87CA.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT* = 0x87CB.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT* = 0x87CC.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT* = 0x87CD.GLenum
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT* = 0x87CE.GLenum
  GL_VERTEX_SHADER_INSTRUCTIONS_EXT* = 0x87CF.GLenum
  GL_VERTEX_SHADER_VARIANTS_EXT* = 0x87D0.GLenum
  GL_VERTEX_SHADER_INVARIANTS_EXT* = 0x87D1.GLenum
  GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT* = 0x87D2.GLenum
  GL_VERTEX_SHADER_LOCALS_EXT* = 0x87D3.GLenum
  GL_VERTEX_SHADER_OPTIMIZED_EXT* = 0x87D4.GLenum
  GL_X_EXT* = 0x87D5.GLenum
  GL_Y_EXT* = 0x87D6.GLenum
  GL_Z_EXT* = 0x87D7.GLenum
  GL_W_EXT* = 0x87D8.GLenum
  GL_NEGATIVE_X_EXT* = 0x87D9.GLenum
  GL_NEGATIVE_Y_EXT* = 0x87DA.GLenum
  GL_NEGATIVE_Z_EXT* = 0x87DB.GLenum
  GL_NEGATIVE_W_EXT* = 0x87DC.GLenum
  GL_ZERO_EXT* = 0x87DD.GLenum
  GL_ONE_EXT* = 0x87DE.GLenum
  GL_NEGATIVE_ONE_EXT* = 0x87DF.GLenum
  GL_NORMALIZED_RANGE_EXT* = 0x87E0.GLenum
  GL_FULL_RANGE_EXT* = 0x87E1.GLenum
  GL_CURRENT_VERTEX_EXT* = 0x87E2.GLenum
  GL_MVP_MATRIX_EXT* = 0x87E3.GLenum
  GL_VARIANT_VALUE_EXT* = 0x87E4.GLenum
  GL_VARIANT_DATATYPE_EXT* = 0x87E5.GLenum
  GL_VARIANT_ARRAY_STRIDE_EXT* = 0x87E6.GLenum
  GL_VARIANT_ARRAY_TYPE_EXT* = 0x87E7.GLenum
  GL_VARIANT_ARRAY_EXT* = 0x87E8.GLenum
  GL_VARIANT_ARRAY_POINTER_EXT* = 0x87E9.GLenum
  GL_INVARIANT_VALUE_EXT* = 0x87EA.GLenum
  GL_INVARIANT_DATATYPE_EXT* = 0x87EB.GLenum
  GL_LOCAL_CONSTANT_VALUE_EXT* = 0x87EC.GLenum
  GL_LOCAL_CONSTANT_DATATYPE_EXT* = 0x87ED.GLenum

  GLAD_GL_EXT_vertex_weighting*: bool
  GL_MODELVIEW0_STACK_DEPTH_EXT* = 0x0BA3.GLenum
  GL_MODELVIEW1_STACK_DEPTH_EXT* = 0x8502.GLenum
  GL_MODELVIEW0_MATRIX_EXT* = 0x0BA6.GLenum
  GL_MODELVIEW1_MATRIX_EXT* = 0x8506.GLenum
  GL_VERTEX_WEIGHTING_EXT* = 0x8509.GLenum
  GL_MODELVIEW0_EXT* = 0x1700.GLenum
  GL_MODELVIEW1_EXT* = 0x850A.GLenum
  GL_CURRENT_VERTEX_WEIGHT_EXT* = 0x850B.GLenum
  GL_VERTEX_WEIGHT_ARRAY_EXT* = 0x850C.GLenum
  GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT* = 0x850D.GLenum
  GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT* = 0x850E.GLenum
  GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT* = 0x850F.GLenum
  GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT* = 0x8510.GLenum

  GLAD_GL_EXT_win32_keyed_mutex*: bool

  GLAD_GL_EXT_window_rectangles*: bool
  GL_INCLUSIVE_EXT* = 0x8F10.GLenum
  GL_EXCLUSIVE_EXT* = 0x8F11.GLenum
  GL_WINDOW_RECTANGLE_EXT* = 0x8F12.GLenum
  GL_WINDOW_RECTANGLE_MODE_EXT* = 0x8F13.GLenum
  GL_MAX_WINDOW_RECTANGLES_EXT* = 0x8F14.GLenum
  GL_NUM_WINDOW_RECTANGLES_EXT* = 0x8F15.GLenum

  GLAD_GL_EXT_x11_sync_object*: bool
  GL_SYNC_X11_FENCE_EXT* = 0x90E1.GLenum

  GLAD_GL_GREMEDY_frame_terminator*: bool

  GLAD_GL_GREMEDY_string_marker*: bool

  GLAD_GL_HP_convolution_border_modes*: bool
  GL_IGNORE_BORDER_HP* = 0x8150.GLenum
  GL_CONSTANT_BORDER_HP* = 0x8151.GLenum
  GL_REPLICATE_BORDER_HP* = 0x8153.GLenum
  GL_CONVOLUTION_BORDER_COLOR_HP* = 0x8154.GLenum

  GLAD_GL_HP_image_transform*: bool
  GL_IMAGE_SCALE_X_HP* = 0x8155.GLenum
  GL_IMAGE_SCALE_Y_HP* = 0x8156.GLenum
  GL_IMAGE_TRANSLATE_X_HP* = 0x8157.GLenum
  GL_IMAGE_TRANSLATE_Y_HP* = 0x8158.GLenum
  GL_IMAGE_ROTATE_ANGLE_HP* = 0x8159.GLenum
  GL_IMAGE_ROTATE_ORIGIN_X_HP* = 0x815A.GLenum
  GL_IMAGE_ROTATE_ORIGIN_Y_HP* = 0x815B.GLenum
  GL_IMAGE_MAG_FILTER_HP* = 0x815C.GLenum
  GL_IMAGE_MIN_FILTER_HP* = 0x815D.GLenum
  GL_IMAGE_CUBIC_WEIGHT_HP* = 0x815E.GLenum
  GL_CUBIC_HP* = 0x815F.GLenum
  GL_AVERAGE_HP* = 0x8160.GLenum
  GL_IMAGE_TRANSFORM_2D_HP* = 0x8161.GLenum
  GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP* = 0x8162.GLenum
  GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP* = 0x8163.GLenum

  GLAD_GL_HP_occlusion_test*: bool
  GL_OCCLUSION_TEST_HP* = 0x8165.GLenum
  GL_OCCLUSION_TEST_RESULT_HP* = 0x8166.GLenum

  GLAD_GL_HP_texture_lighting*: bool
  GL_TEXTURE_LIGHTING_MODE_HP* = 0x8167.GLenum
  GL_TEXTURE_POST_SPECULAR_HP* = 0x8168.GLenum
  GL_TEXTURE_PRE_SPECULAR_HP* = 0x8169.GLenum

  GLAD_GL_IBM_cull_vertex*: bool
  GL_CULL_VERTEX_IBM* = 103050.GLenum

  GLAD_GL_IBM_multimode_draw_arrays*: bool

  GLAD_GL_IBM_rasterpos_clip*: bool
  GL_RASTER_POSITION_UNCLIPPED_IBM* = 0x19262.GLenum

  GLAD_GL_IBM_static_data*: bool
  GL_ALL_STATIC_DATA_IBM* = 103060.GLenum
  GL_STATIC_VERTEX_ARRAY_IBM* = 103061.GLenum

  GLAD_GL_IBM_texture_mirrored_repeat*: bool
  GL_MIRRORED_REPEAT_IBM* = 0x8370.GLenum

  GLAD_GL_IBM_vertex_array_lists*: bool
  GL_VERTEX_ARRAY_LIST_IBM* = 103070.GLenum
  GL_NORMAL_ARRAY_LIST_IBM* = 103071.GLenum
  GL_COLOR_ARRAY_LIST_IBM* = 103072.GLenum
  GL_INDEX_ARRAY_LIST_IBM* = 103073.GLenum
  GL_TEXTURE_COORD_ARRAY_LIST_IBM* = 103074.GLenum
  GL_EDGE_FLAG_ARRAY_LIST_IBM* = 103075.GLenum
  GL_FOG_COORDINATE_ARRAY_LIST_IBM* = 103076.GLenum
  GL_SECONDARY_COLOR_ARRAY_LIST_IBM* = 103077.GLenum
  GL_VERTEX_ARRAY_LIST_STRIDE_IBM* = 103080.GLenum
  GL_NORMAL_ARRAY_LIST_STRIDE_IBM* = 103081.GLenum
  GL_COLOR_ARRAY_LIST_STRIDE_IBM* = 103082.GLenum
  GL_INDEX_ARRAY_LIST_STRIDE_IBM* = 103083.GLenum
  GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM* = 103084.GLenum
  GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM* = 103085.GLenum
  GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM* = 103086.GLenum
  GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM* = 103087.GLenum

  GLAD_GL_INGR_blend_func_separate*: bool

  GLAD_GL_INGR_color_clamp*: bool
  GL_RED_MIN_CLAMP_INGR* = 0x8560.GLenum
  GL_GREEN_MIN_CLAMP_INGR* = 0x8561.GLenum
  GL_BLUE_MIN_CLAMP_INGR* = 0x8562.GLenum
  GL_ALPHA_MIN_CLAMP_INGR* = 0x8563.GLenum
  GL_RED_MAX_CLAMP_INGR* = 0x8564.GLenum
  GL_GREEN_MAX_CLAMP_INGR* = 0x8565.GLenum
  GL_BLUE_MAX_CLAMP_INGR* = 0x8566.GLenum
  GL_ALPHA_MAX_CLAMP_INGR* = 0x8567.GLenum

  GLAD_GL_INGR_interlace_read*: bool
  GL_INTERLACE_READ_INGR* = 0x8568.GLenum

  GLAD_GL_INTEL_blackhole_render*: bool
  GL_BLACKHOLE_RENDER_INTEL* = 0x83FC.GLenum

  GLAD_GL_INTEL_conservative_rasterization*: bool
  GL_CONSERVATIVE_RASTERIZATION_INTEL* = 0x83FE.GLenum

  GLAD_GL_INTEL_fragment_shader_ordering*: bool

  GLAD_GL_INTEL_framebuffer_CMAA*: bool

  GLAD_GL_INTEL_map_texture*: bool
  GL_TEXTURE_MEMORY_LAYOUT_INTEL* = 0x83FF.GLenum
  GL_LAYOUT_DEFAULT_INTEL* = 0.GLenum
  GL_LAYOUT_LINEAR_INTEL* = 1.GLenum
  GL_LAYOUT_LINEAR_CPU_CACHED_INTEL* = 2.GLenum

  GLAD_GL_INTEL_parallel_arrays*: bool
  GL_PARALLEL_ARRAYS_INTEL* = 0x83F4.GLenum
  GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F5.GLenum
  GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F6.GLenum
  GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F7.GLenum
  GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL* = 0x83F8.GLenum

  GLAD_GL_INTEL_performance_query*: bool
  GL_PERFQUERY_SINGLE_CONTEXT_INTEL* = 0x00000000.GLenum
  GL_PERFQUERY_GLOBAL_CONTEXT_INTEL* = 0x00000001.GLenum
  GL_PERFQUERY_WAIT_INTEL* = 0x83FB.GLenum
  GL_PERFQUERY_FLUSH_INTEL* = 0x83FA.GLenum
  GL_PERFQUERY_DONOT_FLUSH_INTEL* = 0x83F9.GLenum
  GL_PERFQUERY_COUNTER_EVENT_INTEL* = 0x94F0.GLenum
  GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL* = 0x94F1.GLenum
  GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL* = 0x94F2.GLenum
  GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL* = 0x94F3.GLenum
  GL_PERFQUERY_COUNTER_RAW_INTEL* = 0x94F4.GLenum
  GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL* = 0x94F5.GLenum
  GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL* = 0x94F8.GLenum
  GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL* = 0x94F9.GLenum
  GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL* = 0x94FA.GLenum
  GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL* = 0x94FB.GLenum
  GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL* = 0x94FC.GLenum
  GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL* = 0x94FD.GLenum
  GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL* = 0x94FE.GLenum
  GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL* = 0x94FF.GLenum
  GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL* = 0x9500.GLenum

  GLAD_GL_KHR_blend_equation_advanced*: bool
  GL_MULTIPLY_KHR* = 0x9294.GLenum
  GL_SCREEN_KHR* = 0x9295.GLenum
  GL_OVERLAY_KHR* = 0x9296.GLenum
  GL_DARKEN_KHR* = 0x9297.GLenum
  GL_LIGHTEN_KHR* = 0x9298.GLenum
  GL_COLORDODGE_KHR* = 0x9299.GLenum
  GL_COLORBURN_KHR* = 0x929A.GLenum
  GL_HARDLIGHT_KHR* = 0x929B.GLenum
  GL_SOFTLIGHT_KHR* = 0x929C.GLenum
  GL_DIFFERENCE_KHR* = 0x929E.GLenum
  GL_EXCLUSION_KHR* = 0x92A0.GLenum
  GL_HSL_HUE_KHR* = 0x92AD.GLenum
  GL_HSL_SATURATION_KHR* = 0x92AE.GLenum
  GL_HSL_COLOR_KHR* = 0x92AF.GLenum
  GL_HSL_LUMINOSITY_KHR* = 0x92B0.GLenum

  GLAD_GL_KHR_blend_equation_advanced_coherent*: bool
  GL_BLEND_ADVANCED_COHERENT_KHR* = 0x9285.GLenum

  GLAD_GL_KHR_context_flush_control*: bool
  GL_CONTEXT_RELEASE_BEHAVIOR_KHR* = 0x82FB.GLenum
  GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR* = 0x82FC.GLenum

  GLAD_GL_KHR_debug*: bool
  GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR* = 0x8242.GLenum
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR* = 0x8243.GLenum
  GL_DEBUG_CALLBACK_FUNCTION_KHR* = 0x8244.GLenum
  GL_DEBUG_CALLBACK_USER_PARAM_KHR* = 0x8245.GLenum
  GL_DEBUG_SOURCE_API_KHR* = 0x8246.GLenum
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR* = 0x8247.GLenum
  GL_DEBUG_SOURCE_SHADER_COMPILER_KHR* = 0x8248.GLenum
  GL_DEBUG_SOURCE_THIRD_PARTY_KHR* = 0x8249.GLenum
  GL_DEBUG_SOURCE_APPLICATION_KHR* = 0x824A.GLenum
  GL_DEBUG_SOURCE_OTHER_KHR* = 0x824B.GLenum
  GL_DEBUG_TYPE_ERROR_KHR* = 0x824C.GLenum
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR* = 0x824D.GLenum
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR* = 0x824E.GLenum
  GL_DEBUG_TYPE_PORTABILITY_KHR* = 0x824F.GLenum
  GL_DEBUG_TYPE_PERFORMANCE_KHR* = 0x8250.GLenum
  GL_DEBUG_TYPE_OTHER_KHR* = 0x8251.GLenum
  GL_DEBUG_TYPE_MARKER_KHR* = 0x8268.GLenum
  GL_DEBUG_TYPE_PUSH_GROUP_KHR* = 0x8269.GLenum
  GL_DEBUG_TYPE_POP_GROUP_KHR* = 0x826A.GLenum
  GL_DEBUG_SEVERITY_NOTIFICATION_KHR* = 0x826B.GLenum
  GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR* = 0x826C.GLenum
  GL_DEBUG_GROUP_STACK_DEPTH_KHR* = 0x826D.GLenum
  GL_BUFFER_KHR* = 0x82E0.GLenum
  GL_SHADER_KHR* = 0x82E1.GLenum
  GL_PROGRAM_KHR* = 0x82E2.GLenum
  GL_VERTEX_ARRAY_KHR* = 0x8074.GLenum
  GL_QUERY_KHR* = 0x82E3.GLenum
  GL_PROGRAM_PIPELINE_KHR* = 0x82E4.GLenum
  GL_SAMPLER_KHR* = 0x82E6.GLenum
  GL_MAX_LABEL_LENGTH_KHR* = 0x82E8.GLenum
  GL_MAX_DEBUG_MESSAGE_LENGTH_KHR* = 0x9143.GLenum
  GL_MAX_DEBUG_LOGGED_MESSAGES_KHR* = 0x9144.GLenum
  GL_DEBUG_LOGGED_MESSAGES_KHR* = 0x9145.GLenum
  GL_DEBUG_SEVERITY_HIGH_KHR* = 0x9146.GLenum
  GL_DEBUG_SEVERITY_MEDIUM_KHR* = 0x9147.GLenum
  GL_DEBUG_SEVERITY_LOW_KHR* = 0x9148.GLenum
  GL_DEBUG_OUTPUT_KHR* = 0x92E0.GLenum
  GL_CONTEXT_FLAG_DEBUG_BIT_KHR* = 0x00000002.GLbitfield
  GL_STACK_OVERFLOW_KHR* = 0x0503.GLenum
  GL_STACK_UNDERFLOW_KHR* = 0x0504.GLenum

  GLAD_GL_KHR_no_error*: bool
  GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR* = 0x00000008.GLbitfield

  GLAD_GL_KHR_parallel_shader_compile*: bool
  GL_MAX_SHADER_COMPILER_THREADS_KHR* = 0x91B0.GLenum
  GL_COMPLETION_STATUS_KHR* = 0x91B1.GLenum

  GLAD_GL_KHR_robust_buffer_access_behavior*: bool

  GLAD_GL_KHR_robustness*: bool
  GL_CONTEXT_ROBUST_ACCESS* = 0x90F3.GLenum
  GL_CONTEXT_ROBUST_ACCESS_KHR* = 0x90F3.GLenum
  GL_LOSE_CONTEXT_ON_RESET_KHR* = 0x8252.GLenum
  GL_GUILTY_CONTEXT_RESET_KHR* = 0x8253.GLenum
  GL_INNOCENT_CONTEXT_RESET_KHR* = 0x8254.GLenum
  GL_UNKNOWN_CONTEXT_RESET_KHR* = 0x8255.GLenum
  GL_RESET_NOTIFICATION_STRATEGY_KHR* = 0x8256.GLenum
  GL_NO_RESET_NOTIFICATION_KHR* = 0x8261.GLenum
  GL_CONTEXT_LOST_KHR* = 0x0507.GLenum

  GLAD_GL_KHR_shader_subgroup*: bool
  GL_SUBGROUP_SIZE_KHR* = 0x9532.GLenum
  GL_SUBGROUP_SUPPORTED_STAGES_KHR* = 0x9533.GLenum
  GL_SUBGROUP_SUPPORTED_FEATURES_KHR* = 0x9534.GLenum
  GL_SUBGROUP_QUAD_ALL_STAGES_KHR* = 0x9535.GLenum
  GL_SUBGROUP_FEATURE_BASIC_BIT_KHR* = 0x00000001.GLbitfield
  GL_SUBGROUP_FEATURE_VOTE_BIT_KHR* = 0x00000002.GLbitfield
  GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR* = 0x00000004.GLbitfield
  GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR* = 0x00000008.GLbitfield
  GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR* = 0x00000010.GLbitfield
  GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR* = 0x00000020.GLbitfield
  GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR* = 0x00000040.GLbitfield
  GL_SUBGROUP_FEATURE_QUAD_BIT_KHR* = 0x00000080.GLbitfield

  GLAD_GL_KHR_texture_compression_astc_hdr*: bool
  GL_COMPRESSED_RGBA_ASTC_4x4_KHR* = 0x93B0.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x4_KHR* = 0x93B1.GLenum
  GL_COMPRESSED_RGBA_ASTC_5x5_KHR* = 0x93B2.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x5_KHR* = 0x93B3.GLenum
  GL_COMPRESSED_RGBA_ASTC_6x6_KHR* = 0x93B4.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x5_KHR* = 0x93B5.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x6_KHR* = 0x93B6.GLenum
  GL_COMPRESSED_RGBA_ASTC_8x8_KHR* = 0x93B7.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x5_KHR* = 0x93B8.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x6_KHR* = 0x93B9.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x8_KHR* = 0x93BA.GLenum
  GL_COMPRESSED_RGBA_ASTC_10x10_KHR* = 0x93BB.GLenum
  GL_COMPRESSED_RGBA_ASTC_12x10_KHR* = 0x93BC.GLenum
  GL_COMPRESSED_RGBA_ASTC_12x12_KHR* = 0x93BD.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR* = 0x93D0.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR* = 0x93D1.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR* = 0x93D2.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR* = 0x93D3.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR* = 0x93D4.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR* = 0x93D5.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR* = 0x93D6.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR* = 0x93D7.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR* = 0x93D8.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR* = 0x93D9.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR* = 0x93DA.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR* = 0x93DB.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR* = 0x93DC.GLenum
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR* = 0x93DD.GLenum

  GLAD_GL_KHR_texture_compression_astc_ldr*: bool

  GLAD_GL_KHR_texture_compression_astc_sliced_3d*: bool

  GLAD_GL_MESAX_texture_stack*: bool
  GL_TEXTURE_1D_STACK_MESAX* = 0x8759.GLenum
  GL_TEXTURE_2D_STACK_MESAX* = 0x875A.GLenum
  GL_PROXY_TEXTURE_1D_STACK_MESAX* = 0x875B.GLenum
  GL_PROXY_TEXTURE_2D_STACK_MESAX* = 0x875C.GLenum
  GL_TEXTURE_1D_STACK_BINDING_MESAX* = 0x875D.GLenum
  GL_TEXTURE_2D_STACK_BINDING_MESAX* = 0x875E.GLenum

  GLAD_GL_MESA_framebuffer_flip_x*: bool
  GL_FRAMEBUFFER_FLIP_X_MESA* = 0x8BBC.GLenum

  GLAD_GL_MESA_framebuffer_flip_y*: bool
  GL_FRAMEBUFFER_FLIP_Y_MESA* = 0x8BBB.GLenum

  GLAD_GL_MESA_framebuffer_swap_xy*: bool
  GL_FRAMEBUFFER_SWAP_XY_MESA* = 0x8BBD.GLenum

  GLAD_GL_MESA_pack_invert*: bool
  GL_PACK_INVERT_MESA* = 0x8758.GLenum

  GLAD_GL_MESA_program_binary_formats*: bool
  GL_PROGRAM_BINARY_FORMAT_MESA* = 0x875F.GLenum

  GLAD_GL_MESA_resize_buffers*: bool

  GLAD_GL_MESA_shader_integer_functions*: bool

  GLAD_GL_MESA_tile_raster_order*: bool
  GL_TILE_RASTER_ORDER_FIXED_MESA* = 0x8BB8.GLenum
  GL_TILE_RASTER_ORDER_INCREASING_X_MESA* = 0x8BB9.GLenum
  GL_TILE_RASTER_ORDER_INCREASING_Y_MESA* = 0x8BBA.GLenum

  GLAD_GL_MESA_window_pos*: bool

  GLAD_GL_MESA_ycbcr_texture*: bool
  GL_UNSIGNED_SHORT_8_8_MESA* = 0x85BA.GLenum
  GL_UNSIGNED_SHORT_8_8_REV_MESA* = 0x85BB.GLenum
  GL_YCBCR_MESA* = 0x8757.GLenum

  GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers*: bool

  GLAD_GL_NVX_conditional_render*: bool

  GLAD_GL_NVX_gpu_memory_info*: bool
  GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX* = 0x9047.GLenum
  GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX* = 0x9048.GLenum
  GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX* = 0x9049.GLenum
  GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX* = 0x904A.GLenum
  GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX* = 0x904B.GLenum

  GLAD_GL_NVX_gpu_multicast2*: bool
  GL_UPLOAD_GPU_MASK_NVX* = 0x954A.GLenum

  GLAD_GL_NVX_linked_gpu_multicast*: bool
  GL_LGPU_SEPARATE_STORAGE_BIT_NVX* = 0x0800.GLbitfield
  GL_MAX_LGPU_GPUS_NVX* = 0x92BA.GLenum

  GLAD_GL_NVX_progress_fence*: bool

  GLAD_GL_NV_alpha_to_coverage_dither_control*: bool
  GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV* = 0x934D.GLenum
  GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV* = 0x934E.GLenum
  GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV* = 0x934F.GLenum
  GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV* = 0x92BF.GLenum

  GLAD_GL_NV_bindless_multi_draw_indirect*: bool

  GLAD_GL_NV_bindless_multi_draw_indirect_count*: bool

  GLAD_GL_NV_bindless_texture*: bool

  GLAD_GL_NV_blend_equation_advanced*: bool
  GL_BLEND_OVERLAP_NV* = 0x9281.GLenum
  GL_BLEND_PREMULTIPLIED_SRC_NV* = 0x9280.GLenum
  GL_BLUE_NV* = 0x1905.GLenum
  GL_COLORBURN_NV* = 0x929A.GLenum
  GL_COLORDODGE_NV* = 0x9299.GLenum
  GL_CONJOINT_NV* = 0x9284.GLenum
  GL_CONTRAST_NV* = 0x92A1.GLenum
  GL_DARKEN_NV* = 0x9297.GLenum
  GL_DIFFERENCE_NV* = 0x929E.GLenum
  GL_DISJOINT_NV* = 0x9283.GLenum
  GL_DST_ATOP_NV* = 0x928F.GLenum
  GL_DST_IN_NV* = 0x928B.GLenum
  GL_DST_NV* = 0x9287.GLenum
  GL_DST_OUT_NV* = 0x928D.GLenum
  GL_DST_OVER_NV* = 0x9289.GLenum
  GL_EXCLUSION_NV* = 0x92A0.GLenum
  GL_GREEN_NV* = 0x1904.GLenum
  GL_HARDLIGHT_NV* = 0x929B.GLenum
  GL_HARDMIX_NV* = 0x92A9.GLenum
  GL_HSL_COLOR_NV* = 0x92AF.GLenum
  GL_HSL_HUE_NV* = 0x92AD.GLenum
  GL_HSL_LUMINOSITY_NV* = 0x92B0.GLenum
  GL_HSL_SATURATION_NV* = 0x92AE.GLenum
  GL_INVERT_OVG_NV* = 0x92B4.GLenum
  GL_INVERT_RGB_NV* = 0x92A3.GLenum
  GL_LIGHTEN_NV* = 0x9298.GLenum
  GL_LINEARBURN_NV* = 0x92A5.GLenum
  GL_LINEARDODGE_NV* = 0x92A4.GLenum
  GL_LINEARLIGHT_NV* = 0x92A7.GLenum
  GL_MINUS_CLAMPED_NV* = 0x92B3.GLenum
  GL_MINUS_NV* = 0x929F.GLenum
  GL_MULTIPLY_NV* = 0x9294.GLenum
  GL_OVERLAY_NV* = 0x9296.GLenum
  GL_PINLIGHT_NV* = 0x92A8.GLenum
  GL_PLUS_CLAMPED_ALPHA_NV* = 0x92B2.GLenum
  GL_PLUS_CLAMPED_NV* = 0x92B1.GLenum
  GL_PLUS_DARKER_NV* = 0x9292.GLenum
  GL_PLUS_NV* = 0x9291.GLenum
  GL_RED_NV* = 0x1903.GLenum
  GL_SCREEN_NV* = 0x9295.GLenum
  GL_SOFTLIGHT_NV* = 0x929C.GLenum
  GL_SRC_ATOP_NV* = 0x928E.GLenum
  GL_SRC_IN_NV* = 0x928A.GLenum
  GL_SRC_NV* = 0x9286.GLenum
  GL_SRC_OUT_NV* = 0x928C.GLenum
  GL_SRC_OVER_NV* = 0x9288.GLenum
  GL_UNCORRELATED_NV* = 0x9282.GLenum
  GL_VIVIDLIGHT_NV* = 0x92A6.GLenum
  GL_XOR_NV* = 0x1506.GLenum

  GLAD_GL_NV_blend_equation_advanced_coherent*: bool
  GL_BLEND_ADVANCED_COHERENT_NV* = 0x9285.GLenum

  GLAD_GL_NV_blend_minmax_factor*: bool

  GLAD_GL_NV_blend_square*: bool

  GLAD_GL_NV_clip_space_w_scaling*: bool
  GL_VIEWPORT_POSITION_W_SCALE_NV* = 0x937C.GLenum
  GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV* = 0x937D.GLenum
  GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV* = 0x937E.GLenum

  GLAD_GL_NV_command_list*: bool
  GL_TERMINATE_SEQUENCE_COMMAND_NV* = 0x0000.GLenum
  GL_NOP_COMMAND_NV* = 0x0001.GLenum
  GL_DRAW_ELEMENTS_COMMAND_NV* = 0x0002.GLenum
  GL_DRAW_ARRAYS_COMMAND_NV* = 0x0003.GLenum
  GL_DRAW_ELEMENTS_STRIP_COMMAND_NV* = 0x0004.GLenum
  GL_DRAW_ARRAYS_STRIP_COMMAND_NV* = 0x0005.GLenum
  GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV* = 0x0006.GLenum
  GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV* = 0x0007.GLenum
  GL_ELEMENT_ADDRESS_COMMAND_NV* = 0x0008.GLenum
  GL_ATTRIBUTE_ADDRESS_COMMAND_NV* = 0x0009.GLenum
  GL_UNIFORM_ADDRESS_COMMAND_NV* = 0x000A.GLenum
  GL_BLEND_COLOR_COMMAND_NV* = 0x000B.GLenum
  GL_STENCIL_REF_COMMAND_NV* = 0x000C.GLenum
  GL_LINE_WIDTH_COMMAND_NV* = 0x000D.GLenum
  GL_POLYGON_OFFSET_COMMAND_NV* = 0x000E.GLenum
  GL_ALPHA_REF_COMMAND_NV* = 0x000F.GLenum
  GL_VIEWPORT_COMMAND_NV* = 0x0010.GLenum
  GL_SCISSOR_COMMAND_NV* = 0x0011.GLenum
  GL_FRONT_FACE_COMMAND_NV* = 0x0012.GLenum

  GLAD_GL_NV_compute_program5*: bool
  GL_COMPUTE_PROGRAM_NV* = 0x90FB.GLenum
  GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV* = 0x90FC.GLenum

  GLAD_GL_NV_compute_shader_derivatives*: bool

  GLAD_GL_NV_conditional_render*: bool
  GL_QUERY_WAIT_NV* = 0x8E13.GLenum
  GL_QUERY_NO_WAIT_NV* = 0x8E14.GLenum
  GL_QUERY_BY_REGION_WAIT_NV* = 0x8E15.GLenum
  GL_QUERY_BY_REGION_NO_WAIT_NV* = 0x8E16.GLenum

  GLAD_GL_NV_conservative_raster*: bool
  GL_CONSERVATIVE_RASTERIZATION_NV* = 0x9346.GLenum
  GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV* = 0x9347.GLbitfield
  GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV* = 0x9348.GLbitfield
  GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV* = 0x9349.GLbitfield

  GLAD_GL_NV_conservative_raster_dilate*: bool
  GL_CONSERVATIVE_RASTER_DILATE_NV* = 0x9379.GLenum
  GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV* = 0x937A.GLenum
  GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV* = 0x937B.GLenum

  GLAD_GL_NV_conservative_raster_pre_snap*: bool
  GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV* = 0x9550.GLenum

  GLAD_GL_NV_conservative_raster_pre_snap_triangles*: bool
  GL_CONSERVATIVE_RASTER_MODE_NV* = 0x954D.GLenum
  GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV* = 0x954E.GLenum
  GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV* = 0x954F.GLenum

  GLAD_GL_NV_conservative_raster_underestimation*: bool

  GLAD_GL_NV_copy_depth_to_color*: bool
  GL_DEPTH_STENCIL_TO_RGBA_NV* = 0x886E.GLenum
  GL_DEPTH_STENCIL_TO_BGRA_NV* = 0x886F.GLenum

  GLAD_GL_NV_copy_image*: bool

  GLAD_GL_NV_deep_texture3D*: bool
  GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV* = 0x90D0.GLenum
  GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV* = 0x90D1.GLenum

  GLAD_GL_NV_depth_buffer_float*: bool
  GL_DEPTH_COMPONENT32F_NV* = 0x8DAB.GLenum
  GL_DEPTH32F_STENCIL8_NV* = 0x8DAC.GLenum
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV* = 0x8DAD.GLenum
  GL_DEPTH_BUFFER_FLOAT_MODE_NV* = 0x8DAF.GLenum

  GLAD_GL_NV_depth_clamp*: bool
  GL_DEPTH_CLAMP_NV* = 0x864F.GLenum

  GLAD_GL_NV_draw_texture*: bool

  GLAD_GL_NV_draw_vulkan_image*: bool

  GLAD_GL_NV_evaluators*: bool
  GL_EVAL_2D_NV* = 0x86C0.GLenum
  GL_EVAL_TRIANGULAR_2D_NV* = 0x86C1.GLenum
  GL_MAP_TESSELLATION_NV* = 0x86C2.GLenum
  GL_MAP_ATTRIB_U_ORDER_NV* = 0x86C3.GLenum
  GL_MAP_ATTRIB_V_ORDER_NV* = 0x86C4.GLenum
  GL_EVAL_FRACTIONAL_TESSELLATION_NV* = 0x86C5.GLenum
  GL_EVAL_VERTEX_ATTRIB0_NV* = 0x86C6.GLenum
  GL_EVAL_VERTEX_ATTRIB1_NV* = 0x86C7.GLenum
  GL_EVAL_VERTEX_ATTRIB2_NV* = 0x86C8.GLenum
  GL_EVAL_VERTEX_ATTRIB3_NV* = 0x86C9.GLenum
  GL_EVAL_VERTEX_ATTRIB4_NV* = 0x86CA.GLenum
  GL_EVAL_VERTEX_ATTRIB5_NV* = 0x86CB.GLenum
  GL_EVAL_VERTEX_ATTRIB6_NV* = 0x86CC.GLenum
  GL_EVAL_VERTEX_ATTRIB7_NV* = 0x86CD.GLenum
  GL_EVAL_VERTEX_ATTRIB8_NV* = 0x86CE.GLenum
  GL_EVAL_VERTEX_ATTRIB9_NV* = 0x86CF.GLenum
  GL_EVAL_VERTEX_ATTRIB10_NV* = 0x86D0.GLenum
  GL_EVAL_VERTEX_ATTRIB11_NV* = 0x86D1.GLenum
  GL_EVAL_VERTEX_ATTRIB12_NV* = 0x86D2.GLenum
  GL_EVAL_VERTEX_ATTRIB13_NV* = 0x86D3.GLenum
  GL_EVAL_VERTEX_ATTRIB14_NV* = 0x86D4.GLenum
  GL_EVAL_VERTEX_ATTRIB15_NV* = 0x86D5.GLenum
  GL_MAX_MAP_TESSELLATION_NV* = 0x86D6.GLenum
  GL_MAX_RATIONAL_EVAL_ORDER_NV* = 0x86D7.GLenum

  GLAD_GL_NV_explicit_multisample*: bool
  GL_SAMPLE_POSITION_NV* = 0x8E50.GLenum
  GL_SAMPLE_MASK_NV* = 0x8E51.GLenum
  GL_SAMPLE_MASK_VALUE_NV* = 0x8E52.GLenum
  GL_TEXTURE_BINDING_RENDERBUFFER_NV* = 0x8E53.GLenum
  GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV* = 0x8E54.GLenum
  GL_TEXTURE_RENDERBUFFER_NV* = 0x8E55.GLenum
  GL_SAMPLER_RENDERBUFFER_NV* = 0x8E56.GLenum
  GL_INT_SAMPLER_RENDERBUFFER_NV* = 0x8E57.GLenum
  GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV* = 0x8E58.GLenum
  GL_MAX_SAMPLE_MASK_WORDS_NV* = 0x8E59.GLenum

  GLAD_GL_NV_fence*: bool
  GL_ALL_COMPLETED_NV* = 0x84F2.GLenum
  GL_FENCE_STATUS_NV* = 0x84F3.GLenum
  GL_FENCE_CONDITION_NV* = 0x84F4.GLenum

  GLAD_GL_NV_fill_rectangle*: bool
  GL_FILL_RECTANGLE_NV* = 0x933C.GLenum

  GLAD_GL_NV_float_buffer*: bool
  GL_FLOAT_R_NV* = 0x8880.GLenum
  GL_FLOAT_RG_NV* = 0x8881.GLenum
  GL_FLOAT_RGB_NV* = 0x8882.GLenum
  GL_FLOAT_RGBA_NV* = 0x8883.GLenum
  GL_FLOAT_R16_NV* = 0x8884.GLenum
  GL_FLOAT_R32_NV* = 0x8885.GLenum
  GL_FLOAT_RG16_NV* = 0x8886.GLenum
  GL_FLOAT_RG32_NV* = 0x8887.GLenum
  GL_FLOAT_RGB16_NV* = 0x8888.GLenum
  GL_FLOAT_RGB32_NV* = 0x8889.GLenum
  GL_FLOAT_RGBA16_NV* = 0x888A.GLenum
  GL_FLOAT_RGBA32_NV* = 0x888B.GLenum
  GL_TEXTURE_FLOAT_COMPONENTS_NV* = 0x888C.GLenum
  GL_FLOAT_CLEAR_COLOR_VALUE_NV* = 0x888D.GLenum
  GL_FLOAT_RGBA_MODE_NV* = 0x888E.GLenum

  GLAD_GL_NV_fog_distance*: bool
  GL_FOG_DISTANCE_MODE_NV* = 0x855A.GLenum
  GL_EYE_RADIAL_NV* = 0x855B.GLenum
  GL_EYE_PLANE_ABSOLUTE_NV* = 0x855C.GLenum
  GL_EYE_PLANE* = 0x2502.GLenum

  GLAD_GL_NV_fragment_coverage_to_color*: bool
  GL_FRAGMENT_COVERAGE_TO_COLOR_NV* = 0x92DD.GLenum
  GL_FRAGMENT_COVERAGE_COLOR_NV* = 0x92DE.GLenum

  GLAD_GL_NV_fragment_program*: bool
  GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV* = 0x8868.GLenum
  GL_FRAGMENT_PROGRAM_NV* = 0x8870.GLenum
  GL_MAX_TEXTURE_COORDS_NV* = 0x8871.GLenum
  GL_MAX_TEXTURE_IMAGE_UNITS_NV* = 0x8872.GLenum
  GL_FRAGMENT_PROGRAM_BINDING_NV* = 0x8873.GLenum
  GL_PROGRAM_ERROR_STRING_NV* = 0x8874.GLenum

  GLAD_GL_NV_fragment_program2*: bool
  GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV* = 0x88F4.GLenum
  GL_MAX_PROGRAM_CALL_DEPTH_NV* = 0x88F5.GLenum
  GL_MAX_PROGRAM_IF_DEPTH_NV* = 0x88F6.GLenum
  GL_MAX_PROGRAM_LOOP_DEPTH_NV* = 0x88F7.GLenum
  GL_MAX_PROGRAM_LOOP_COUNT_NV* = 0x88F8.GLenum

  GLAD_GL_NV_fragment_program4*: bool

  GLAD_GL_NV_fragment_program_option*: bool

  GLAD_GL_NV_fragment_shader_barycentric*: bool

  GLAD_GL_NV_fragment_shader_interlock*: bool

  GLAD_GL_NV_framebuffer_mixed_samples*: bool
  GL_COVERAGE_MODULATION_TABLE_NV* = 0x9331.GLenum
  GL_COLOR_SAMPLES_NV* = 0x8E20.GLenum
  GL_DEPTH_SAMPLES_NV* = 0x932D.GLenum
  GL_STENCIL_SAMPLES_NV* = 0x932E.GLenum
  GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV* = 0x932F.GLenum
  GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV* = 0x9330.GLenum
  GL_COVERAGE_MODULATION_NV* = 0x9332.GLenum
  GL_COVERAGE_MODULATION_TABLE_SIZE_NV* = 0x9333.GLenum

  GLAD_GL_NV_framebuffer_multisample_coverage*: bool
  GL_RENDERBUFFER_COVERAGE_SAMPLES_NV* = 0x8CAB.GLenum
  GL_RENDERBUFFER_COLOR_SAMPLES_NV* = 0x8E10.GLenum
  GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV* = 0x8E11.GLenum
  GL_MULTISAMPLE_COVERAGE_MODES_NV* = 0x8E12.GLenum

  GLAD_GL_NV_geometry_program4*: bool
  GL_GEOMETRY_PROGRAM_NV* = 0x8C26.GLenum
  GL_MAX_PROGRAM_OUTPUT_VERTICES_NV* = 0x8C27.GLenum
  GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV* = 0x8C28.GLenum

  GLAD_GL_NV_geometry_shader4*: bool

  GLAD_GL_NV_geometry_shader_passthrough*: bool

  GLAD_GL_NV_gpu_multicast*: bool
  GL_PER_GPU_STORAGE_BIT_NV* = 0x0800.GLbitfield
  GL_MULTICAST_GPUS_NV* = 0x92BA.GLenum
  GL_RENDER_GPU_MASK_NV* = 0x9558.GLenum
  GL_PER_GPU_STORAGE_NV* = 0x9548.GLenum
  GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV* = 0x9549.GLenum

  GLAD_GL_NV_gpu_program4*: bool
  GL_MIN_PROGRAM_TEXEL_OFFSET_NV* = 0x8904.GLenum
  GL_MAX_PROGRAM_TEXEL_OFFSET_NV* = 0x8905.GLenum
  GL_PROGRAM_ATTRIB_COMPONENTS_NV* = 0x8906.GLenum
  GL_PROGRAM_RESULT_COMPONENTS_NV* = 0x8907.GLenum
  GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV* = 0x8908.GLenum
  GL_MAX_PROGRAM_RESULT_COMPONENTS_NV* = 0x8909.GLenum
  GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV* = 0x8DA5.GLenum
  GL_MAX_PROGRAM_GENERIC_RESULTS_NV* = 0x8DA6.GLenum

  GLAD_GL_NV_gpu_program5*: bool
  GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV* = 0x8E5A.GLenum
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV* = 0x8E5B.GLenum
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV* = 0x8E5C.GLenum
  GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV* = 0x8E5D.GLbitfield
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV* = 0x8E5E.GLenum
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV* = 0x8E5F.GLenum
  GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV* = 0x8F44.GLenum
  GL_MAX_PROGRAM_SUBROUTINE_NUM_NV* = 0x8F45.GLenum

  GLAD_GL_NV_gpu_program5_mem_extended*: bool

  GLAD_GL_NV_gpu_shader5*: bool

  GLAD_GL_NV_half_float*: bool
  GL_HALF_FLOAT_NV* = 0x140B.GLenum

  GLAD_GL_NV_internalformat_sample_query*: bool
  GL_MULTISAMPLES_NV* = 0x9371.GLenum
  GL_SUPERSAMPLE_SCALE_X_NV* = 0x9372.GLenum
  GL_SUPERSAMPLE_SCALE_Y_NV* = 0x9373.GLenum
  GL_CONFORMANT_NV* = 0x9374.GLenum

  GLAD_GL_NV_light_max_exponent*: bool
  GL_MAX_SHININESS_NV* = 0x8504.GLenum
  GL_MAX_SPOT_EXPONENT_NV* = 0x8505.GLenum

  GLAD_GL_NV_memory_attachment*: bool
  GL_ATTACHED_MEMORY_OBJECT_NV* = 0x95A4.GLenum
  GL_ATTACHED_MEMORY_OFFSET_NV* = 0x95A5.GLenum
  GL_MEMORY_ATTACHABLE_ALIGNMENT_NV* = 0x95A6.GLenum
  GL_MEMORY_ATTACHABLE_SIZE_NV* = 0x95A7.GLenum
  GL_MEMORY_ATTACHABLE_NV* = 0x95A8.GLenum
  GL_DETACHED_MEMORY_INCARNATION_NV* = 0x95A9.GLenum
  GL_DETACHED_TEXTURES_NV* = 0x95AA.GLenum
  GL_DETACHED_BUFFERS_NV* = 0x95AB.GLenum
  GL_MAX_DETACHED_TEXTURES_NV* = 0x95AC.GLenum
  GL_MAX_DETACHED_BUFFERS_NV* = 0x95AD.GLenum

  GLAD_GL_NV_memory_object_sparse*: bool

  GLAD_GL_NV_mesh_shader*: bool
  GL_MESH_SHADER_NV* = 0x9559.GLenum
  GL_TASK_SHADER_NV* = 0x955A.GLenum
  GL_MAX_MESH_UNIFORM_BLOCKS_NV* = 0x8E60.GLenum
  GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV* = 0x8E61.GLenum
  GL_MAX_MESH_IMAGE_UNIFORMS_NV* = 0x8E62.GLenum
  GL_MAX_MESH_UNIFORM_COMPONENTS_NV* = 0x8E63.GLenum
  GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV* = 0x8E64.GLenum
  GL_MAX_MESH_ATOMIC_COUNTERS_NV* = 0x8E65.GLenum
  GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV* = 0x8E66.GLenum
  GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV* = 0x8E67.GLenum
  GL_MAX_TASK_UNIFORM_BLOCKS_NV* = 0x8E68.GLenum
  GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV* = 0x8E69.GLenum
  GL_MAX_TASK_IMAGE_UNIFORMS_NV* = 0x8E6A.GLenum
  GL_MAX_TASK_UNIFORM_COMPONENTS_NV* = 0x8E6B.GLenum
  GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV* = 0x8E6C.GLenum
  GL_MAX_TASK_ATOMIC_COUNTERS_NV* = 0x8E6D.GLenum
  GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV* = 0x8E6E.GLenum
  GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV* = 0x8E6F.GLenum
  GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV* = 0x95A2.GLenum
  GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV* = 0x95A3.GLenum
  GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV* = 0x9536.GLenum
  GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV* = 0x9537.GLenum
  GL_MAX_MESH_OUTPUT_VERTICES_NV* = 0x9538.GLenum
  GL_MAX_MESH_OUTPUT_PRIMITIVES_NV* = 0x9539.GLenum
  GL_MAX_TASK_OUTPUT_COUNT_NV* = 0x953A.GLenum
  GL_MAX_DRAW_MESH_TASKS_COUNT_NV* = 0x953D.GLenum
  GL_MAX_MESH_VIEWS_NV* = 0x9557.GLenum
  GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV* = 0x92DF.GLenum
  GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV* = 0x9543.GLenum
  GL_MAX_MESH_WORK_GROUP_SIZE_NV* = 0x953B.GLenum
  GL_MAX_TASK_WORK_GROUP_SIZE_NV* = 0x953C.GLenum
  GL_MESH_WORK_GROUP_SIZE_NV* = 0x953E.GLenum
  GL_TASK_WORK_GROUP_SIZE_NV* = 0x953F.GLenum
  GL_MESH_VERTICES_OUT_NV* = 0x9579.GLenum
  GL_MESH_PRIMITIVES_OUT_NV* = 0x957A.GLenum
  GL_MESH_OUTPUT_TYPE_NV* = 0x957B.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV* = 0x959C.GLenum
  GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV* = 0x959D.GLenum
  GL_REFERENCED_BY_MESH_SHADER_NV* = 0x95A0.GLenum
  GL_REFERENCED_BY_TASK_SHADER_NV* = 0x95A1.GLenum
  GL_MESH_SHADER_BIT_NV* = 0x00000040.GLbitfield
  GL_TASK_SHADER_BIT_NV* = 0x00000080.GLbitfield
  GL_MESH_SUBROUTINE_NV* = 0x957C.GLenum
  GL_TASK_SUBROUTINE_NV* = 0x957D.GLenum
  GL_MESH_SUBROUTINE_UNIFORM_NV* = 0x957E.GLenum
  GL_TASK_SUBROUTINE_UNIFORM_NV* = 0x957F.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV* = 0x959E.GLenum
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV* = 0x959F.GLenum

  GLAD_GL_NV_multisample_coverage*: bool

  GLAD_GL_NV_multisample_filter_hint*: bool
  GL_MULTISAMPLE_FILTER_HINT_NV* = 0x8534.GLenum

  GLAD_GL_NV_occlusion_query*: bool
  GL_PIXEL_COUNTER_BITS_NV* = 0x8864.GLbitfield
  GL_CURRENT_OCCLUSION_QUERY_ID_NV* = 0x8865.GLenum
  GL_PIXEL_COUNT_NV* = 0x8866.GLenum
  GL_PIXEL_COUNT_AVAILABLE_NV* = 0x8867.GLenum

  GLAD_GL_NV_packed_depth_stencil*: bool
  GL_DEPTH_STENCIL_NV* = 0x84F9.GLenum
  GL_UNSIGNED_INT_24_8_NV* = 0x84FA.GLenum

  GLAD_GL_NV_parameter_buffer_object*: bool
  GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV* = 0x8DA0.GLenum
  GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV* = 0x8DA1.GLenum
  GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV* = 0x8DA2.GLenum
  GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV* = 0x8DA3.GLenum
  GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV* = 0x8DA4.GLenum

  GLAD_GL_NV_parameter_buffer_object2*: bool

  GLAD_GL_NV_path_rendering*: bool
  GL_PATH_FORMAT_SVG_NV* = 0x9070.GLenum
  GL_PATH_FORMAT_PS_NV* = 0x9071.GLenum
  GL_STANDARD_FONT_NAME_NV* = 0x9072.GLenum
  GL_SYSTEM_FONT_NAME_NV* = 0x9073.GLenum
  GL_FILE_NAME_NV* = 0x9074.GLenum
  GL_PATH_STROKE_WIDTH_NV* = 0x9075.GLenum
  GL_PATH_END_CAPS_NV* = 0x9076.GLenum
  GL_PATH_INITIAL_END_CAP_NV* = 0x9077.GLenum
  GL_PATH_TERMINAL_END_CAP_NV* = 0x9078.GLenum
  GL_PATH_JOIN_STYLE_NV* = 0x9079.GLenum
  GL_PATH_MITER_LIMIT_NV* = 0x907A.GLenum
  GL_PATH_DASH_CAPS_NV* = 0x907B.GLenum
  GL_PATH_INITIAL_DASH_CAP_NV* = 0x907C.GLenum
  GL_PATH_TERMINAL_DASH_CAP_NV* = 0x907D.GLenum
  GL_PATH_DASH_OFFSET_NV* = 0x907E.GLenum
  GL_PATH_CLIENT_LENGTH_NV* = 0x907F.GLenum
  GL_PATH_FILL_MODE_NV* = 0x9080.GLenum
  GL_PATH_FILL_MASK_NV* = 0x9081.GLenum
  GL_PATH_FILL_COVER_MODE_NV* = 0x9082.GLenum
  GL_PATH_STROKE_COVER_MODE_NV* = 0x9083.GLenum
  GL_PATH_STROKE_MASK_NV* = 0x9084.GLenum
  GL_COUNT_UP_NV* = 0x9088.GLenum
  GL_COUNT_DOWN_NV* = 0x9089.GLenum
  GL_PATH_OBJECT_BOUNDING_BOX_NV* = 0x908A.GLenum
  GL_CONVEX_HULL_NV* = 0x908B.GLenum
  GL_BOUNDING_BOX_NV* = 0x908D.GLenum
  GL_TRANSLATE_X_NV* = 0x908E.GLenum
  GL_TRANSLATE_Y_NV* = 0x908F.GLenum
  GL_TRANSLATE_2D_NV* = 0x9090.GLenum
  GL_TRANSLATE_3D_NV* = 0x9091.GLenum
  GL_AFFINE_2D_NV* = 0x9092.GLenum
  GL_AFFINE_3D_NV* = 0x9094.GLenum
  GL_TRANSPOSE_AFFINE_2D_NV* = 0x9096.GLenum
  GL_TRANSPOSE_AFFINE_3D_NV* = 0x9098.GLenum
  GL_UTF8_NV* = 0x909A.GLenum
  GL_UTF16_NV* = 0x909B.GLenum
  GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV* = 0x909C.GLenum
  GL_PATH_COMMAND_COUNT_NV* = 0x909D.GLenum
  GL_PATH_COORD_COUNT_NV* = 0x909E.GLenum
  GL_PATH_DASH_ARRAY_COUNT_NV* = 0x909F.GLenum
  GL_PATH_COMPUTED_LENGTH_NV* = 0x90A0.GLenum
  GL_PATH_FILL_BOUNDING_BOX_NV* = 0x90A1.GLenum
  GL_PATH_STROKE_BOUNDING_BOX_NV* = 0x90A2.GLenum
  GL_SQUARE_NV* = 0x90A3.GLenum
  GL_ROUND_NV* = 0x90A4.GLenum
  GL_TRIANGULAR_NV* = 0x90A5.GLenum
  GL_BEVEL_NV* = 0x90A6.GLenum
  GL_MITER_REVERT_NV* = 0x90A7.GLenum
  GL_MITER_TRUNCATE_NV* = 0x90A8.GLenum
  GL_SKIP_MISSING_GLYPH_NV* = 0x90A9.GLenum
  GL_USE_MISSING_GLYPH_NV* = 0x90AA.GLenum
  GL_PATH_ERROR_POSITION_NV* = 0x90AB.GLenum
  GL_ACCUM_ADJACENT_PAIRS_NV* = 0x90AD.GLenum
  GL_ADJACENT_PAIRS_NV* = 0x90AE.GLenum
  GL_FIRST_TO_REST_NV* = 0x90AF.GLenum
  GL_PATH_GEN_MODE_NV* = 0x90B0.GLenum
  GL_PATH_GEN_COEFF_NV* = 0x90B1.GLenum
  GL_PATH_GEN_COMPONENTS_NV* = 0x90B3.GLenum
  GL_PATH_STENCIL_FUNC_NV* = 0x90B7.GLenum
  GL_PATH_STENCIL_REF_NV* = 0x90B8.GLenum
  GL_PATH_STENCIL_VALUE_MASK_NV* = 0x90B9.GLenum
  GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV* = 0x90BD.GLenum
  GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV* = 0x90BE.GLenum
  GL_PATH_COVER_DEPTH_FUNC_NV* = 0x90BF.GLenum
  GL_PATH_DASH_OFFSET_RESET_NV* = 0x90B4.GLenum
  GL_MOVE_TO_RESETS_NV* = 0x90B5.GLenum
  GL_MOVE_TO_CONTINUES_NV* = 0x90B6.GLenum
  GL_CLOSE_PATH_NV* = 0x00.GLenum
  GL_MOVE_TO_NV* = 0x02.GLenum
  GL_RELATIVE_MOVE_TO_NV* = 0x03.GLenum
  GL_LINE_TO_NV* = 0x04.GLenum
  GL_RELATIVE_LINE_TO_NV* = 0x05.GLenum
  GL_HORIZONTAL_LINE_TO_NV* = 0x06.GLenum
  GL_RELATIVE_HORIZONTAL_LINE_TO_NV* = 0x07.GLenum
  GL_VERTICAL_LINE_TO_NV* = 0x08.GLenum
  GL_RELATIVE_VERTICAL_LINE_TO_NV* = 0x09.GLenum
  GL_QUADRATIC_CURVE_TO_NV* = 0x0A.GLenum
  GL_RELATIVE_QUADRATIC_CURVE_TO_NV* = 0x0B.GLenum
  GL_CUBIC_CURVE_TO_NV* = 0x0C.GLenum
  GL_RELATIVE_CUBIC_CURVE_TO_NV* = 0x0D.GLenum
  GL_SMOOTH_QUADRATIC_CURVE_TO_NV* = 0x0E.GLenum
  GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV* = 0x0F.GLenum
  GL_SMOOTH_CUBIC_CURVE_TO_NV* = 0x10.GLenum
  GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV* = 0x11.GLenum
  GL_SMALL_CCW_ARC_TO_NV* = 0x12.GLenum
  GL_RELATIVE_SMALL_CCW_ARC_TO_NV* = 0x13.GLenum
  GL_SMALL_CW_ARC_TO_NV* = 0x14.GLenum
  GL_RELATIVE_SMALL_CW_ARC_TO_NV* = 0x15.GLenum
  GL_LARGE_CCW_ARC_TO_NV* = 0x16.GLenum
  GL_RELATIVE_LARGE_CCW_ARC_TO_NV* = 0x17.GLenum
  GL_LARGE_CW_ARC_TO_NV* = 0x18.GLenum
  GL_RELATIVE_LARGE_CW_ARC_TO_NV* = 0x19.GLenum
  GL_RESTART_PATH_NV* = 0xF0.GLenum
  GL_DUP_FIRST_CUBIC_CURVE_TO_NV* = 0xF2.GLenum
  GL_DUP_LAST_CUBIC_CURVE_TO_NV* = 0xF4.GLenum
  GL_RECT_NV* = 0xF6.GLenum
  GL_CIRCULAR_CCW_ARC_TO_NV* = 0xF8.GLenum
  GL_CIRCULAR_CW_ARC_TO_NV* = 0xFA.GLenum
  GL_CIRCULAR_TANGENT_ARC_TO_NV* = 0xFC.GLenum
  GL_ARC_TO_NV* = 0xFE.GLenum
  GL_RELATIVE_ARC_TO_NV* = 0xFF.GLenum
  GL_BOLD_BIT_NV* = 0x01.GLbitfield
  GL_ITALIC_BIT_NV* = 0x02.GLbitfield
  GL_GLYPH_WIDTH_BIT_NV* = 0x01.GLbitfield
  GL_GLYPH_HEIGHT_BIT_NV* = 0x02.GLbitfield
  GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV* = 0x04.GLbitfield
  GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV* = 0x08.GLbitfield
  GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV* = 0x10.GLbitfield
  GL_GLYPH_VERTICAL_BEARING_X_BIT_NV* = 0x20.GLbitfield
  GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV* = 0x40.GLbitfield
  GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV* = 0x80.GLbitfield
  GL_GLYPH_HAS_KERNING_BIT_NV* = 0x100.GLbitfield
  GL_FONT_X_MIN_BOUNDS_BIT_NV* = 0x00010000.GLbitfield
  GL_FONT_Y_MIN_BOUNDS_BIT_NV* = 0x00020000.GLbitfield
  GL_FONT_X_MAX_BOUNDS_BIT_NV* = 0x00040000.GLbitfield
  GL_FONT_Y_MAX_BOUNDS_BIT_NV* = 0x00080000.GLbitfield
  GL_FONT_UNITS_PER_EM_BIT_NV* = 0x00100000.GLbitfield
  GL_FONT_ASCENDER_BIT_NV* = 0x00200000.GLbitfield
  GL_FONT_DESCENDER_BIT_NV* = 0x00400000.GLbitfield
  GL_FONT_HEIGHT_BIT_NV* = 0x00800000.GLbitfield
  GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV* = 0x01000000.GLbitfield
  GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV* = 0x02000000.GLbitfield
  GL_FONT_UNDERLINE_POSITION_BIT_NV* = 0x04000000.GLbitfield
  GL_FONT_UNDERLINE_THICKNESS_BIT_NV* = 0x08000000.GLbitfield
  GL_FONT_HAS_KERNING_BIT_NV* = 0x10000000.GLbitfield
  GL_ROUNDED_RECT_NV* = 0xE8.GLenum
  GL_RELATIVE_ROUNDED_RECT_NV* = 0xE9.GLenum
  GL_ROUNDED_RECT2_NV* = 0xEA.GLenum
  GL_RELATIVE_ROUNDED_RECT2_NV* = 0xEB.GLenum
  GL_ROUNDED_RECT4_NV* = 0xEC.GLenum
  GL_RELATIVE_ROUNDED_RECT4_NV* = 0xED.GLenum
  GL_ROUNDED_RECT8_NV* = 0xEE.GLenum
  GL_RELATIVE_ROUNDED_RECT8_NV* = 0xEF.GLenum
  GL_RELATIVE_RECT_NV* = 0xF7.GLenum
  GL_FONT_GLYPHS_AVAILABLE_NV* = 0x9368.GLenum
  GL_FONT_TARGET_UNAVAILABLE_NV* = 0x9369.GLenum
  GL_FONT_UNAVAILABLE_NV* = 0x936A.GLenum
  GL_FONT_UNINTELLIGIBLE_NV* = 0x936B.GLenum
  GL_CONIC_CURVE_TO_NV* = 0x1A.GLenum
  GL_RELATIVE_CONIC_CURVE_TO_NV* = 0x1B.GLenum
  GL_FONT_NUM_GLYPH_INDICES_BIT_NV* = 0x20000000.GLbitfield
  GL_STANDARD_FONT_FORMAT_NV* = 0x936C.GLenum
  GL_2_BYTES_NV* = 0x1407.GLenum
  GL_3_BYTES_NV* = 0x1408.GLenum
  GL_4_BYTES_NV* = 0x1409.GLenum
  GL_EYE_LINEAR_NV* = 0x2400.GLenum
  GL_OBJECT_LINEAR_NV* = 0x2401.GLenum
  GL_CONSTANT_NV* = 0x8576.GLenum
  GL_PATH_FOG_GEN_MODE_NV* = 0x90AC.GLenum
  GL_PRIMARY_COLOR* = 0x8577.GLenum
  GL_PRIMARY_COLOR_NV* = 0x852C.GLenum
  GL_SECONDARY_COLOR_NV* = 0x852D.GLenum
  GL_PATH_GEN_COLOR_FORMAT_NV* = 0x90B2.GLenum
  GL_PATH_PROJECTION_NV* = 0x1701.GLenum
  GL_PATH_MODELVIEW_NV* = 0x1700.GLenum
  GL_PATH_MODELVIEW_STACK_DEPTH_NV* = 0x0BA3.GLenum
  GL_PATH_MODELVIEW_MATRIX_NV* = 0x0BA6.GLenum
  GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV* = 0x0D36.GLenum
  GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV* = 0x84E3.GLenum
  GL_PATH_PROJECTION_STACK_DEPTH_NV* = 0x0BA4.GLenum
  GL_PATH_PROJECTION_MATRIX_NV* = 0x0BA7.GLenum
  GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV* = 0x0D38.GLenum
  GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV* = 0x84E4.GLenum
  GL_FRAGMENT_INPUT_NV* = 0x936D.GLenum

  GLAD_GL_NV_path_rendering_shared_edge*: bool
  GL_SHARED_EDGE_NV* = 0xC0.GLenum

  GLAD_GL_NV_pixel_data_range*: bool
  GL_WRITE_PIXEL_DATA_RANGE_NV* = 0x8878.GLenum
  GL_READ_PIXEL_DATA_RANGE_NV* = 0x8879.GLenum
  GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV* = 0x887A.GLenum
  GL_READ_PIXEL_DATA_RANGE_LENGTH_NV* = 0x887B.GLenum
  GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV* = 0x887C.GLenum
  GL_READ_PIXEL_DATA_RANGE_POINTER_NV* = 0x887D.GLenum

  GLAD_GL_NV_point_sprite*: bool
  GL_POINT_SPRITE_NV* = 0x8861.GLenum
  GL_COORD_REPLACE_NV* = 0x8862.GLenum
  GL_POINT_SPRITE_R_MODE_NV* = 0x8863.GLenum

  GLAD_GL_NV_present_video*: bool
  GL_FRAME_NV* = 0x8E26.GLenum
  GL_FIELDS_NV* = 0x8E27.GLenum
  GL_CURRENT_TIME_NV* = 0x8E28.GLenum
  GL_NUM_FILL_STREAMS_NV* = 0x8E29.GLenum
  GL_PRESENT_TIME_NV* = 0x8E2A.GLenum
  GL_PRESENT_DURATION_NV* = 0x8E2B.GLenum

  GLAD_GL_NV_primitive_restart*: bool
  GL_PRIMITIVE_RESTART_NV* = 0x8558.GLenum
  GL_PRIMITIVE_RESTART_INDEX_NV* = 0x8559.GLenum

  GLAD_GL_NV_primitive_shading_rate*: bool
  GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV* = 0x95B1.GLenum
  GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV* = 0x95B2.GLenum

  GLAD_GL_NV_query_resource*: bool
  GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV* = 0x9540.GLenum
  GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV* = 0x9542.GLenum
  GL_QUERY_RESOURCE_SYS_RESERVED_NV* = 0x9544.GLenum
  GL_QUERY_RESOURCE_TEXTURE_NV* = 0x9545.GLenum
  GL_QUERY_RESOURCE_RENDERBUFFER_NV* = 0x9546.GLenum
  GL_QUERY_RESOURCE_BUFFEROBJECT_NV* = 0x9547.GLenum

  GLAD_GL_NV_query_resource_tag*: bool

  GLAD_GL_NV_register_combiners*: bool
  GL_REGISTER_COMBINERS_NV* = 0x8522.GLenum
  GL_VARIABLE_A_NV* = 0x8523.GLenum
  GL_VARIABLE_B_NV* = 0x8524.GLenum
  GL_VARIABLE_C_NV* = 0x8525.GLenum
  GL_VARIABLE_D_NV* = 0x8526.GLenum
  GL_VARIABLE_E_NV* = 0x8527.GLenum
  GL_VARIABLE_F_NV* = 0x8528.GLenum
  GL_VARIABLE_G_NV* = 0x8529.GLenum
  GL_CONSTANT_COLOR0_NV* = 0x852A.GLenum
  GL_CONSTANT_COLOR1_NV* = 0x852B.GLenum
  GL_SPARE0_NV* = 0x852E.GLenum
  GL_SPARE1_NV* = 0x852F.GLenum
  GL_DISCARD_NV* = 0x8530.GLenum
  GL_E_TIMES_F_NV* = 0x8531.GLenum
  GL_SPARE0_PLUS_SECONDARY_COLOR_NV* = 0x8532.GLenum
  GL_UNSIGNED_IDENTITY_NV* = 0x8536.GLenum
  GL_UNSIGNED_INVERT_NV* = 0x8537.GLenum
  GL_EXPAND_NORMAL_NV* = 0x8538.GLenum
  GL_EXPAND_NEGATE_NV* = 0x8539.GLenum
  GL_HALF_BIAS_NORMAL_NV* = 0x853A.GLenum
  GL_HALF_BIAS_NEGATE_NV* = 0x853B.GLenum
  GL_SIGNED_IDENTITY_NV* = 0x853C.GLenum
  GL_SIGNED_NEGATE_NV* = 0x853D.GLenum
  GL_SCALE_BY_TWO_NV* = 0x853E.GLenum
  GL_SCALE_BY_FOUR_NV* = 0x853F.GLenum
  GL_SCALE_BY_ONE_HALF_NV* = 0x8540.GLenum
  GL_BIAS_BY_NEGATIVE_ONE_HALF_NV* = 0x8541.GLenum
  GL_COMBINER_INPUT_NV* = 0x8542.GLenum
  GL_COMBINER_MAPPING_NV* = 0x8543.GLenum
  GL_COMBINER_COMPONENT_USAGE_NV* = 0x8544.GLenum
  GL_COMBINER_AB_DOT_PRODUCT_NV* = 0x8545.GLenum
  GL_COMBINER_CD_DOT_PRODUCT_NV* = 0x8546.GLenum
  GL_COMBINER_MUX_SUM_NV* = 0x8547.GLenum
  GL_COMBINER_SCALE_NV* = 0x8548.GLenum
  GL_COMBINER_BIAS_NV* = 0x8549.GLenum
  GL_COMBINER_AB_OUTPUT_NV* = 0x854A.GLenum
  GL_COMBINER_CD_OUTPUT_NV* = 0x854B.GLenum
  GL_COMBINER_SUM_OUTPUT_NV* = 0x854C.GLenum
  GL_MAX_GENERAL_COMBINERS_NV* = 0x854D.GLenum
  GL_NUM_GENERAL_COMBINERS_NV* = 0x854E.GLenum
  GL_COLOR_SUM_CLAMP_NV* = 0x854F.GLenum
  GL_COMBINER0_NV* = 0x8550.GLenum
  GL_COMBINER1_NV* = 0x8551.GLenum
  GL_COMBINER2_NV* = 0x8552.GLenum
  GL_COMBINER3_NV* = 0x8553.GLenum
  GL_COMBINER4_NV* = 0x8554.GLenum
  GL_COMBINER5_NV* = 0x8555.GLenum
  GL_COMBINER6_NV* = 0x8556.GLenum
  GL_COMBINER7_NV* = 0x8557.GLenum
  GL_FOG* = 0x0B60.GLenum

  GLAD_GL_NV_register_combiners2*: bool
  GL_PER_STAGE_CONSTANTS_NV* = 0x8535.GLenum

  GLAD_GL_NV_representative_fragment_test*: bool
  GL_REPRESENTATIVE_FRAGMENT_TEST_NV* = 0x937F.GLenum

  GLAD_GL_NV_robustness_video_memory_purge*: bool
  GL_PURGED_CONTEXT_RESET_NV* = 0x92BB.GLenum

  GLAD_GL_NV_sample_locations*: bool
  GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV* = 0x933D.GLbitfield
  GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV* = 0x933E.GLenum
  GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV* = 0x933F.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV* = 0x9340.GLenum
  GL_SAMPLE_LOCATION_NV* = 0x8E50.GLenum
  GL_PROGRAMMABLE_SAMPLE_LOCATION_NV* = 0x9341.GLenum
  GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV* = 0x9342.GLenum
  GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV* = 0x9343.GLenum

  GLAD_GL_NV_sample_mask_override_coverage*: bool

  GLAD_GL_NV_scissor_exclusive*: bool
  GL_SCISSOR_TEST_EXCLUSIVE_NV* = 0x9555.GLenum
  GL_SCISSOR_BOX_EXCLUSIVE_NV* = 0x9556.GLenum

  GLAD_GL_NV_shader_atomic_counters*: bool

  GLAD_GL_NV_shader_atomic_float*: bool

  GLAD_GL_NV_shader_atomic_float64*: bool

  GLAD_GL_NV_shader_atomic_fp16_vector*: bool

  GLAD_GL_NV_shader_atomic_int64*: bool

  GLAD_GL_NV_shader_buffer_load*: bool
  GL_BUFFER_GPU_ADDRESS_NV* = 0x8F1D.GLenum
  GL_GPU_ADDRESS_NV* = 0x8F34.GLenum
  GL_MAX_SHADER_BUFFER_ADDRESS_NV* = 0x8F35.GLenum

  GLAD_GL_NV_shader_buffer_store*: bool
  GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV* = 0x00000010.GLbitfield

  GLAD_GL_NV_shader_storage_buffer_object*: bool

  GLAD_GL_NV_shader_subgroup_partitioned*: bool
  GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV* = 0x00000100.GLbitfield

  GLAD_GL_NV_shader_texture_footprint*: bool

  GLAD_GL_NV_shader_thread_group*: bool
  GL_WARP_SIZE_NV* = 0x9339.GLenum
  GL_WARPS_PER_SM_NV* = 0x933A.GLenum
  GL_SM_COUNT_NV* = 0x933B.GLenum

  GLAD_GL_NV_shader_thread_shuffle*: bool

  GLAD_GL_NV_shading_rate_image*: bool
  GL_SHADING_RATE_IMAGE_NV* = 0x9563.GLenum
  GL_SHADING_RATE_NO_INVOCATIONS_NV* = 0x9564.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV* = 0x9565.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV* = 0x9566.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV* = 0x9567.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV* = 0x9568.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV* = 0x9569.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV* = 0x956A.GLenum
  GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV* = 0x956B.GLenum
  GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV* = 0x956C.GLenum
  GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV* = 0x956D.GLenum
  GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV* = 0x956E.GLenum
  GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV* = 0x956F.GLenum
  GL_SHADING_RATE_IMAGE_BINDING_NV* = 0x955B.GLenum
  GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV* = 0x955C.GLenum
  GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV* = 0x955D.GLenum
  GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV* = 0x955E.GLenum
  GL_MAX_COARSE_FRAGMENT_SAMPLES_NV* = 0x955F.GLenum
  GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV* = 0x95AE.GLenum
  GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV* = 0x95AF.GLenum
  GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV* = 0x95B0.GLenum

  GLAD_GL_NV_stereo_view_rendering*: bool

  GLAD_GL_NV_tessellation_program5*: bool
  GL_MAX_PROGRAM_PATCH_ATTRIBS_NV* = 0x86D8.GLenum
  GL_TESS_CONTROL_PROGRAM_NV* = 0x891E.GLenum
  GL_TESS_EVALUATION_PROGRAM_NV* = 0x891F.GLenum
  GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV* = 0x8C74.GLenum
  GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV* = 0x8C75.GLenum

  GLAD_GL_NV_texgen_emboss*: bool
  GL_EMBOSS_LIGHT_NV* = 0x855D.GLenum
  GL_EMBOSS_CONSTANT_NV* = 0x855E.GLenum
  GL_EMBOSS_MAP_NV* = 0x855F.GLenum

  GLAD_GL_NV_texgen_reflection*: bool
  GL_NORMAL_MAP_NV* = 0x8511.GLenum
  GL_REFLECTION_MAP_NV* = 0x8512.GLenum

  GLAD_GL_NV_texture_barrier*: bool

  GLAD_GL_NV_texture_compression_vtc*: bool

  GLAD_GL_NV_texture_env_combine4*: bool
  GL_COMBINE4_NV* = 0x8503.GLenum
  GL_SOURCE3_RGB_NV* = 0x8583.GLenum
  GL_SOURCE3_ALPHA_NV* = 0x858B.GLenum
  GL_OPERAND3_RGB_NV* = 0x8593.GLenum
  GL_OPERAND3_ALPHA_NV* = 0x859B.GLenum

  GLAD_GL_NV_texture_expand_normal*: bool
  GL_TEXTURE_UNSIGNED_REMAP_MODE_NV* = 0x888F.GLenum

  GLAD_GL_NV_texture_multisample*: bool
  GL_TEXTURE_COVERAGE_SAMPLES_NV* = 0x9045.GLenum
  GL_TEXTURE_COLOR_SAMPLES_NV* = 0x9046.GLenum

  GLAD_GL_NV_texture_rectangle*: bool
  GL_TEXTURE_RECTANGLE_NV* = 0x84F5.GLenum
  GL_TEXTURE_BINDING_RECTANGLE_NV* = 0x84F6.GLenum
  GL_PROXY_TEXTURE_RECTANGLE_NV* = 0x84F7.GLenum
  GL_MAX_RECTANGLE_TEXTURE_SIZE_NV* = 0x84F8.GLenum

  GLAD_GL_NV_texture_rectangle_compressed*: bool

  GLAD_GL_NV_texture_shader*: bool
  GL_OFFSET_TEXTURE_RECTANGLE_NV* = 0x864C.GLenum
  GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV* = 0x864D.GLenum
  GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV* = 0x864E.GLenum
  GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV* = 0x86D9.GLenum
  GL_UNSIGNED_INT_S8_S8_8_8_NV* = 0x86DA.GLenum
  GL_UNSIGNED_INT_8_8_S8_S8_REV_NV* = 0x86DB.GLenum
  GL_DSDT_MAG_INTENSITY_NV* = 0x86DC.GLenum
  GL_SHADER_CONSISTENT_NV* = 0x86DD.GLenum
  GL_TEXTURE_SHADER_NV* = 0x86DE.GLenum
  GL_SHADER_OPERATION_NV* = 0x86DF.GLenum
  GL_CULL_MODES_NV* = 0x86E0.GLenum
  GL_OFFSET_TEXTURE_MATRIX_NV* = 0x86E1.GLenum
  GL_OFFSET_TEXTURE_SCALE_NV* = 0x86E2.GLenum
  GL_OFFSET_TEXTURE_BIAS_NV* = 0x86E3.GLenum
  GL_OFFSET_TEXTURE_2D_MATRIX_NV* = 0x86E1.GLenum
  GL_OFFSET_TEXTURE_2D_SCALE_NV* = 0x86E2.GLenum
  GL_OFFSET_TEXTURE_2D_BIAS_NV* = 0x86E3.GLenum
  GL_PREVIOUS_TEXTURE_INPUT_NV* = 0x86E4.GLenum
  GL_CONST_EYE_NV* = 0x86E5.GLenum
  GL_PASS_THROUGH_NV* = 0x86E6.GLenum
  GL_CULL_FRAGMENT_NV* = 0x86E7.GLenum
  GL_OFFSET_TEXTURE_2D_NV* = 0x86E8.GLenum
  GL_DEPENDENT_AR_TEXTURE_2D_NV* = 0x86E9.GLenum
  GL_DEPENDENT_GB_TEXTURE_2D_NV* = 0x86EA.GLenum
  GL_DOT_PRODUCT_NV* = 0x86EC.GLenum
  GL_DOT_PRODUCT_DEPTH_REPLACE_NV* = 0x86ED.GLenum
  GL_DOT_PRODUCT_TEXTURE_2D_NV* = 0x86EE.GLenum
  GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV* = 0x86F0.GLenum
  GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV* = 0x86F1.GLenum
  GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV* = 0x86F2.GLenum
  GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV* = 0x86F3.GLenum
  GL_HILO_NV* = 0x86F4.GLenum
  GL_DSDT_NV* = 0x86F5.GLenum
  GL_DSDT_MAG_NV* = 0x86F6.GLenum
  GL_DSDT_MAG_VIB_NV* = 0x86F7.GLenum
  GL_HILO16_NV* = 0x86F8.GLenum
  GL_SIGNED_HILO_NV* = 0x86F9.GLenum
  GL_SIGNED_HILO16_NV* = 0x86FA.GLenum
  GL_SIGNED_RGBA_NV* = 0x86FB.GLenum
  GL_SIGNED_RGBA8_NV* = 0x86FC.GLenum
  GL_SIGNED_RGB_NV* = 0x86FE.GLenum
  GL_SIGNED_RGB8_NV* = 0x86FF.GLenum
  GL_SIGNED_LUMINANCE_NV* = 0x8701.GLenum
  GL_SIGNED_LUMINANCE8_NV* = 0x8702.GLenum
  GL_SIGNED_LUMINANCE_ALPHA_NV* = 0x8703.GLenum
  GL_SIGNED_LUMINANCE8_ALPHA8_NV* = 0x8704.GLenum
  GL_SIGNED_ALPHA_NV* = 0x8705.GLenum
  GL_SIGNED_ALPHA8_NV* = 0x8706.GLenum
  GL_SIGNED_INTENSITY_NV* = 0x8707.GLenum
  GL_SIGNED_INTENSITY8_NV* = 0x8708.GLenum
  GL_DSDT8_NV* = 0x8709.GLenum
  GL_DSDT8_MAG8_NV* = 0x870A.GLenum
  GL_DSDT8_MAG8_INTENSITY8_NV* = 0x870B.GLenum
  GL_SIGNED_RGB_UNSIGNED_ALPHA_NV* = 0x870C.GLenum
  GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV* = 0x870D.GLenum
  GL_HI_SCALE_NV* = 0x870E.GLenum
  GL_LO_SCALE_NV* = 0x870F.GLenum
  GL_DS_SCALE_NV* = 0x8710.GLenum
  GL_DT_SCALE_NV* = 0x8711.GLenum
  GL_MAGNITUDE_SCALE_NV* = 0x8712.GLenum
  GL_VIBRANCE_SCALE_NV* = 0x8713.GLenum
  GL_HI_BIAS_NV* = 0x8714.GLenum
  GL_LO_BIAS_NV* = 0x8715.GLenum
  GL_DS_BIAS_NV* = 0x8716.GLenum
  GL_DT_BIAS_NV* = 0x8717.GLenum
  GL_MAGNITUDE_BIAS_NV* = 0x8718.GLenum
  GL_VIBRANCE_BIAS_NV* = 0x8719.GLenum
  GL_TEXTURE_BORDER_VALUES_NV* = 0x871A.GLenum
  GL_TEXTURE_HI_SIZE_NV* = 0x871B.GLenum
  GL_TEXTURE_LO_SIZE_NV* = 0x871C.GLenum
  GL_TEXTURE_DS_SIZE_NV* = 0x871D.GLenum
  GL_TEXTURE_DT_SIZE_NV* = 0x871E.GLenum
  GL_TEXTURE_MAG_SIZE_NV* = 0x871F.GLenum

  GLAD_GL_NV_texture_shader2*: bool
  GL_DOT_PRODUCT_TEXTURE_3D_NV* = 0x86EF.GLenum

  GLAD_GL_NV_texture_shader3*: bool
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV* = 0x8850.GLenum
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV* = 0x8851.GLenum
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV* = 0x8852.GLenum
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV* = 0x8853.GLenum
  GL_OFFSET_HILO_TEXTURE_2D_NV* = 0x8854.GLenum
  GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV* = 0x8855.GLenum
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV* = 0x8856.GLenum
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV* = 0x8857.GLenum
  GL_DEPENDENT_HILO_TEXTURE_2D_NV* = 0x8858.GLenum
  GL_DEPENDENT_RGB_TEXTURE_3D_NV* = 0x8859.GLenum
  GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV* = 0x885A.GLenum
  GL_DOT_PRODUCT_PASS_THROUGH_NV* = 0x885B.GLenum
  GL_DOT_PRODUCT_TEXTURE_1D_NV* = 0x885C.GLenum
  GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV* = 0x885D.GLenum
  GL_HILO8_NV* = 0x885E.GLenum
  GL_SIGNED_HILO8_NV* = 0x885F.GLenum
  GL_FORCE_BLUE_TO_ONE_NV* = 0x8860.GLenum

  GLAD_GL_NV_timeline_semaphore*: bool
  GL_TIMELINE_SEMAPHORE_VALUE_NV* = 0x9595.GLenum
  GL_SEMAPHORE_TYPE_NV* = 0x95B3.GLenum
  GL_SEMAPHORE_TYPE_BINARY_NV* = 0x95B4.GLenum
  GL_SEMAPHORE_TYPE_TIMELINE_NV* = 0x95B5.GLenum
  GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV* = 0x95B6.GLenum

  GLAD_GL_NV_transform_feedback*: bool
  GL_BACK_PRIMARY_COLOR_NV* = 0x8C77.GLenum
  GL_BACK_SECONDARY_COLOR_NV* = 0x8C78.GLenum
  GL_TEXTURE_COORD_NV* = 0x8C79.GLenum
  GL_CLIP_DISTANCE_NV* = 0x8C7A.GLenum
  GL_VERTEX_ID_NV* = 0x8C7B.GLenum
  GL_PRIMITIVE_ID_NV* = 0x8C7C.GLenum
  GL_GENERIC_ATTRIB_NV* = 0x8C7D.GLenum
  GL_TRANSFORM_FEEDBACK_ATTRIBS_NV* = 0x8C7E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV* = 0x8C7F.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV* = 0x8C80.GLenum
  GL_ACTIVE_VARYINGS_NV* = 0x8C81.GLenum
  GL_ACTIVE_VARYING_MAX_LENGTH_NV* = 0x8C82.GLenum
  GL_TRANSFORM_FEEDBACK_VARYINGS_NV* = 0x8C83.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_START_NV* = 0x8C84.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV* = 0x8C85.GLenum
  GL_TRANSFORM_FEEDBACK_RECORD_NV* = 0x8C86.GLenum
  GL_PRIMITIVES_GENERATED_NV* = 0x8C87.GLenum
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV* = 0x8C88.GLenum
  GL_RASTERIZER_DISCARD_NV* = 0x8C89.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV* = 0x8C8A.GLenum
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV* = 0x8C8B.GLenum
  GL_INTERLEAVED_ATTRIBS_NV* = 0x8C8C.GLenum
  GL_SEPARATE_ATTRIBS_NV* = 0x8C8D.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_NV* = 0x8C8E.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV* = 0x8C8F.GLenum
  GL_LAYER_NV* = 0x8DAA.GLenum
  GL_NEXT_BUFFER_NV* = -2
  GL_SKIP_COMPONENTS4_NV* = -3
  GL_SKIP_COMPONENTS3_NV* = -4
  GL_SKIP_COMPONENTS2_NV* = -5
  GL_SKIP_COMPONENTS1_NV* = -6

  GLAD_GL_NV_transform_feedback2*: bool
  GL_TRANSFORM_FEEDBACK_NV* = 0x8E22.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV* = 0x8E23.GLenum
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV* = 0x8E24.GLenum
  GL_TRANSFORM_FEEDBACK_BINDING_NV* = 0x8E25.GLenum

  GLAD_GL_NV_uniform_buffer_unified_memory*: bool
  GL_UNIFORM_BUFFER_UNIFIED_NV* = 0x936E.GLenum
  GL_UNIFORM_BUFFER_ADDRESS_NV* = 0x936F.GLenum
  GL_UNIFORM_BUFFER_LENGTH_NV* = 0x9370.GLenum

  GLAD_GL_NV_vdpau_interop*: bool
  GL_SURFACE_STATE_NV* = 0x86EB.GLenum
  GL_SURFACE_REGISTERED_NV* = 0x86FD.GLenum
  GL_SURFACE_MAPPED_NV* = 0x8700.GLenum
  GL_WRITE_DISCARD_NV* = 0x88BE.GLenum

  GLAD_GL_NV_vdpau_interop2*: bool

  GLAD_GL_NV_vertex_array_range*: bool
  GL_VERTEX_ARRAY_RANGE_NV* = 0x851D.GLenum
  GL_VERTEX_ARRAY_RANGE_LENGTH_NV* = 0x851E.GLenum
  GL_VERTEX_ARRAY_RANGE_VALID_NV* = 0x851F.GLenum
  GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV* = 0x8520.GLenum
  GL_VERTEX_ARRAY_RANGE_POINTER_NV* = 0x8521.GLenum

  GLAD_GL_NV_vertex_array_range2*: bool
  GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV* = 0x8533.GLenum

  GLAD_GL_NV_vertex_attrib_integer_64bit*: bool

  GLAD_GL_NV_vertex_buffer_unified_memory*: bool
  GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV* = 0x8F1E.GLenum
  GL_ELEMENT_ARRAY_UNIFIED_NV* = 0x8F1F.GLenum
  GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV* = 0x8F20.GLenum
  GL_VERTEX_ARRAY_ADDRESS_NV* = 0x8F21.GLenum
  GL_NORMAL_ARRAY_ADDRESS_NV* = 0x8F22.GLenum
  GL_COLOR_ARRAY_ADDRESS_NV* = 0x8F23.GLenum
  GL_INDEX_ARRAY_ADDRESS_NV* = 0x8F24.GLenum
  GL_TEXTURE_COORD_ARRAY_ADDRESS_NV* = 0x8F25.GLenum
  GL_EDGE_FLAG_ARRAY_ADDRESS_NV* = 0x8F26.GLenum
  GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV* = 0x8F27.GLenum
  GL_FOG_COORD_ARRAY_ADDRESS_NV* = 0x8F28.GLenum
  GL_ELEMENT_ARRAY_ADDRESS_NV* = 0x8F29.GLenum
  GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV* = 0x8F2A.GLenum
  GL_VERTEX_ARRAY_LENGTH_NV* = 0x8F2B.GLenum
  GL_NORMAL_ARRAY_LENGTH_NV* = 0x8F2C.GLenum
  GL_COLOR_ARRAY_LENGTH_NV* = 0x8F2D.GLenum
  GL_INDEX_ARRAY_LENGTH_NV* = 0x8F2E.GLenum
  GL_TEXTURE_COORD_ARRAY_LENGTH_NV* = 0x8F2F.GLenum
  GL_EDGE_FLAG_ARRAY_LENGTH_NV* = 0x8F30.GLenum
  GL_SECONDARY_COLOR_ARRAY_LENGTH_NV* = 0x8F31.GLenum
  GL_FOG_COORD_ARRAY_LENGTH_NV* = 0x8F32.GLenum
  GL_ELEMENT_ARRAY_LENGTH_NV* = 0x8F33.GLenum
  GL_DRAW_INDIRECT_UNIFIED_NV* = 0x8F40.GLenum
  GL_DRAW_INDIRECT_ADDRESS_NV* = 0x8F41.GLenum
  GL_DRAW_INDIRECT_LENGTH_NV* = 0x8F42.GLenum

  GLAD_GL_NV_vertex_program*: bool
  GL_VERTEX_PROGRAM_NV* = 0x8620.GLenum
  GL_VERTEX_STATE_PROGRAM_NV* = 0x8621.GLenum
  GL_ATTRIB_ARRAY_SIZE_NV* = 0x8623.GLenum
  GL_ATTRIB_ARRAY_STRIDE_NV* = 0x8624.GLenum
  GL_ATTRIB_ARRAY_TYPE_NV* = 0x8625.GLenum
  GL_CURRENT_ATTRIB_NV* = 0x8626.GLenum
  GL_PROGRAM_LENGTH_NV* = 0x8627.GLenum
  GL_PROGRAM_STRING_NV* = 0x8628.GLenum
  GL_MODELVIEW_PROJECTION_NV* = 0x8629.GLenum
  GL_IDENTITY_NV* = 0x862A.GLenum
  GL_INVERSE_NV* = 0x862B.GLenum
  GL_TRANSPOSE_NV* = 0x862C.GLenum
  GL_INVERSE_TRANSPOSE_NV* = 0x862D.GLenum
  GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV* = 0x862E.GLenum
  GL_MAX_TRACK_MATRICES_NV* = 0x862F.GLenum
  GL_MATRIX0_NV* = 0x8630.GLenum
  GL_MATRIX1_NV* = 0x8631.GLenum
  GL_MATRIX2_NV* = 0x8632.GLenum
  GL_MATRIX3_NV* = 0x8633.GLenum
  GL_MATRIX4_NV* = 0x8634.GLenum
  GL_MATRIX5_NV* = 0x8635.GLenum
  GL_MATRIX6_NV* = 0x8636.GLenum
  GL_MATRIX7_NV* = 0x8637.GLenum
  GL_CURRENT_MATRIX_STACK_DEPTH_NV* = 0x8640.GLenum
  GL_CURRENT_MATRIX_NV* = 0x8641.GLenum
  GL_VERTEX_PROGRAM_POINT_SIZE_NV* = 0x8642.GLenum
  GL_VERTEX_PROGRAM_TWO_SIDE_NV* = 0x8643.GLenum
  GL_PROGRAM_PARAMETER_NV* = 0x8644.GLenum
  GL_ATTRIB_ARRAY_POINTER_NV* = 0x8645.GLenum
  GL_PROGRAM_TARGET_NV* = 0x8646.GLenum
  GL_PROGRAM_RESIDENT_NV* = 0x8647.GLenum
  GL_TRACK_MATRIX_NV* = 0x8648.GLenum
  GL_TRACK_MATRIX_TRANSFORM_NV* = 0x8649.GLenum
  GL_VERTEX_PROGRAM_BINDING_NV* = 0x864A.GLenum
  GL_PROGRAM_ERROR_POSITION_NV* = 0x864B.GLenum
  GL_VERTEX_ATTRIB_ARRAY0_NV* = 0x8650.GLenum
  GL_VERTEX_ATTRIB_ARRAY1_NV* = 0x8651.GLenum
  GL_VERTEX_ATTRIB_ARRAY2_NV* = 0x8652.GLenum
  GL_VERTEX_ATTRIB_ARRAY3_NV* = 0x8653.GLenum
  GL_VERTEX_ATTRIB_ARRAY4_NV* = 0x8654.GLenum
  GL_VERTEX_ATTRIB_ARRAY5_NV* = 0x8655.GLenum
  GL_VERTEX_ATTRIB_ARRAY6_NV* = 0x8656.GLenum
  GL_VERTEX_ATTRIB_ARRAY7_NV* = 0x8657.GLenum
  GL_VERTEX_ATTRIB_ARRAY8_NV* = 0x8658.GLenum
  GL_VERTEX_ATTRIB_ARRAY9_NV* = 0x8659.GLenum
  GL_VERTEX_ATTRIB_ARRAY10_NV* = 0x865A.GLenum
  GL_VERTEX_ATTRIB_ARRAY11_NV* = 0x865B.GLenum
  GL_VERTEX_ATTRIB_ARRAY12_NV* = 0x865C.GLenum
  GL_VERTEX_ATTRIB_ARRAY13_NV* = 0x865D.GLenum
  GL_VERTEX_ATTRIB_ARRAY14_NV* = 0x865E.GLenum
  GL_VERTEX_ATTRIB_ARRAY15_NV* = 0x865F.GLenum
  GL_MAP1_VERTEX_ATTRIB0_4_NV* = 0x8660.GLenum
  GL_MAP1_VERTEX_ATTRIB1_4_NV* = 0x8661.GLenum
  GL_MAP1_VERTEX_ATTRIB2_4_NV* = 0x8662.GLenum
  GL_MAP1_VERTEX_ATTRIB3_4_NV* = 0x8663.GLenum
  GL_MAP1_VERTEX_ATTRIB4_4_NV* = 0x8664.GLenum
  GL_MAP1_VERTEX_ATTRIB5_4_NV* = 0x8665.GLenum
  GL_MAP1_VERTEX_ATTRIB6_4_NV* = 0x8666.GLenum
  GL_MAP1_VERTEX_ATTRIB7_4_NV* = 0x8667.GLenum
  GL_MAP1_VERTEX_ATTRIB8_4_NV* = 0x8668.GLenum
  GL_MAP1_VERTEX_ATTRIB9_4_NV* = 0x8669.GLenum
  GL_MAP1_VERTEX_ATTRIB10_4_NV* = 0x866A.GLenum
  GL_MAP1_VERTEX_ATTRIB11_4_NV* = 0x866B.GLenum
  GL_MAP1_VERTEX_ATTRIB12_4_NV* = 0x866C.GLenum
  GL_MAP1_VERTEX_ATTRIB13_4_NV* = 0x866D.GLenum
  GL_MAP1_VERTEX_ATTRIB14_4_NV* = 0x866E.GLenum
  GL_MAP1_VERTEX_ATTRIB15_4_NV* = 0x866F.GLenum
  GL_MAP2_VERTEX_ATTRIB0_4_NV* = 0x8670.GLenum
  GL_MAP2_VERTEX_ATTRIB1_4_NV* = 0x8671.GLenum
  GL_MAP2_VERTEX_ATTRIB2_4_NV* = 0x8672.GLenum
  GL_MAP2_VERTEX_ATTRIB3_4_NV* = 0x8673.GLenum
  GL_MAP2_VERTEX_ATTRIB4_4_NV* = 0x8674.GLenum
  GL_MAP2_VERTEX_ATTRIB5_4_NV* = 0x8675.GLenum
  GL_MAP2_VERTEX_ATTRIB6_4_NV* = 0x8676.GLenum
  GL_MAP2_VERTEX_ATTRIB7_4_NV* = 0x8677.GLenum
  GL_MAP2_VERTEX_ATTRIB8_4_NV* = 0x8678.GLenum
  GL_MAP2_VERTEX_ATTRIB9_4_NV* = 0x8679.GLenum
  GL_MAP2_VERTEX_ATTRIB10_4_NV* = 0x867A.GLenum
  GL_MAP2_VERTEX_ATTRIB11_4_NV* = 0x867B.GLenum
  GL_MAP2_VERTEX_ATTRIB12_4_NV* = 0x867C.GLenum
  GL_MAP2_VERTEX_ATTRIB13_4_NV* = 0x867D.GLenum
  GL_MAP2_VERTEX_ATTRIB14_4_NV* = 0x867E.GLenum
  GL_MAP2_VERTEX_ATTRIB15_4_NV* = 0x867F.GLenum

  GLAD_GL_NV_vertex_program1_1*: bool

  GLAD_GL_NV_vertex_program2*: bool

  GLAD_GL_NV_vertex_program2_option*: bool

  GLAD_GL_NV_vertex_program3*: bool

  GLAD_GL_NV_vertex_program4*: bool
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV* = 0x88FD.GLenum

  GLAD_GL_NV_video_capture*: bool
  GL_VIDEO_BUFFER_NV* = 0x9020.GLenum
  GL_VIDEO_BUFFER_BINDING_NV* = 0x9021.GLenum
  GL_FIELD_UPPER_NV* = 0x9022.GLenum
  GL_FIELD_LOWER_NV* = 0x9023.GLenum
  GL_NUM_VIDEO_CAPTURE_STREAMS_NV* = 0x9024.GLenum
  GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV* = 0x9025.GLenum
  GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV* = 0x9026.GLenum
  GL_LAST_VIDEO_CAPTURE_STATUS_NV* = 0x9027.GLenum
  GL_VIDEO_BUFFER_PITCH_NV* = 0x9028.GLenum
  GL_VIDEO_COLOR_CONVERSION_MATRIX_NV* = 0x9029.GLenum
  GL_VIDEO_COLOR_CONVERSION_MAX_NV* = 0x902A.GLenum
  GL_VIDEO_COLOR_CONVERSION_MIN_NV* = 0x902B.GLenum
  GL_VIDEO_COLOR_CONVERSION_OFFSET_NV* = 0x902C.GLenum
  GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV* = 0x902D.GLenum
  GL_PARTIAL_SUCCESS_NV* = 0x902E.GLenum
  GL_SUCCESS_NV* = 0x902F.GLenum
  GL_FAILURE_NV* = 0x9030.GLenum
  GL_YCBYCR8_422_NV* = 0x9031.GLenum
  GL_YCBAYCR8A_4224_NV* = 0x9032.GLenum
  GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV* = 0x9033.GLenum
  GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV* = 0x9034.GLenum
  GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV* = 0x9035.GLenum
  GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV* = 0x9036.GLenum
  GL_Z4Y12Z4CB12Z4CR12_444_NV* = 0x9037.GLenum
  GL_VIDEO_CAPTURE_FRAME_WIDTH_NV* = 0x9038.GLenum
  GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV* = 0x9039.GLenum
  GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV* = 0x903A.GLenum
  GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV* = 0x903B.GLenum
  GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV* = 0x903C.GLenum

  GLAD_GL_NV_viewport_array2*: bool

  GLAD_GL_NV_viewport_swizzle*: bool
  GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV* = 0x9350.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV* = 0x9351.GLenum
  GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV* = 0x9352.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV* = 0x9353.GLenum
  GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV* = 0x9354.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV* = 0x9355.GLenum
  GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV* = 0x9356.GLenum
  GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV* = 0x9357.GLenum
  GL_VIEWPORT_SWIZZLE_X_NV* = 0x9358.GLenum
  GL_VIEWPORT_SWIZZLE_Y_NV* = 0x9359.GLenum
  GL_VIEWPORT_SWIZZLE_Z_NV* = 0x935A.GLenum
  GL_VIEWPORT_SWIZZLE_W_NV* = 0x935B.GLenum

  GLAD_GL_OES_byte_coordinates*: bool

  GLAD_GL_OES_compressed_paletted_texture*: bool
  GL_PALETTE4_RGB8_OES* = 0x8B90.GLenum
  GL_PALETTE4_RGBA8_OES* = 0x8B91.GLenum
  GL_PALETTE4_R5_G6_B5_OES* = 0x8B92.GLenum
  GL_PALETTE4_RGBA4_OES* = 0x8B93.GLenum
  GL_PALETTE4_RGB5_A1_OES* = 0x8B94.GLenum
  GL_PALETTE8_RGB8_OES* = 0x8B95.GLenum
  GL_PALETTE8_RGBA8_OES* = 0x8B96.GLenum
  GL_PALETTE8_R5_G6_B5_OES* = 0x8B97.GLenum
  GL_PALETTE8_RGBA4_OES* = 0x8B98.GLenum
  GL_PALETTE8_RGB5_A1_OES* = 0x8B99.GLenum

  GLAD_GL_OES_fixed_point*: bool
  GL_FIXED_OES* = 0x140C.GLenum

  GLAD_GL_OES_query_matrix*: bool

  GLAD_GL_OES_read_format*: bool
  GL_IMPLEMENTATION_COLOR_READ_TYPE_OES* = 0x8B9A.GLenum
  GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES* = 0x8B9B.GLenum

  GLAD_GL_OES_single_precision*: bool

  GLAD_GL_OML_interlace*: bool
  GL_INTERLACE_OML* = 0x8980.GLenum
  GL_INTERLACE_READ_OML* = 0x8981.GLenum

  GLAD_GL_OML_resample*: bool
  GL_PACK_RESAMPLE_OML* = 0x8984.GLenum
  GL_UNPACK_RESAMPLE_OML* = 0x8985.GLenum
  GL_RESAMPLE_REPLICATE_OML* = 0x8986.GLenum
  GL_RESAMPLE_ZERO_FILL_OML* = 0x8987.GLenum
  GL_RESAMPLE_AVERAGE_OML* = 0x8988.GLenum
  GL_RESAMPLE_DECIMATE_OML* = 0x8989.GLenum

  GLAD_GL_OML_subsample*: bool
  GL_FORMAT_SUBSAMPLE_24_24_OML* = 0x8982.GLenum
  GL_FORMAT_SUBSAMPLE_244_244_OML* = 0x8983.GLenum

  GLAD_GL_OVR_multiview*: bool
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR* = 0x9630.GLenum
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR* = 0x9632.GLenum
  GL_MAX_VIEWS_OVR* = 0x9631.GLenum
  GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR* = 0x9633.GLenum

  GLAD_GL_OVR_multiview2*: bool

  GLAD_GL_PGI_misc_hints*: bool
  GL_PREFER_DOUBLEBUFFER_HINT_PGI* = 0x1A1F8.GLenum
  GL_CONSERVE_MEMORY_HINT_PGI* = 0x1A1FD.GLenum
  GL_RECLAIM_MEMORY_HINT_PGI* = 0x1A1FE.GLenum
  GL_NATIVE_GRAPHICS_HANDLE_PGI* = 0x1A202.GLenum
  GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI* = 0x1A203.GLenum
  GL_NATIVE_GRAPHICS_END_HINT_PGI* = 0x1A204.GLenum
  GL_ALWAYS_FAST_HINT_PGI* = 0x1A20C.GLenum
  GL_ALWAYS_SOFT_HINT_PGI* = 0x1A20D.GLenum
  GL_ALLOW_DRAW_OBJ_HINT_PGI* = 0x1A20E.GLenum
  GL_ALLOW_DRAW_WIN_HINT_PGI* = 0x1A20F.GLenum
  GL_ALLOW_DRAW_FRG_HINT_PGI* = 0x1A210.GLenum
  GL_ALLOW_DRAW_MEM_HINT_PGI* = 0x1A211.GLenum
  GL_STRICT_DEPTHFUNC_HINT_PGI* = 0x1A216.GLenum
  GL_STRICT_LIGHTING_HINT_PGI* = 0x1A217.GLenum
  GL_STRICT_SCISSOR_HINT_PGI* = 0x1A218.GLenum
  GL_FULL_STIPPLE_HINT_PGI* = 0x1A219.GLenum
  GL_CLIP_NEAR_HINT_PGI* = 0x1A220.GLenum
  GL_CLIP_FAR_HINT_PGI* = 0x1A221.GLenum
  GL_WIDE_LINE_HINT_PGI* = 0x1A222.GLenum
  GL_BACK_NORMALS_HINT_PGI* = 0x1A223.GLenum

  GLAD_GL_PGI_vertex_hints*: bool
  GL_VERTEX_DATA_HINT_PGI* = 0x1A22A.GLenum
  GL_VERTEX_CONSISTENT_HINT_PGI* = 0x1A22B.GLenum
  GL_MATERIAL_SIDE_HINT_PGI* = 0x1A22C.GLenum
  GL_MAX_VERTEX_HINT_PGI* = 0x1A22D.GLenum
  GL_COLOR3_BIT_PGI* = 0x00010000.GLbitfield
  GL_COLOR4_BIT_PGI* = 0x00020000.GLbitfield
  GL_EDGEFLAG_BIT_PGI* = 0x00040000.GLbitfield
  GL_INDEX_BIT_PGI* = 0x00080000.GLbitfield
  GL_MAT_AMBIENT_BIT_PGI* = 0x00100000.GLbitfield
  GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI* = 0x00200000.GLbitfield
  GL_MAT_DIFFUSE_BIT_PGI* = 0x00400000.GLbitfield
  GL_MAT_EMISSION_BIT_PGI* = 0x00800000.GLbitfield
  GL_MAT_COLOR_INDEXES_BIT_PGI* = 0x01000000.GLbitfield
  GL_MAT_SHININESS_BIT_PGI* = 0x02000000.GLbitfield
  GL_MAT_SPECULAR_BIT_PGI* = 0x04000000.GLbitfield
  GL_NORMAL_BIT_PGI* = 0x08000000.GLbitfield
  GL_TEXCOORD1_BIT_PGI* = 0x10000000.GLbitfield
  GL_TEXCOORD2_BIT_PGI* = 0x20000000.GLbitfield
  GL_TEXCOORD3_BIT_PGI* = 0x40000000.GLbitfield
  GL_TEXCOORD4_BIT_PGI* = 0x80000000.GLbitfield
  GL_VERTEX23_BIT_PGI* = 0x00000004.GLbitfield
  GL_VERTEX4_BIT_PGI* = 0x00000008.GLbitfield

  GLAD_GL_REND_screen_coordinates*: bool
  GL_SCREEN_COORDINATES_REND* = 0x8490.GLenum
  GL_INVERTED_SCREEN_W_REND* = 0x8491.GLenum

  GLAD_GL_S3_s3tc*: bool
  GL_RGB_S3TC* = 0x83A0.GLenum
  GL_RGB4_S3TC* = 0x83A1.GLenum
  GL_RGBA_S3TC* = 0x83A2.GLenum
  GL_RGBA4_S3TC* = 0x83A3.GLenum
  GL_RGBA_DXT5_S3TC* = 0x83A4.GLenum
  GL_RGBA4_DXT5_S3TC* = 0x83A5.GLenum

  GLAD_GL_SGIS_detail_texture*: bool
  GL_DETAIL_TEXTURE_2D_SGIS* = 0x8095.GLenum
  GL_DETAIL_TEXTURE_2D_BINDING_SGIS* = 0x8096.GLenum
  GL_LINEAR_DETAIL_SGIS* = 0x8097.GLenum
  GL_LINEAR_DETAIL_ALPHA_SGIS* = 0x8098.GLenum
  GL_LINEAR_DETAIL_COLOR_SGIS* = 0x8099.GLenum
  GL_DETAIL_TEXTURE_LEVEL_SGIS* = 0x809A.GLenum
  GL_DETAIL_TEXTURE_MODE_SGIS* = 0x809B.GLenum
  GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS* = 0x809C.GLenum

  GLAD_GL_SGIS_fog_function*: bool
  GL_FOG_FUNC_SGIS* = 0x812A.GLenum
  GL_FOG_FUNC_POINTS_SGIS* = 0x812B.GLenum
  GL_MAX_FOG_FUNC_POINTS_SGIS* = 0x812C.GLenum

  GLAD_GL_SGIS_generate_mipmap*: bool
  GL_GENERATE_MIPMAP_SGIS* = 0x8191.GLenum
  GL_GENERATE_MIPMAP_HINT_SGIS* = 0x8192.GLenum

  GLAD_GL_SGIS_multisample*: bool
  GL_MULTISAMPLE_SGIS* = 0x809D.GLenum
  GL_SAMPLE_ALPHA_TO_MASK_SGIS* = 0x809E.GLenum
  GL_SAMPLE_ALPHA_TO_ONE_SGIS* = 0x809F.GLenum
  GL_SAMPLE_MASK_SGIS* = 0x80A0.GLenum
  GL_1PASS_SGIS* = 0x80A1.GLenum
  GL_2PASS_0_SGIS* = 0x80A2.GLenum
  GL_2PASS_1_SGIS* = 0x80A3.GLenum
  GL_4PASS_0_SGIS* = 0x80A4.GLenum
  GL_4PASS_1_SGIS* = 0x80A5.GLenum
  GL_4PASS_2_SGIS* = 0x80A6.GLenum
  GL_4PASS_3_SGIS* = 0x80A7.GLenum
  GL_SAMPLE_BUFFERS_SGIS* = 0x80A8.GLenum
  GL_SAMPLES_SGIS* = 0x80A9.GLenum
  GL_SAMPLE_MASK_VALUE_SGIS* = 0x80AA.GLenum
  GL_SAMPLE_MASK_INVERT_SGIS* = 0x80AB.GLenum
  GL_SAMPLE_PATTERN_SGIS* = 0x80AC.GLenum

  GLAD_GL_SGIS_pixel_texture*: bool
  GL_PIXEL_TEXTURE_SGIS* = 0x8353.GLenum
  GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS* = 0x8354.GLenum
  GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS* = 0x8355.GLenum
  GL_PIXEL_GROUP_COLOR_SGIS* = 0x8356.GLenum

  GLAD_GL_SGIS_point_line_texgen*: bool
  GL_EYE_DISTANCE_TO_POINT_SGIS* = 0x81F0.GLenum
  GL_OBJECT_DISTANCE_TO_POINT_SGIS* = 0x81F1.GLenum
  GL_EYE_DISTANCE_TO_LINE_SGIS* = 0x81F2.GLenum
  GL_OBJECT_DISTANCE_TO_LINE_SGIS* = 0x81F3.GLenum
  GL_EYE_POINT_SGIS* = 0x81F4.GLenum
  GL_OBJECT_POINT_SGIS* = 0x81F5.GLenum
  GL_EYE_LINE_SGIS* = 0x81F6.GLenum
  GL_OBJECT_LINE_SGIS* = 0x81F7.GLenum

  GLAD_GL_SGIS_point_parameters*: bool
  GL_POINT_SIZE_MIN_SGIS* = 0x8126.GLenum
  GL_POINT_SIZE_MAX_SGIS* = 0x8127.GLenum
  GL_POINT_FADE_THRESHOLD_SIZE_SGIS* = 0x8128.GLenum
  GL_DISTANCE_ATTENUATION_SGIS* = 0x8129.GLenum

  GLAD_GL_SGIS_sharpen_texture*: bool
  GL_LINEAR_SHARPEN_SGIS* = 0x80AD.GLenum
  GL_LINEAR_SHARPEN_ALPHA_SGIS* = 0x80AE.GLenum
  GL_LINEAR_SHARPEN_COLOR_SGIS* = 0x80AF.GLenum
  GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS* = 0x80B0.GLenum

  GLAD_GL_SGIS_texture4D*: bool
  GL_PACK_SKIP_VOLUMES_SGIS* = 0x8130.GLenum
  GL_PACK_IMAGE_DEPTH_SGIS* = 0x8131.GLenum
  GL_UNPACK_SKIP_VOLUMES_SGIS* = 0x8132.GLenum
  GL_UNPACK_IMAGE_DEPTH_SGIS* = 0x8133.GLenum
  GL_TEXTURE_4D_SGIS* = 0x8134.GLenum
  GL_PROXY_TEXTURE_4D_SGIS* = 0x8135.GLenum
  GL_TEXTURE_4DSIZE_SGIS* = 0x8136.GLenum
  GL_TEXTURE_WRAP_Q_SGIS* = 0x8137.GLenum
  GL_MAX_4D_TEXTURE_SIZE_SGIS* = 0x8138.GLenum
  GL_TEXTURE_4D_BINDING_SGIS* = 0x814F.GLenum

  GLAD_GL_SGIS_texture_border_clamp*: bool
  GL_CLAMP_TO_BORDER_SGIS* = 0x812D.GLenum

  GLAD_GL_SGIS_texture_color_mask*: bool
  GL_TEXTURE_COLOR_WRITEMASK_SGIS* = 0x81EF.GLenum

  GLAD_GL_SGIS_texture_edge_clamp*: bool
  GL_CLAMP_TO_EDGE_SGIS* = 0x812F.GLenum

  GLAD_GL_SGIS_texture_filter4*: bool
  GL_FILTER4_SGIS* = 0x8146.GLenum
  GL_TEXTURE_FILTER4_SIZE_SGIS* = 0x8147.GLenum

  GLAD_GL_SGIS_texture_lod*: bool
  GL_TEXTURE_MIN_LOD_SGIS* = 0x813A.GLenum
  GL_TEXTURE_MAX_LOD_SGIS* = 0x813B.GLenum
  GL_TEXTURE_BASE_LEVEL_SGIS* = 0x813C.GLenum
  GL_TEXTURE_MAX_LEVEL_SGIS* = 0x813D.GLenum

  GLAD_GL_SGIS_texture_select*: bool
  GL_DUAL_ALPHA4_SGIS* = 0x8110.GLenum
  GL_DUAL_ALPHA8_SGIS* = 0x8111.GLenum
  GL_DUAL_ALPHA12_SGIS* = 0x8112.GLenum
  GL_DUAL_ALPHA16_SGIS* = 0x8113.GLenum
  GL_DUAL_LUMINANCE4_SGIS* = 0x8114.GLenum
  GL_DUAL_LUMINANCE8_SGIS* = 0x8115.GLenum
  GL_DUAL_LUMINANCE12_SGIS* = 0x8116.GLenum
  GL_DUAL_LUMINANCE16_SGIS* = 0x8117.GLenum
  GL_DUAL_INTENSITY4_SGIS* = 0x8118.GLenum
  GL_DUAL_INTENSITY8_SGIS* = 0x8119.GLenum
  GL_DUAL_INTENSITY12_SGIS* = 0x811A.GLenum
  GL_DUAL_INTENSITY16_SGIS* = 0x811B.GLenum
  GL_DUAL_LUMINANCE_ALPHA4_SGIS* = 0x811C.GLenum
  GL_DUAL_LUMINANCE_ALPHA8_SGIS* = 0x811D.GLenum
  GL_QUAD_ALPHA4_SGIS* = 0x811E.GLenum
  GL_QUAD_ALPHA8_SGIS* = 0x811F.GLenum
  GL_QUAD_LUMINANCE4_SGIS* = 0x8120.GLenum
  GL_QUAD_LUMINANCE8_SGIS* = 0x8121.GLenum
  GL_QUAD_INTENSITY4_SGIS* = 0x8122.GLenum
  GL_QUAD_INTENSITY8_SGIS* = 0x8123.GLenum
  GL_DUAL_TEXTURE_SELECT_SGIS* = 0x8124.GLenum
  GL_QUAD_TEXTURE_SELECT_SGIS* = 0x8125.GLenum

  GLAD_GL_SGIX_async*: bool
  GL_ASYNC_MARKER_SGIX* = 0x8329.GLenum

  GLAD_GL_SGIX_async_histogram*: bool
  GL_ASYNC_HISTOGRAM_SGIX* = 0x832C.GLenum
  GL_MAX_ASYNC_HISTOGRAM_SGIX* = 0x832D.GLenum

  GLAD_GL_SGIX_async_pixel*: bool
  GL_ASYNC_TEX_IMAGE_SGIX* = 0x835C.GLenum
  GL_ASYNC_DRAW_PIXELS_SGIX* = 0x835D.GLenum
  GL_ASYNC_READ_PIXELS_SGIX* = 0x835E.GLenum
  GL_MAX_ASYNC_TEX_IMAGE_SGIX* = 0x835F.GLenum
  GL_MAX_ASYNC_DRAW_PIXELS_SGIX* = 0x8360.GLenum
  GL_MAX_ASYNC_READ_PIXELS_SGIX* = 0x8361.GLenum

  GLAD_GL_SGIX_blend_alpha_minmax*: bool
  GL_ALPHA_MIN_SGIX* = 0x8320.GLenum
  GL_ALPHA_MAX_SGIX* = 0x8321.GLenum

  GLAD_GL_SGIX_calligraphic_fragment*: bool
  GL_CALLIGRAPHIC_FRAGMENT_SGIX* = 0x8183.GLenum

  GLAD_GL_SGIX_clipmap*: bool
  GL_LINEAR_CLIPMAP_LINEAR_SGIX* = 0x8170.GLenum
  GL_TEXTURE_CLIPMAP_CENTER_SGIX* = 0x8171.GLenum
  GL_TEXTURE_CLIPMAP_FRAME_SGIX* = 0x8172.GLenum
  GL_TEXTURE_CLIPMAP_OFFSET_SGIX* = 0x8173.GLenum
  GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX* = 0x8174.GLenum
  GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX* = 0x8175.GLenum
  GL_TEXTURE_CLIPMAP_DEPTH_SGIX* = 0x8176.GLenum
  GL_MAX_CLIPMAP_DEPTH_SGIX* = 0x8177.GLenum
  GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX* = 0x8178.GLenum
  GL_NEAREST_CLIPMAP_NEAREST_SGIX* = 0x844D.GLenum
  GL_NEAREST_CLIPMAP_LINEAR_SGIX* = 0x844E.GLenum
  GL_LINEAR_CLIPMAP_NEAREST_SGIX* = 0x844F.GLenum

  GLAD_GL_SGIX_convolution_accuracy*: bool
  GL_CONVOLUTION_HINT_SGIX* = 0x8316.GLenum

  GLAD_GL_SGIX_depth_pass_instrument*: bool

  GLAD_GL_SGIX_depth_texture*: bool
  GL_DEPTH_COMPONENT16_SGIX* = 0x81A5.GLenum
  GL_DEPTH_COMPONENT24_SGIX* = 0x81A6.GLenum
  GL_DEPTH_COMPONENT32_SGIX* = 0x81A7.GLenum

  GLAD_GL_SGIX_flush_raster*: bool

  GLAD_GL_SGIX_fog_offset*: bool
  GL_FOG_OFFSET_SGIX* = 0x8198.GLenum
  GL_FOG_OFFSET_VALUE_SGIX* = 0x8199.GLenum

  GLAD_GL_SGIX_fragment_lighting*: bool
  GL_FRAGMENT_LIGHTING_SGIX* = 0x8400.GLenum
  GL_FRAGMENT_COLOR_MATERIAL_SGIX* = 0x8401.GLenum
  GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX* = 0x8402.GLenum
  GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX* = 0x8403.GLenum
  GL_MAX_FRAGMENT_LIGHTS_SGIX* = 0x8404.GLenum
  GL_MAX_ACTIVE_LIGHTS_SGIX* = 0x8405.GLenum
  GL_CURRENT_RASTER_NORMAL_SGIX* = 0x8406.GLenum
  GL_LIGHT_ENV_MODE_SGIX* = 0x8407.GLenum
  GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX* = 0x8408.GLenum
  GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX* = 0x8409.GLenum
  GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX* = 0x840A.GLenum
  GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX* = 0x840B.GLenum
  GL_FRAGMENT_LIGHT0_SGIX* = 0x840C.GLenum
  GL_FRAGMENT_LIGHT1_SGIX* = 0x840D.GLenum
  GL_FRAGMENT_LIGHT2_SGIX* = 0x840E.GLenum
  GL_FRAGMENT_LIGHT3_SGIX* = 0x840F.GLenum
  GL_FRAGMENT_LIGHT4_SGIX* = 0x8410.GLenum
  GL_FRAGMENT_LIGHT5_SGIX* = 0x8411.GLenum
  GL_FRAGMENT_LIGHT6_SGIX* = 0x8412.GLenum
  GL_FRAGMENT_LIGHT7_SGIX* = 0x8413.GLenum

  GLAD_GL_SGIX_framezoom*: bool
  GL_FRAMEZOOM_SGIX* = 0x818B.GLenum
  GL_FRAMEZOOM_FACTOR_SGIX* = 0x818C.GLenum
  GL_MAX_FRAMEZOOM_FACTOR_SGIX* = 0x818D.GLenum

  GLAD_GL_SGIX_igloo_interface*: bool

  GLAD_GL_SGIX_instruments*: bool
  GL_INSTRUMENT_BUFFER_POINTER_SGIX* = 0x8180.GLenum
  GL_INSTRUMENT_MEASUREMENTS_SGIX* = 0x8181.GLenum

  GLAD_GL_SGIX_interlace*: bool
  GL_INTERLACE_SGIX* = 0x8094.GLenum

  GLAD_GL_SGIX_ir_instrument1*: bool
  GL_IR_INSTRUMENT1_SGIX* = 0x817F.GLenum

  GLAD_GL_SGIX_list_priority*: bool
  GL_LIST_PRIORITY_SGIX* = 0x8182.GLenum

  GLAD_GL_SGIX_pixel_texture*: bool
  GL_PIXEL_TEX_GEN_SGIX* = 0x8139.GLenum
  GL_PIXEL_TEX_GEN_MODE_SGIX* = 0x832B.GLenum

  GLAD_GL_SGIX_pixel_tiles*: bool
  GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX* = 0x813E.GLenum
  GL_PIXEL_TILE_CACHE_INCREMENT_SGIX* = 0x813F.GLenum
  GL_PIXEL_TILE_WIDTH_SGIX* = 0x8140.GLenum
  GL_PIXEL_TILE_HEIGHT_SGIX* = 0x8141.GLenum
  GL_PIXEL_TILE_GRID_WIDTH_SGIX* = 0x8142.GLenum
  GL_PIXEL_TILE_GRID_HEIGHT_SGIX* = 0x8143.GLenum
  GL_PIXEL_TILE_GRID_DEPTH_SGIX* = 0x8144.GLenum
  GL_PIXEL_TILE_CACHE_SIZE_SGIX* = 0x8145.GLenum

  GLAD_GL_SGIX_polynomial_ffd*: bool
  GL_TEXTURE_DEFORMATION_BIT_SGIX* = 0x00000001.GLbitfield
  GL_GEOMETRY_DEFORMATION_BIT_SGIX* = 0x00000002.GLbitfield
  GL_GEOMETRY_DEFORMATION_SGIX* = 0x8194.GLenum
  GL_TEXTURE_DEFORMATION_SGIX* = 0x8195.GLenum
  GL_DEFORMATIONS_MASK_SGIX* = 0x8196.GLenum
  GL_MAX_DEFORMATION_ORDER_SGIX* = 0x8197.GLenum

  GLAD_GL_SGIX_reference_plane*: bool
  GL_REFERENCE_PLANE_SGIX* = 0x817D.GLenum
  GL_REFERENCE_PLANE_EQUATION_SGIX* = 0x817E.GLenum

  GLAD_GL_SGIX_resample*: bool
  GL_PACK_RESAMPLE_SGIX* = 0x842E.GLenum
  GL_UNPACK_RESAMPLE_SGIX* = 0x842F.GLenum
  GL_RESAMPLE_REPLICATE_SGIX* = 0x8433.GLenum
  GL_RESAMPLE_ZERO_FILL_SGIX* = 0x8434.GLenum
  GL_RESAMPLE_DECIMATE_SGIX* = 0x8430.GLenum

  GLAD_GL_SGIX_scalebias_hint*: bool
  GL_SCALEBIAS_HINT_SGIX* = 0x8322.GLenum

  GLAD_GL_SGIX_shadow*: bool
  GL_TEXTURE_COMPARE_SGIX* = 0x819A.GLenum
  GL_TEXTURE_COMPARE_OPERATOR_SGIX* = 0x819B.GLenum
  GL_TEXTURE_LEQUAL_R_SGIX* = 0x819C.GLenum
  GL_TEXTURE_GEQUAL_R_SGIX* = 0x819D.GLenum

  GLAD_GL_SGIX_shadow_ambient*: bool
  GL_SHADOW_AMBIENT_SGIX* = 0x80BF.GLenum

  GLAD_GL_SGIX_sprite*: bool
  GL_SPRITE_SGIX* = 0x8148.GLenum
  GL_SPRITE_MODE_SGIX* = 0x8149.GLenum
  GL_SPRITE_AXIS_SGIX* = 0x814A.GLenum
  GL_SPRITE_TRANSLATION_SGIX* = 0x814B.GLenum
  GL_SPRITE_AXIAL_SGIX* = 0x814C.GLenum
  GL_SPRITE_OBJECT_ALIGNED_SGIX* = 0x814D.GLenum
  GL_SPRITE_EYE_ALIGNED_SGIX* = 0x814E.GLenum

  GLAD_GL_SGIX_subsample*: bool
  GL_PACK_SUBSAMPLE_RATE_SGIX* = 0x85A0.GLenum
  GL_UNPACK_SUBSAMPLE_RATE_SGIX* = 0x85A1.GLenum
  GL_PIXEL_SUBSAMPLE_4444_SGIX* = 0x85A2.GLenum
  GL_PIXEL_SUBSAMPLE_2424_SGIX* = 0x85A3.GLenum
  GL_PIXEL_SUBSAMPLE_4242_SGIX* = 0x85A4.GLenum

  GLAD_GL_SGIX_tag_sample_buffer*: bool

  GLAD_GL_SGIX_texture_add_env*: bool
  GL_TEXTURE_ENV_BIAS_SGIX* = 0x80BE.GLenum

  GLAD_GL_SGIX_texture_coordinate_clamp*: bool
  GL_TEXTURE_MAX_CLAMP_S_SGIX* = 0x8369.GLenum
  GL_TEXTURE_MAX_CLAMP_T_SGIX* = 0x836A.GLenum
  GL_TEXTURE_MAX_CLAMP_R_SGIX* = 0x836B.GLenum

  GLAD_GL_SGIX_texture_lod_bias*: bool
  GL_TEXTURE_LOD_BIAS_S_SGIX* = 0x818E.GLenum
  GL_TEXTURE_LOD_BIAS_T_SGIX* = 0x818F.GLenum
  GL_TEXTURE_LOD_BIAS_R_SGIX* = 0x8190.GLenum

  GLAD_GL_SGIX_texture_multi_buffer*: bool
  GL_TEXTURE_MULTI_BUFFER_HINT_SGIX* = 0x812E.GLenum

  GLAD_GL_SGIX_texture_scale_bias*: bool
  GL_POST_TEXTURE_FILTER_BIAS_SGIX* = 0x8179.GLenum
  GL_POST_TEXTURE_FILTER_SCALE_SGIX* = 0x817A.GLenum
  GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX* = 0x817B.GLenum
  GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX* = 0x817C.GLenum

  GLAD_GL_SGIX_vertex_preclip*: bool
  GL_VERTEX_PRECLIP_SGIX* = 0x83EE.GLenum
  GL_VERTEX_PRECLIP_HINT_SGIX* = 0x83EF.GLenum

  GLAD_GL_SGIX_ycrcb*: bool
  GL_YCRCB_422_SGIX* = 0x81BB.GLenum
  GL_YCRCB_444_SGIX* = 0x81BC.GLenum

  GLAD_GL_SGIX_ycrcb_subsample*: bool

  GLAD_GL_SGIX_ycrcba*: bool
  GL_YCRCB_SGIX* = 0x8318.GLenum
  GL_YCRCBA_SGIX* = 0x8319.GLenum

  GLAD_GL_SGI_color_matrix*: bool
  GL_COLOR_MATRIX_SGI* = 0x80B1.GLenum
  GL_COLOR_MATRIX_STACK_DEPTH_SGI* = 0x80B2.GLenum
  GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI* = 0x80B3.GLenum
  GL_POST_COLOR_MATRIX_RED_SCALE_SGI* = 0x80B4.GLenum
  GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI* = 0x80B5.GLenum
  GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI* = 0x80B6.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI* = 0x80B7.GLenum
  GL_POST_COLOR_MATRIX_RED_BIAS_SGI* = 0x80B8.GLenum
  GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI* = 0x80B9.GLenum
  GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI* = 0x80BA.GLenum
  GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI* = 0x80BB.GLenum

  GLAD_GL_SGI_color_table*: bool
  GL_COLOR_TABLE_SGI* = 0x80D0.GLenum
  GL_POST_CONVOLUTION_COLOR_TABLE_SGI* = 0x80D1.GLenum
  GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI* = 0x80D2.GLenum
  GL_PROXY_COLOR_TABLE_SGI* = 0x80D3.GLenum
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI* = 0x80D4.GLenum
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI* = 0x80D5.GLenum
  GL_COLOR_TABLE_SCALE_SGI* = 0x80D6.GLenum
  GL_COLOR_TABLE_BIAS_SGI* = 0x80D7.GLenum
  GL_COLOR_TABLE_FORMAT_SGI* = 0x80D8.GLenum
  GL_COLOR_TABLE_WIDTH_SGI* = 0x80D9.GLenum
  GL_COLOR_TABLE_RED_SIZE_SGI* = 0x80DA.GLenum
  GL_COLOR_TABLE_GREEN_SIZE_SGI* = 0x80DB.GLenum
  GL_COLOR_TABLE_BLUE_SIZE_SGI* = 0x80DC.GLenum
  GL_COLOR_TABLE_ALPHA_SIZE_SGI* = 0x80DD.GLenum
  GL_COLOR_TABLE_LUMINANCE_SIZE_SGI* = 0x80DE.GLenum
  GL_COLOR_TABLE_INTENSITY_SIZE_SGI* = 0x80DF.GLenum

  GLAD_GL_SGI_texture_color_table*: bool
  GL_TEXTURE_COLOR_TABLE_SGI* = 0x80BC.GLenum
  GL_PROXY_TEXTURE_COLOR_TABLE_SGI* = 0x80BD.GLenum

  GLAD_GL_SUNX_constant_data*: bool
  GL_UNPACK_CONSTANT_DATA_SUNX* = 0x81D5.GLenum
  GL_TEXTURE_CONSTANT_DATA_SUNX* = 0x81D6.GLenum

  GLAD_GL_SUN_convolution_border_modes*: bool
  GL_WRAP_BORDER_SUN* = 0x81D4.GLenum

  GLAD_GL_SUN_global_alpha*: bool
  GL_GLOBAL_ALPHA_SUN* = 0x81D9.GLenum
  GL_GLOBAL_ALPHA_FACTOR_SUN* = 0x81DA.GLenum

  GLAD_GL_SUN_mesh_array*: bool
  GL_QUAD_MESH_SUN* = 0x8614.GLenum
  GL_TRIANGLE_MESH_SUN* = 0x8615.GLenum

  GLAD_GL_SUN_slice_accum*: bool
  GL_SLICE_ACCUM_SUN* = 0x85CC.GLenum

  GLAD_GL_SUN_triangle_list*: bool
  GL_RESTART_SUN* = 0x0001.GLenum
  GL_REPLACE_MIDDLE_SUN* = 0x0002.GLenum
  GL_REPLACE_OLDEST_SUN* = 0x0003.GLenum
  GL_TRIANGLE_LIST_SUN* = 0x81D7.GLenum
  GL_REPLACEMENT_CODE_SUN* = 0x81D8.GLenum
  GL_REPLACEMENT_CODE_ARRAY_SUN* = 0x85C0.GLenum
  GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN* = 0x85C1.GLenum
  GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN* = 0x85C2.GLenum
  GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN* = 0x85C3.GLenum
  GL_R1UI_V3F_SUN* = 0x85C4.GLenum
  GL_R1UI_C4UB_V3F_SUN* = 0x85C5.GLenum
  GL_R1UI_C3F_V3F_SUN* = 0x85C6.GLenum
  GL_R1UI_N3F_V3F_SUN* = 0x85C7.GLenum
  GL_R1UI_C4F_N3F_V3F_SUN* = 0x85C8.GLenum
  GL_R1UI_T2F_V3F_SUN* = 0x85C9.GLenum
  GL_R1UI_T2F_N3F_V3F_SUN* = 0x85CA.GLenum
  GL_R1UI_T2F_C4F_N3F_V3F_SUN* = 0x85CB.GLenum

  GLAD_GL_SUN_vertex*: bool

  GLAD_GL_WIN_phong_shading*: bool
  GL_PHONG_WIN* = 0x80EA.GLenum
  GL_PHONG_HINT_WIN* = 0x80EB.GLenum

  GLAD_GL_WIN_specular_fog*: bool
  GL_FOG_SPECULAR_TEXTURE_WIN* = 0x80EC.GLenum

  glTbufferMask3DFX*: proc (mask: GLuint) {.stdcall.}
  glDebugMessageEnableAMD*: proc (category: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}
  glDebugMessageInsertAMD*: proc (category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: cstring) {.stdcall.}
  glDebugMessageCallbackAMD*: proc (callback: GLDEBUGPROCAMD, userParam: pointer) {.stdcall.}
  glGetDebugMessageLogAMD*: proc (count: GLuint, bufSize: GLsizei, categories: ptr GLenum, severities: ptr GLuint, ids: ptr GLuint, lengths: ptr GLsizei, message: cstring): GLuint {.stdcall.}
  glBlendFuncIndexedAMD*: proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}
  glBlendFuncSeparateIndexedAMD*: proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}
  glBlendEquationIndexedAMD*: proc (buf: GLuint, mode: GLenum) {.stdcall.}
  glBlendEquationSeparateIndexedAMD*: proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glRenderbufferStorageMultisampleAdvancedAMD*: proc (target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glNamedRenderbufferStorageMultisampleAdvancedAMD*: proc (renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glFramebufferSamplePositionsfvAMD*: proc (target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat) {.stdcall.}
  glNamedFramebufferSamplePositionsfvAMD*: proc (framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat) {.stdcall.}
  glGetFramebufferParameterfvAMD*: proc (target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat) {.stdcall.}
  glGetNamedFramebufferParameterfvAMD*: proc (framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat) {.stdcall.}
  glUniform1i64NV*: proc (location: GLint, x: GLint64EXT) {.stdcall.}
  glUniform2i64NV*: proc (location: GLint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}
  glUniform3i64NV*: proc (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}
  glUniform4i64NV*: proc (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}
  glUniform1i64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glUniform2i64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glUniform3i64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glUniform4i64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glUniform1ui64NV*: proc (location: GLint, x: GLuint64EXT) {.stdcall.}
  glUniform2ui64NV*: proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}
  glUniform3ui64NV*: proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}
  glUniform4ui64NV*: proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}
  glUniform1ui64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glUniform2ui64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glUniform3ui64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glUniform4ui64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glGetUniformi64vNV*: proc (program: GLuint, location: GLint, params: ptr GLint64EXT) {.stdcall.}
  glGetUniformui64vNV*: proc (program: GLuint, location: GLint, params: ptr GLuint64EXT) {.stdcall.}
  glProgramUniform1i64NV*: proc (program: GLuint, location: GLint, x: GLint64EXT) {.stdcall.}
  glProgramUniform2i64NV*: proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}
  glProgramUniform3i64NV*: proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}
  glProgramUniform4i64NV*: proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}
  glProgramUniform1i64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glProgramUniform2i64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glProgramUniform3i64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glProgramUniform4i64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}
  glProgramUniform1ui64NV*: proc (program: GLuint, location: GLint, x: GLuint64EXT) {.stdcall.}
  glProgramUniform2ui64NV*: proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}
  glProgramUniform3ui64NV*: proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}
  glProgramUniform4ui64NV*: proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}
  glProgramUniform1ui64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glProgramUniform2ui64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glProgramUniform3ui64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glProgramUniform4ui64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glVertexAttribParameteriAMD*: proc (index: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glMultiDrawArraysIndirectAMD*: proc (mode: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei) {.stdcall.}
  glMultiDrawElementsIndirectAMD*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei) {.stdcall.}
  glGenNamesAMD*: proc (identifier: GLenum, num: GLuint, names: ptr GLuint) {.stdcall.}
  glDeleteNamesAMD*: proc (identifier: GLenum, num: GLuint, names: ptr GLuint) {.stdcall.}
  glIsNameAMD*: proc (identifier: GLenum, name: GLuint): GLboolean {.stdcall.}
  glQueryObjectParameteruiAMD*: proc (target: GLenum, id: GLuint, pname: GLenum, param: GLuint) {.stdcall.}
  glGetPerfMonitorGroupsAMD*: proc (numGroups: ptr GLint, groupsSize: GLsizei, groups: ptr GLuint) {.stdcall.}
  glGetPerfMonitorCountersAMD*: proc (group: GLuint, numCounters: ptr GLint, maxActiveCounters: ptr GLint, counterSize: GLsizei, counters: ptr GLuint) {.stdcall.}
  glGetPerfMonitorGroupStringAMD*: proc (group: GLuint, bufSize: GLsizei, length: ptr GLsizei, groupString: cstring) {.stdcall.}
  glGetPerfMonitorCounterStringAMD*: proc (group: GLuint, counter: GLuint, bufSize: GLsizei, length: ptr GLsizei, counterString: cstring) {.stdcall.}
  glGetPerfMonitorCounterInfoAMD*: proc (group: GLuint, counter: GLuint, pname: GLenum, data: pointer) {.stdcall.}
  glGenPerfMonitorsAMD*: proc (n: GLsizei, monitors: ptr GLuint) {.stdcall.}
  glDeletePerfMonitorsAMD*: proc (n: GLsizei, monitors: ptr GLuint) {.stdcall.}
  glSelectPerfMonitorCountersAMD*: proc (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: ptr GLuint) {.stdcall.}
  glBeginPerfMonitorAMD*: proc (monitor: GLuint) {.stdcall.}
  glEndPerfMonitorAMD*: proc (monitor: GLuint) {.stdcall.}
  glGetPerfMonitorCounterDataAMD*: proc (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: ptr GLuint, bytesWritten: ptr GLint) {.stdcall.}
  glSetMultisamplefvAMD*: proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}
  glTexStorageSparseAMD*: proc (target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) {.stdcall.}
  glTextureStorageSparseAMD*: proc (texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) {.stdcall.}
  glStencilOpValueAMD*: proc (face: GLenum, value: GLuint) {.stdcall.}
  glTessellationFactorAMD*: proc (factor: GLfloat) {.stdcall.}
  glTessellationModeAMD*: proc (mode: GLenum) {.stdcall.}
  glElementPointerAPPLE*: proc (`type`: GLenum, pointer: pointer) {.stdcall.}
  glDrawElementArrayAPPLE*: proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}
  glDrawRangeElementArrayAPPLE*: proc (mode: GLenum, start: GLuint, `end`: GLuint, first: GLint, count: GLsizei) {.stdcall.}
  glMultiDrawElementArrayAPPLE*: proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei) {.stdcall.}
  glMultiDrawRangeElementArrayAPPLE*: proc (mode: GLenum, start: GLuint, `end`: GLuint, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei) {.stdcall.}
  glGenFencesAPPLE*: proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}
  glDeleteFencesAPPLE*: proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}
  glSetFenceAPPLE*: proc (fence: GLuint) {.stdcall.}
  glIsFenceAPPLE*: proc (fence: GLuint): GLboolean {.stdcall.}
  glTestFenceAPPLE*: proc (fence: GLuint): GLboolean {.stdcall.}
  glFinishFenceAPPLE*: proc (fence: GLuint) {.stdcall.}
  glTestObjectAPPLE*: proc (`object`: GLenum, name: GLuint): GLboolean {.stdcall.}
  glFinishObjectAPPLE*: proc (`object`: GLenum, name: GLint) {.stdcall.}
  glBufferParameteriAPPLE*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glFlushMappedBufferRangeAPPLE*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glObjectPurgeableAPPLE*: proc (objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}
  glObjectUnpurgeableAPPLE*: proc (objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}
  glGetObjectParameterivAPPLE*: proc (objectType: GLenum, name: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTextureRangeAPPLE*: proc (target: GLenum, length: GLsizei, pointer: pointer) {.stdcall.}
  glGetTexParameterPointervAPPLE*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}
  glBindVertexArrayAPPLE*: proc (array: GLuint) {.stdcall.}
  glDeleteVertexArraysAPPLE*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glGenVertexArraysAPPLE*: proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}
  glIsVertexArrayAPPLE*: proc (array: GLuint): GLboolean {.stdcall.}
  glVertexArrayRangeAPPLE*: proc (length: GLsizei, pointer: pointer) {.stdcall.}
  glFlushVertexArrayRangeAPPLE*: proc (length: GLsizei, pointer: pointer) {.stdcall.}
  glVertexArrayParameteriAPPLE*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glEnableVertexAttribAPPLE*: proc (index: GLuint, pname: GLenum) {.stdcall.}
  glDisableVertexAttribAPPLE*: proc (index: GLuint, pname: GLenum) {.stdcall.}
  glIsVertexAttribEnabledAPPLE*: proc (index: GLuint, pname: GLenum): GLboolean {.stdcall.}
  glMapVertexAttrib1dAPPLE*: proc (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble) {.stdcall.}
  glMapVertexAttrib1fAPPLE*: proc (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat) {.stdcall.}
  glMapVertexAttrib2dAPPLE*: proc (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble) {.stdcall.}
  glMapVertexAttrib2fAPPLE*: proc (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat) {.stdcall.}
  glPrimitiveBoundingBoxARB*: proc (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) {.stdcall.}
  glGetTextureHandleARB*: proc (texture: GLuint): GLuint64 {.stdcall.}
  glGetTextureSamplerHandleARB*: proc (texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}
  glMakeTextureHandleResidentARB*: proc (handle: GLuint64) {.stdcall.}
  glMakeTextureHandleNonResidentARB*: proc (handle: GLuint64) {.stdcall.}
  glGetImageHandleARB*: proc (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}
  glMakeImageHandleResidentARB*: proc (handle: GLuint64, access: GLenum) {.stdcall.}
  glMakeImageHandleNonResidentARB*: proc (handle: GLuint64) {.stdcall.}
  glUniformHandleui64ARB*: proc (location: GLint, value: GLuint64) {.stdcall.}
  glUniformHandleui64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glProgramUniformHandleui64ARB*: proc (program: GLuint, location: GLint, value: GLuint64) {.stdcall.}
  glProgramUniformHandleui64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64) {.stdcall.}
  glIsTextureHandleResidentARB*: proc (handle: GLuint64): GLboolean {.stdcall.}
  glIsImageHandleResidentARB*: proc (handle: GLuint64): GLboolean {.stdcall.}
  glVertexAttribL1ui64ARB*: proc (index: GLuint, x: GLuint64EXT) {.stdcall.}
  glVertexAttribL1ui64vARB*: proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}
  glGetVertexAttribLui64vARB*: proc (index: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}
  glCreateSyncFromCLeventARB*: proc (context: ClContext, event: ClEvent, flags: GLbitfield): GLsync {.stdcall.}
  glClampColorARB*: proc (target: GLenum, clamp: GLenum) {.stdcall.}
  glDispatchComputeGroupSizeARB*: proc (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) {.stdcall.}
  glDebugMessageControlARB*: proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}
  glDebugMessageInsertARB*: proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.stdcall.}
  glDebugMessageCallbackARB*: proc (callback: GLDEBUGPROCARB, userParam: pointer) {.stdcall.}
  glGetDebugMessageLogARB*: proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}
  glDrawBuffersARB*: proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}
  glBlendEquationiARB*: proc (buf: GLuint, mode: GLenum) {.stdcall.}
  glBlendEquationSeparateiARB*: proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glBlendFunciARB*: proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}
  glBlendFuncSeparateiARB*: proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}
  glDrawArraysInstancedARB*: proc (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) {.stdcall.}
  glDrawElementsInstancedARB*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei) {.stdcall.}
  glProgramStringARB*: proc (target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.stdcall.}
  glBindProgramARB*: proc (target: GLenum, program: GLuint) {.stdcall.}
  glDeleteProgramsARB*: proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}
  glGenProgramsARB*: proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}
  glProgramEnvParameter4dARB*: proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glProgramEnvParameter4dvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}
  glProgramEnvParameter4fARB*: proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glProgramEnvParameter4fvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}
  glProgramLocalParameter4dARB*: proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glProgramLocalParameter4dvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}
  glProgramLocalParameter4fARB*: proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glProgramLocalParameter4fvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}
  glGetProgramEnvParameterdvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}
  glGetProgramEnvParameterfvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}
  glGetProgramLocalParameterdvARB*: proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}
  glGetProgramLocalParameterfvARB*: proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}
  glGetProgramivARB*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetProgramStringARB*: proc (target: GLenum, pname: GLenum, string: pointer) {.stdcall.}
  glIsProgramARB*: proc (program: GLuint): GLboolean {.stdcall.}
  glProgramParameteriARB*: proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}
  glFramebufferTextureARB*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTextureLayerARB*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}
  glFramebufferTextureFaceARB*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) {.stdcall.}
  glSpecializeShaderARB*: proc (shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint) {.stdcall.}
  glUniform1i64ARB*: proc (location: GLint, x: GLint64) {.stdcall.}
  glUniform2i64ARB*: proc (location: GLint, x: GLint64, y: GLint64) {.stdcall.}
  glUniform3i64ARB*: proc (location: GLint, x: GLint64, y: GLint64, z: GLint64) {.stdcall.}
  glUniform4i64ARB*: proc (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) {.stdcall.}
  glUniform1i64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glUniform2i64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glUniform3i64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glUniform4i64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glUniform1ui64ARB*: proc (location: GLint, x: GLuint64) {.stdcall.}
  glUniform2ui64ARB*: proc (location: GLint, x: GLuint64, y: GLuint64) {.stdcall.}
  glUniform3ui64ARB*: proc (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) {.stdcall.}
  glUniform4ui64ARB*: proc (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) {.stdcall.}
  glUniform1ui64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glUniform2ui64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glUniform3ui64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glUniform4ui64vARB*: proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glGetUniformi64vARB*: proc (program: GLuint, location: GLint, params: ptr GLint64) {.stdcall.}
  glGetUniformui64vARB*: proc (program: GLuint, location: GLint, params: ptr GLuint64) {.stdcall.}
  glGetnUniformi64vARB*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint64) {.stdcall.}
  glGetnUniformui64vARB*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint64) {.stdcall.}
  glProgramUniform1i64ARB*: proc (program: GLuint, location: GLint, x: GLint64) {.stdcall.}
  glProgramUniform2i64ARB*: proc (program: GLuint, location: GLint, x: GLint64, y: GLint64) {.stdcall.}
  glProgramUniform3i64ARB*: proc (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) {.stdcall.}
  glProgramUniform4i64ARB*: proc (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) {.stdcall.}
  glProgramUniform1i64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glProgramUniform2i64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glProgramUniform3i64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glProgramUniform4i64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}
  glProgramUniform1ui64ARB*: proc (program: GLuint, location: GLint, x: GLuint64) {.stdcall.}
  glProgramUniform2ui64ARB*: proc (program: GLuint, location: GLint, x: GLuint64, y: GLuint64) {.stdcall.}
  glProgramUniform3ui64ARB*: proc (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) {.stdcall.}
  glProgramUniform4ui64ARB*: proc (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) {.stdcall.}
  glProgramUniform1ui64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glProgramUniform2ui64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glProgramUniform3ui64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glProgramUniform4ui64vARB*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glColorTable*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}
  glColorTableParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glColorTableParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCopyColorTable*: proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glGetColorTable*: proc (target: GLenum, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}
  glGetColorTableParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetColorTableParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glColorSubTable*: proc (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glCopyColorSubTable*: proc (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glConvolutionFilter1D*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}
  glConvolutionFilter2D*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}
  glConvolutionParameterf*: proc (target: GLenum, pname: GLenum, params: GLfloat) {.stdcall.}
  glConvolutionParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glConvolutionParameteri*: proc (target: GLenum, pname: GLenum, params: GLint) {.stdcall.}
  glConvolutionParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCopyConvolutionFilter1D*: proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyConvolutionFilter2D*: proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetConvolutionFilter*: proc (target: GLenum, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}
  glGetConvolutionParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetConvolutionParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSeparableFilter*: proc (target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer) {.stdcall.}
  glSeparableFilter2D*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer) {.stdcall.}
  glGetHistogram*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}
  glGetHistogramParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetHistogramParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMinmax*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}
  glGetMinmaxParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMinmaxParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glHistogram*: proc (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) {.stdcall.}
  glMinmax*: proc (target: GLenum, internalformat: GLenum, sink: GLboolean) {.stdcall.}
  glResetHistogram*: proc (target: GLenum) {.stdcall.}
  glResetMinmax*: proc (target: GLenum) {.stdcall.}
  glMultiDrawArraysIndirectCountARB*: proc (mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glMultiDrawElementsIndirectCountARB*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glVertexAttribDivisorARB*: proc (index: GLuint, divisor: GLuint) {.stdcall.}
  glCurrentPaletteMatrixARB*: proc (index: GLint) {.stdcall.}
  glMatrixIndexubvARB*: proc (size: GLint, indices: ptr GLubyte) {.stdcall.}
  glMatrixIndexusvARB*: proc (size: GLint, indices: ptr GLushort) {.stdcall.}
  glMatrixIndexuivARB*: proc (size: GLint, indices: ptr GLuint) {.stdcall.}
  glMatrixIndexPointerARB*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glSampleCoverageARB*: proc (value: GLfloat, invert: GLboolean) {.stdcall.}
  glActiveTextureARB*: proc (texture: GLenum) {.stdcall.}
  glClientActiveTextureARB*: proc (texture: GLenum) {.stdcall.}
  glMultiTexCoord1dARB*: proc (target: GLenum, s: GLdouble) {.stdcall.}
  glMultiTexCoord1dvARB*: proc (target: GLenum, v: ptr GLdouble) {.stdcall.}
  glMultiTexCoord1fARB*: proc (target: GLenum, s: GLfloat) {.stdcall.}
  glMultiTexCoord1fvARB*: proc (target: GLenum, v: ptr GLfloat) {.stdcall.}
  glMultiTexCoord1iARB*: proc (target: GLenum, s: GLint) {.stdcall.}
  glMultiTexCoord1ivARB*: proc (target: GLenum, v: ptr GLint) {.stdcall.}
  glMultiTexCoord1sARB*: proc (target: GLenum, s: GLshort) {.stdcall.}
  glMultiTexCoord1svARB*: proc (target: GLenum, v: ptr GLshort) {.stdcall.}
  glMultiTexCoord2dARB*: proc (target: GLenum, s: GLdouble, t: GLdouble) {.stdcall.}
  glMultiTexCoord2dvARB*: proc (target: GLenum, v: ptr GLdouble) {.stdcall.}
  glMultiTexCoord2fARB*: proc (target: GLenum, s: GLfloat, t: GLfloat) {.stdcall.}
  glMultiTexCoord2fvARB*: proc (target: GLenum, v: ptr GLfloat) {.stdcall.}
  glMultiTexCoord2iARB*: proc (target: GLenum, s: GLint, t: GLint) {.stdcall.}
  glMultiTexCoord2ivARB*: proc (target: GLenum, v: ptr GLint) {.stdcall.}
  glMultiTexCoord2sARB*: proc (target: GLenum, s: GLshort, t: GLshort) {.stdcall.}
  glMultiTexCoord2svARB*: proc (target: GLenum, v: ptr GLshort) {.stdcall.}
  glMultiTexCoord3dARB*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.stdcall.}
  glMultiTexCoord3dvARB*: proc (target: GLenum, v: ptr GLdouble) {.stdcall.}
  glMultiTexCoord3fARB*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.stdcall.}
  glMultiTexCoord3fvARB*: proc (target: GLenum, v: ptr GLfloat) {.stdcall.}
  glMultiTexCoord3iARB*: proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.stdcall.}
  glMultiTexCoord3ivARB*: proc (target: GLenum, v: ptr GLint) {.stdcall.}
  glMultiTexCoord3sARB*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.stdcall.}
  glMultiTexCoord3svARB*: proc (target: GLenum, v: ptr GLshort) {.stdcall.}
  glMultiTexCoord4dARB*: proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.stdcall.}
  glMultiTexCoord4dvARB*: proc (target: GLenum, v: ptr GLdouble) {.stdcall.}
  glMultiTexCoord4fARB*: proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.stdcall.}
  glMultiTexCoord4fvARB*: proc (target: GLenum, v: ptr GLfloat) {.stdcall.}
  glMultiTexCoord4iARB*: proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.stdcall.}
  glMultiTexCoord4ivARB*: proc (target: GLenum, v: ptr GLint) {.stdcall.}
  glMultiTexCoord4sARB*: proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.stdcall.}
  glMultiTexCoord4svARB*: proc (target: GLenum, v: ptr GLshort) {.stdcall.}
  glGenQueriesARB*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glDeleteQueriesARB*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsQueryARB*: proc (id: GLuint): GLboolean {.stdcall.}
  glBeginQueryARB*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glEndQueryARB*: proc (target: GLenum) {.stdcall.}
  glGetQueryivARB*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetQueryObjectivARB*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetQueryObjectuivARB*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glMaxShaderCompilerThreadsARB*: proc (count: GLuint) {.stdcall.}
  glPointParameterfARB*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPointParameterfvARB*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetGraphicsResetStatusARB*: proc (): GLenum {.stdcall.}
  glGetnTexImageARB*: proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, img: pointer) {.stdcall.}
  glReadnPixelsARB*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.stdcall.}
  glGetnCompressedTexImageARB*: proc (target: GLenum, lod: GLint, bufSize: GLsizei, img: pointer) {.stdcall.}
  glGetnUniformfvARB*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.stdcall.}
  glGetnUniformivARB*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.stdcall.}
  glGetnUniformuivARB*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.stdcall.}
  glGetnUniformdvARB*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble) {.stdcall.}
  glGetnMapdvARB*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble) {.stdcall.}
  glGetnMapfvARB*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat) {.stdcall.}
  glGetnMapivARB*: proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint) {.stdcall.}
  glGetnPixelMapfvARB*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLfloat) {.stdcall.}
  glGetnPixelMapuivARB*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLuint) {.stdcall.}
  glGetnPixelMapusvARB*: proc (map: GLenum, bufSize: GLsizei, values: ptr GLushort) {.stdcall.}
  glGetnPolygonStippleARB*: proc (bufSize: GLsizei, pattern: ptr GLubyte) {.stdcall.}
  glGetnColorTableARB*: proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer) {.stdcall.}
  glGetnConvolutionFilterARB*: proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer) {.stdcall.}
  glGetnSeparableFilterARB*: proc (target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer) {.stdcall.}
  glGetnHistogramARB*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}
  glGetnMinmaxARB*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}
  glFramebufferSampleLocationsfvARB*: proc (target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glNamedFramebufferSampleLocationsfvARB*: proc (framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glEvaluateDepthValuesARB*: proc () {.stdcall.}
  glMinSampleShadingARB*: proc (value: GLfloat) {.stdcall.}
  glDeleteObjectARB*: proc (obj: GLhandleARB) {.stdcall.}
  glGetHandleARB*: proc (pname: GLenum): GLhandleARB {.stdcall.}
  glDetachObjectARB*: proc (containerObj: GLhandleARB, attachedObj: GLhandleARB) {.stdcall.}
  glCreateShaderObjectARB*: proc (shaderType: GLenum): GLhandleARB {.stdcall.}
  glShaderSourceARB*: proc (shaderObj: GLhandleARB, count: GLsizei, string: ptr pointer, length: ptr GLint) {.stdcall.}
  glCompileShaderARB*: proc (shaderObj: GLhandleARB) {.stdcall.}
  glCreateProgramObjectARB*: proc (): GLhandleARB {.stdcall.}
  glAttachObjectARB*: proc (containerObj: GLhandleARB, obj: GLhandleARB) {.stdcall.}
  glLinkProgramARB*: proc (programObj: GLhandleARB) {.stdcall.}
  glUseProgramObjectARB*: proc (programObj: GLhandleARB) {.stdcall.}
  glValidateProgramARB*: proc (programObj: GLhandleARB) {.stdcall.}
  glUniform1fARB*: proc (location: GLint, v0: GLfloat) {.stdcall.}
  glUniform2fARB*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}
  glUniform3fARB*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}
  glUniform4fARB*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}
  glUniform1iARB*: proc (location: GLint, v0: GLint) {.stdcall.}
  glUniform2iARB*: proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}
  glUniform3iARB*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}
  glUniform4iARB*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}
  glUniform1fvARB*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform2fvARB*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform3fvARB*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform4fvARB*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glUniform1ivARB*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform2ivARB*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform3ivARB*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniform4ivARB*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glUniformMatrix2fvARB*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix3fvARB*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glUniformMatrix4fvARB*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glGetObjectParameterfvARB*: proc (obj: GLhandleARB, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetObjectParameterivARB*: proc (obj: GLhandleARB, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetInfoLogARB*: proc (obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, infoLog: ptr GLcharARB) {.stdcall.}
  glGetAttachedObjectsARB*: proc (containerObj: GLhandleARB, maxCount: GLsizei, count: ptr GLsizei, obj: ptr GLhandleARB) {.stdcall.}
  glGetUniformLocationARB*: proc (programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}
  glGetActiveUniformARB*: proc (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB) {.stdcall.}
  glGetUniformfvARB*: proc (programObj: GLhandleARB, location: GLint, params: ptr GLfloat) {.stdcall.}
  glGetUniformivARB*: proc (programObj: GLhandleARB, location: GLint, params: ptr GLint) {.stdcall.}
  glGetShaderSourceARB*: proc (obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, source: ptr GLcharARB) {.stdcall.}
  glNamedStringARB*: proc (`type`: GLenum, namelen: GLint, name: cstring, stringlen: GLint, string: cstring) {.stdcall.}
  glDeleteNamedStringARB*: proc (namelen: GLint, name: cstring) {.stdcall.}
  glCompileShaderIncludeARB*: proc (shader: GLuint, count: GLsizei, path: cstringArray, length: ptr GLint) {.stdcall.}
  glIsNamedStringARB*: proc (namelen: GLint, name: cstring): GLboolean {.stdcall.}
  glGetNamedStringARB*: proc (namelen: GLint, name: cstring, bufSize: GLsizei, stringlen: ptr GLint, string: cstring) {.stdcall.}
  glGetNamedStringivARB*: proc (namelen: GLint, name: cstring, pname: GLenum, params: ptr GLint) {.stdcall.}
  glBufferPageCommitmentARB*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) {.stdcall.}
  glNamedBufferPageCommitmentEXT*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) {.stdcall.}
  glNamedBufferPageCommitmentARB*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) {.stdcall.}
  glTexPageCommitmentARB*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) {.stdcall.}
  glTexBufferARB*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}
  glCompressedTexImage3DARB*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexImage2DARB*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexImage1DARB*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage3DARB*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage2DARB*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glCompressedTexSubImage1DARB*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}
  glGetCompressedTexImageARB*: proc (target: GLenum, level: GLint, img: pointer) {.stdcall.}
  glLoadTransposeMatrixfARB*: proc (m: ptr GLfloat) {.stdcall.}
  glLoadTransposeMatrixdARB*: proc (m: ptr GLdouble) {.stdcall.}
  glMultTransposeMatrixfARB*: proc (m: ptr GLfloat) {.stdcall.}
  glMultTransposeMatrixdARB*: proc (m: ptr GLdouble) {.stdcall.}
  glWeightbvARB*: proc (size: GLint, weights: ptr GLbyte) {.stdcall.}
  glWeightsvARB*: proc (size: GLint, weights: ptr GLshort) {.stdcall.}
  glWeightivARB*: proc (size: GLint, weights: ptr GLint) {.stdcall.}
  glWeightfvARB*: proc (size: GLint, weights: ptr GLfloat) {.stdcall.}
  glWeightdvARB*: proc (size: GLint, weights: ptr GLdouble) {.stdcall.}
  glWeightubvARB*: proc (size: GLint, weights: ptr GLubyte) {.stdcall.}
  glWeightusvARB*: proc (size: GLint, weights: ptr GLushort) {.stdcall.}
  glWeightuivARB*: proc (size: GLint, weights: ptr GLuint) {.stdcall.}
  glWeightPointerARB*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glVertexBlendARB*: proc (count: GLint) {.stdcall.}
  glBindBufferARB*: proc (target: GLenum, buffer: GLuint) {.stdcall.}
  glDeleteBuffersARB*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glGenBuffersARB*: proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}
  glIsBufferARB*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glBufferDataARB*: proc (target: GLenum, size: GLsizeiptrARB, data: pointer, usage: GLenum) {.stdcall.}
  glBufferSubDataARB*: proc (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer) {.stdcall.}
  glGetBufferSubDataARB*: proc (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer) {.stdcall.}
  glMapBufferARB*: proc (target: GLenum, access: GLenum): pointer {.stdcall.}
  glUnmapBufferARB*: proc (target: GLenum): GLboolean {.stdcall.}
  glGetBufferParameterivARB*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetBufferPointervARB*: proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}
  glVertexAttrib1dARB*: proc (index: GLuint, x: GLdouble) {.stdcall.}
  glVertexAttrib1dvARB*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib1fARB*: proc (index: GLuint, x: GLfloat) {.stdcall.}
  glVertexAttrib1fvARB*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib1sARB*: proc (index: GLuint, x: GLshort) {.stdcall.}
  glVertexAttrib1svARB*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib2dARB*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexAttrib2dvARB*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib2fARB*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}
  glVertexAttrib2fvARB*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib2sARB*: proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}
  glVertexAttrib2svARB*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib3dARB*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexAttrib3dvARB*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib3fARB*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glVertexAttrib3fvARB*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib3sARB*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}
  glVertexAttrib3svARB*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4NbvARB*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttrib4NivARB*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttrib4NsvARB*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4NubARB*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}
  glVertexAttrib4NubvARB*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttrib4NuivARB*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttrib4NusvARB*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glVertexAttrib4bvARB*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttrib4dARB*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexAttrib4dvARB*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib4fARB*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glVertexAttrib4fvARB*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib4ivARB*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttrib4sARB*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}
  glVertexAttrib4svARB*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4ubvARB*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttrib4uivARB*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttrib4usvARB*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glVertexAttribPointerARB*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}
  glEnableVertexAttribArrayARB*: proc (index: GLuint) {.stdcall.}
  glDisableVertexAttribArrayARB*: proc (index: GLuint) {.stdcall.}
  glGetVertexAttribdvARB*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glGetVertexAttribfvARB*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVertexAttribivARB*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribPointervARB*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}
  glBindAttribLocationARB*: proc (programObj: GLhandleARB, index: GLuint, name: ptr GLcharARB) {.stdcall.}
  glGetActiveAttribARB*: proc (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB) {.stdcall.}
  glGetAttribLocationARB*: proc (programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}
  glDepthRangeArraydvNV*: proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glDepthRangeIndexeddNV*: proc (index: GLuint, n: GLdouble, f: GLdouble) {.stdcall.}
  glWindowPos2dARB*: proc (x: GLdouble, y: GLdouble) {.stdcall.}
  glWindowPos2dvARB*: proc (v: ptr GLdouble) {.stdcall.}
  glWindowPos2fARB*: proc (x: GLfloat, y: GLfloat) {.stdcall.}
  glWindowPos2fvARB*: proc (v: ptr GLfloat) {.stdcall.}
  glWindowPos2iARB*: proc (x: GLint, y: GLint) {.stdcall.}
  glWindowPos2ivARB*: proc (v: ptr GLint) {.stdcall.}
  glWindowPos2sARB*: proc (x: GLshort, y: GLshort) {.stdcall.}
  glWindowPos2svARB*: proc (v: ptr GLshort) {.stdcall.}
  glWindowPos3dARB*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glWindowPos3dvARB*: proc (v: ptr GLdouble) {.stdcall.}
  glWindowPos3fARB*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glWindowPos3fvARB*: proc (v: ptr GLfloat) {.stdcall.}
  glWindowPos3iARB*: proc (x: GLint, y: GLint, z: GLint) {.stdcall.}
  glWindowPos3ivARB*: proc (v: ptr GLint) {.stdcall.}
  glWindowPos3sARB*: proc (x: GLshort, y: GLshort, z: GLshort) {.stdcall.}
  glWindowPos3svARB*: proc (v: ptr GLshort) {.stdcall.}
  glDrawBuffersATI*: proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}
  glElementPointerATI*: proc (`type`: GLenum, pointer: pointer) {.stdcall.}
  glDrawElementArrayATI*: proc (mode: GLenum, count: GLsizei) {.stdcall.}
  glDrawRangeElementArrayATI*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei) {.stdcall.}
  glTexBumpParameterivATI*: proc (pname: GLenum, param: ptr GLint) {.stdcall.}
  glTexBumpParameterfvATI*: proc (pname: GLenum, param: ptr GLfloat) {.stdcall.}
  glGetTexBumpParameterivATI*: proc (pname: GLenum, param: ptr GLint) {.stdcall.}
  glGetTexBumpParameterfvATI*: proc (pname: GLenum, param: ptr GLfloat) {.stdcall.}
  glGenFragmentShadersATI*: proc (range: GLuint): GLuint {.stdcall.}
  glBindFragmentShaderATI*: proc (id: GLuint) {.stdcall.}
  glDeleteFragmentShaderATI*: proc (id: GLuint) {.stdcall.}
  glBeginFragmentShaderATI*: proc () {.stdcall.}
  glEndFragmentShaderATI*: proc () {.stdcall.}
  glPassTexCoordATI*: proc (dst: GLuint, coord: GLuint, swizzle: GLenum) {.stdcall.}
  glSampleMapATI*: proc (dst: GLuint, interp: GLuint, swizzle: GLenum) {.stdcall.}
  glColorFragmentOp1ATI*: proc (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) {.stdcall.}
  glColorFragmentOp2ATI*: proc (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) {.stdcall.}
  glColorFragmentOp3ATI*: proc (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) {.stdcall.}
  glAlphaFragmentOp1ATI*: proc (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) {.stdcall.}
  glAlphaFragmentOp2ATI*: proc (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) {.stdcall.}
  glAlphaFragmentOp3ATI*: proc (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) {.stdcall.}
  glSetFragmentShaderConstantATI*: proc (dst: GLuint, value: ptr GLfloat) {.stdcall.}
  glMapObjectBufferATI*: proc (buffer: GLuint): pointer {.stdcall.}
  glUnmapObjectBufferATI*: proc (buffer: GLuint) {.stdcall.}
  glPNTrianglesiATI*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glPNTrianglesfATI*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glStencilOpSeparateATI*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}
  glStencilFuncSeparateATI*: proc (frontfunc: GLenum, backfunc: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glNewObjectBufferATI*: proc (size: GLsizei, pointer: pointer, usage: GLenum): GLuint {.stdcall.}
  glIsObjectBufferATI*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glUpdateObjectBufferATI*: proc (buffer: GLuint, offset: GLuint, size: GLsizei, pointer: pointer, preserve: GLenum) {.stdcall.}
  glGetObjectBufferfvATI*: proc (buffer: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetObjectBufferivATI*: proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glFreeObjectBufferATI*: proc (buffer: GLuint) {.stdcall.}
  glArrayObjectATI*: proc (array: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) {.stdcall.}
  glGetArrayObjectfvATI*: proc (array: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetArrayObjectivATI*: proc (array: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glVariantArrayObjectATI*: proc (id: GLuint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) {.stdcall.}
  glGetVariantArrayObjectfvATI*: proc (id: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVariantArrayObjectivATI*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glVertexAttribArrayObjectATI*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) {.stdcall.}
  glGetVertexAttribArrayObjectfvATI*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVertexAttribArrayObjectivATI*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glVertexStream1sATI*: proc (stream: GLenum, x: GLshort) {.stdcall.}
  glVertexStream1svATI*: proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}
  glVertexStream1iATI*: proc (stream: GLenum, x: GLint) {.stdcall.}
  glVertexStream1ivATI*: proc (stream: GLenum, coords: ptr GLint) {.stdcall.}
  glVertexStream1fATI*: proc (stream: GLenum, x: GLfloat) {.stdcall.}
  glVertexStream1fvATI*: proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}
  glVertexStream1dATI*: proc (stream: GLenum, x: GLdouble) {.stdcall.}
  glVertexStream1dvATI*: proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}
  glVertexStream2sATI*: proc (stream: GLenum, x: GLshort, y: GLshort) {.stdcall.}
  glVertexStream2svATI*: proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}
  glVertexStream2iATI*: proc (stream: GLenum, x: GLint, y: GLint) {.stdcall.}
  glVertexStream2ivATI*: proc (stream: GLenum, coords: ptr GLint) {.stdcall.}
  glVertexStream2fATI*: proc (stream: GLenum, x: GLfloat, y: GLfloat) {.stdcall.}
  glVertexStream2fvATI*: proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}
  glVertexStream2dATI*: proc (stream: GLenum, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexStream2dvATI*: proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}
  glVertexStream3sATI*: proc (stream: GLenum, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}
  glVertexStream3svATI*: proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}
  glVertexStream3iATI*: proc (stream: GLenum, x: GLint, y: GLint, z: GLint) {.stdcall.}
  glVertexStream3ivATI*: proc (stream: GLenum, coords: ptr GLint) {.stdcall.}
  glVertexStream3fATI*: proc (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glVertexStream3fvATI*: proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}
  glVertexStream3dATI*: proc (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexStream3dvATI*: proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}
  glVertexStream4sATI*: proc (stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}
  glVertexStream4svATI*: proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}
  glVertexStream4iATI*: proc (stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glVertexStream4ivATI*: proc (stream: GLenum, coords: ptr GLint) {.stdcall.}
  glVertexStream4fATI*: proc (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glVertexStream4fvATI*: proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}
  glVertexStream4dATI*: proc (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexStream4dvATI*: proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}
  glNormalStream3bATI*: proc (stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) {.stdcall.}
  glNormalStream3bvATI*: proc (stream: GLenum, coords: ptr GLbyte) {.stdcall.}
  glNormalStream3sATI*: proc (stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) {.stdcall.}
  glNormalStream3svATI*: proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}
  glNormalStream3iATI*: proc (stream: GLenum, nx: GLint, ny: GLint, nz: GLint) {.stdcall.}
  glNormalStream3ivATI*: proc (stream: GLenum, coords: ptr GLint) {.stdcall.}
  glNormalStream3fATI*: proc (stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) {.stdcall.}
  glNormalStream3fvATI*: proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}
  glNormalStream3dATI*: proc (stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) {.stdcall.}
  glNormalStream3dvATI*: proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}
  glClientActiveVertexStreamATI*: proc (stream: GLenum) {.stdcall.}
  glVertexBlendEnviATI*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glVertexBlendEnvfATI*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glEGLImageTargetTexStorageEXT*: proc (target: GLenum, image: GLeglImageOES, attrib_list: ptr GLint) {.stdcall.}
  glEGLImageTargetTextureStorageEXT*: proc (texture: GLuint, image: GLeglImageOES, attrib_list: ptr GLint) {.stdcall.}
  glUniformBufferEXT*: proc (program: GLuint, location: GLint, buffer: GLuint) {.stdcall.}
  glGetUniformBufferSizeEXT*: proc (program: GLuint, location: GLint): GLint {.stdcall.}
  glGetUniformOffsetEXT*: proc (program: GLuint, location: GLint): GLintptr {.stdcall.}
  glBlendColorEXT*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}
  glBlendEquationSeparateEXT*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}
  glBlendFuncSeparateEXT*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}
  glBlendEquationEXT*: proc (mode: GLenum) {.stdcall.}
  glColorSubTableEXT*: proc (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glCopyColorSubTableEXT*: proc (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glLockArraysEXT*: proc (first: GLint, count: GLsizei) {.stdcall.}
  glUnlockArraysEXT*: proc () {.stdcall.}
  glConvolutionFilter1DEXT*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}
  glConvolutionFilter2DEXT*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}
  glConvolutionParameterfEXT*: proc (target: GLenum, pname: GLenum, params: GLfloat) {.stdcall.}
  glConvolutionParameterfvEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glConvolutionParameteriEXT*: proc (target: GLenum, pname: GLenum, params: GLint) {.stdcall.}
  glConvolutionParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCopyConvolutionFilter1DEXT*: proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyConvolutionFilter2DEXT*: proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetConvolutionFilterEXT*: proc (target: GLenum, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}
  glGetConvolutionParameterfvEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetConvolutionParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSeparableFilterEXT*: proc (target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer) {.stdcall.}
  glSeparableFilter2DEXT*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer) {.stdcall.}
  glTangent3bEXT*: proc (tx: GLbyte, ty: GLbyte, tz: GLbyte) {.stdcall.}
  glTangent3bvEXT*: proc (v: ptr GLbyte) {.stdcall.}
  glTangent3dEXT*: proc (tx: GLdouble, ty: GLdouble, tz: GLdouble) {.stdcall.}
  glTangent3dvEXT*: proc (v: ptr GLdouble) {.stdcall.}
  glTangent3fEXT*: proc (tx: GLfloat, ty: GLfloat, tz: GLfloat) {.stdcall.}
  glTangent3fvEXT*: proc (v: ptr GLfloat) {.stdcall.}
  glTangent3iEXT*: proc (tx: GLint, ty: GLint, tz: GLint) {.stdcall.}
  glTangent3ivEXT*: proc (v: ptr GLint) {.stdcall.}
  glTangent3sEXT*: proc (tx: GLshort, ty: GLshort, tz: GLshort) {.stdcall.}
  glTangent3svEXT*: proc (v: ptr GLshort) {.stdcall.}
  glBinormal3bEXT*: proc (bx: GLbyte, by: GLbyte, bz: GLbyte) {.stdcall.}
  glBinormal3bvEXT*: proc (v: ptr GLbyte) {.stdcall.}
  glBinormal3dEXT*: proc (bx: GLdouble, by: GLdouble, bz: GLdouble) {.stdcall.}
  glBinormal3dvEXT*: proc (v: ptr GLdouble) {.stdcall.}
  glBinormal3fEXT*: proc (bx: GLfloat, by: GLfloat, bz: GLfloat) {.stdcall.}
  glBinormal3fvEXT*: proc (v: ptr GLfloat) {.stdcall.}
  glBinormal3iEXT*: proc (bx: GLint, by: GLint, bz: GLint) {.stdcall.}
  glBinormal3ivEXT*: proc (v: ptr GLint) {.stdcall.}
  glBinormal3sEXT*: proc (bx: GLshort, by: GLshort, bz: GLshort) {.stdcall.}
  glBinormal3svEXT*: proc (v: ptr GLshort) {.stdcall.}
  glTangentPointerEXT*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glBinormalPointerEXT*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glCopyTexImage1DEXT*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}
  glCopyTexImage2DEXT*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}
  glCopyTexSubImage1DEXT*: proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyTexSubImage2DEXT*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glCopyTexSubImage3DEXT*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glCullParameterdvEXT*: proc (pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glCullParameterfvEXT*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glLabelObjectEXT*: proc (`type`: GLenum, `object`: GLuint, length: GLsizei, label: cstring) {.stdcall.}
  glGetObjectLabelEXT*: proc (`type`: GLenum, `object`: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}
  glInsertEventMarkerEXT*: proc (length: GLsizei, marker: cstring) {.stdcall.}
  glPushGroupMarkerEXT*: proc (length: GLsizei, marker: cstring) {.stdcall.}
  glPopGroupMarkerEXT*: proc () {.stdcall.}
  glDepthBoundsEXT*: proc (zmin: GLclampd, zmax: GLclampd) {.stdcall.}
  glMatrixLoadfEXT*: proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixLoaddEXT*: proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}
  glMatrixMultfEXT*: proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixMultdEXT*: proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}
  glMatrixLoadIdentityEXT*: proc (mode: GLenum) {.stdcall.}
  glMatrixRotatefEXT*: proc (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glMatrixRotatedEXT*: proc (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glMatrixScalefEXT*: proc (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glMatrixScaledEXT*: proc (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glMatrixTranslatefEXT*: proc (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glMatrixTranslatedEXT*: proc (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glMatrixFrustumEXT*: proc (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.stdcall.}
  glMatrixOrthoEXT*: proc (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.stdcall.}
  glMatrixPopEXT*: proc (mode: GLenum) {.stdcall.}
  glMatrixPushEXT*: proc (mode: GLenum) {.stdcall.}
  glClientAttribDefaultEXT*: proc (mask: GLbitfield) {.stdcall.}
  glPushClientAttribDefaultEXT*: proc (mask: GLbitfield) {.stdcall.}
  glTextureParameterfEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glTextureParameterfvEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glTextureParameteriEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glTextureParameterivEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTextureImage1DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTextureImage2DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTextureSubImage1DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTextureSubImage2DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCopyTextureImage1DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}
  glCopyTextureImage2DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}
  glCopyTextureSubImage1DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyTextureSubImage2DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetTextureImageEXT*: proc (texture: GLuint, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glGetTextureParameterfvEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTextureParameterivEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTextureLevelParameterfvEXT*: proc (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetTextureLevelParameterivEXT*: proc (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTextureImage3DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTextureSubImage3DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCopyTextureSubImage3DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glBindMultiTextureEXT*: proc (texunit: GLenum, target: GLenum, texture: GLuint) {.stdcall.}
  glMultiTexCoordPointerEXT*: proc (texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glMultiTexEnvfEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glMultiTexEnvfvEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glMultiTexEnviEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glMultiTexEnvivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glMultiTexGendEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) {.stdcall.}
  glMultiTexGendvEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glMultiTexGenfEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glMultiTexGenfvEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glMultiTexGeniEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glMultiTexGenivEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMultiTexEnvfvEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMultiTexEnvivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMultiTexGendvEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glGetMultiTexGenfvEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMultiTexGenivEXT*: proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glMultiTexParameteriEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glMultiTexParameterivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glMultiTexParameterfEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glMultiTexParameterfvEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glMultiTexImage1DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glMultiTexImage2DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glMultiTexSubImage1DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glMultiTexSubImage2DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCopyMultiTexImage1DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}
  glCopyMultiTexImage2DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}
  glCopyMultiTexSubImage1DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glCopyMultiTexSubImage2DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetMultiTexImageEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glGetMultiTexParameterfvEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMultiTexParameterivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMultiTexLevelParameterfvEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMultiTexLevelParameterivEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glMultiTexImage3DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glMultiTexSubImage3DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glCopyMultiTexSubImage3DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glEnableClientStateIndexedEXT*: proc (array: GLenum, index: GLuint) {.stdcall.}
  glDisableClientStateIndexedEXT*: proc (array: GLenum, index: GLuint) {.stdcall.}
  glGetFloatIndexedvEXT*: proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.stdcall.}
  glGetDoubleIndexedvEXT*: proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.stdcall.}
  glGetPointerIndexedvEXT*: proc (target: GLenum, index: GLuint, data: ptr pointer) {.stdcall.}
  glEnableIndexedEXT*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glDisableIndexedEXT*: proc (target: GLenum, index: GLuint) {.stdcall.}
  glIsEnabledIndexedEXT*: proc (target: GLenum, index: GLuint): GLboolean {.stdcall.}
  glGetIntegerIndexedvEXT*: proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}
  glGetBooleanIndexedvEXT*: proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.stdcall.}
  glCompressedTextureImage3DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedTextureImage2DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedTextureImage1DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedTextureSubImage3DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedTextureSubImage2DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedTextureSubImage1DEXT*: proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glGetCompressedTextureImageEXT*: proc (texture: GLuint, target: GLenum, lod: GLint, img: pointer) {.stdcall.}
  glCompressedMultiTexImage3DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedMultiTexImage2DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedMultiTexImage1DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedMultiTexSubImage3DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedMultiTexSubImage2DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glCompressedMultiTexSubImage1DEXT*: proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}
  glGetCompressedMultiTexImageEXT*: proc (texunit: GLenum, target: GLenum, lod: GLint, img: pointer) {.stdcall.}
  glMatrixLoadTransposefEXT*: proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixLoadTransposedEXT*: proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}
  glMatrixMultTransposefEXT*: proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixMultTransposedEXT*: proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}
  glNamedBufferDataEXT*: proc (buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}
  glNamedBufferSubDataEXT*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glMapNamedBufferEXT*: proc (buffer: GLuint, access: GLenum): pointer {.stdcall.}
  glUnmapNamedBufferEXT*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glGetNamedBufferParameterivEXT*: proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetNamedBufferPointervEXT*: proc (buffer: GLuint, pname: GLenum, params: ptr pointer) {.stdcall.}
  glGetNamedBufferSubDataEXT*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glProgramUniform1fEXT*: proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}
  glProgramUniform2fEXT*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}
  glProgramUniform3fEXT*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}
  glProgramUniform4fEXT*: proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}
  glProgramUniform1iEXT*: proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}
  glProgramUniform2iEXT*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}
  glProgramUniform3iEXT*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}
  glProgramUniform4iEXT*: proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}
  glProgramUniform1fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform2fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform3fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform4fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}
  glProgramUniform1ivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform2ivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform3ivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniform4ivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}
  glProgramUniformMatrix2fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2x3fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3x2fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix2x4fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4x2fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix3x4fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glProgramUniformMatrix4x3fvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}
  glTextureBufferEXT*: proc (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}
  glMultiTexBufferEXT*: proc (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}
  glTextureParameterIivEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTextureParameterIuivEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetTextureParameterIivEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTextureParameterIuivEXT*: proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glMultiTexParameterIivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glMultiTexParameterIuivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetMultiTexParameterIivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMultiTexParameterIuivEXT*: proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glProgramUniform1uiEXT*: proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}
  glProgramUniform2uiEXT*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}
  glProgramUniform3uiEXT*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}
  glProgramUniform4uiEXT*: proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}
  glProgramUniform1uivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform2uivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform3uivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glProgramUniform4uivEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glNamedProgramLocalParameters4fvEXT*: proc (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}
  glNamedProgramLocalParameterI4iEXT*: proc (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glNamedProgramLocalParameterI4ivEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}
  glNamedProgramLocalParametersI4ivEXT*: proc (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}
  glNamedProgramLocalParameterI4uiEXT*: proc (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}
  glNamedProgramLocalParameterI4uivEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}
  glNamedProgramLocalParametersI4uivEXT*: proc (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}
  glGetNamedProgramLocalParameterIivEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}
  glGetNamedProgramLocalParameterIuivEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}
  glEnableClientStateiEXT*: proc (array: GLenum, index: GLuint) {.stdcall.}
  glDisableClientStateiEXT*: proc (array: GLenum, index: GLuint) {.stdcall.}
  glGetFloati_vEXT*: proc (pname: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}
  glGetDoublei_vEXT*: proc (pname: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}
  glGetPointeri_vEXT*: proc (pname: GLenum, index: GLuint, params: ptr pointer) {.stdcall.}
  glNamedProgramStringEXT*: proc (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.stdcall.}
  glNamedProgramLocalParameter4dEXT*: proc (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glNamedProgramLocalParameter4dvEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}
  glNamedProgramLocalParameter4fEXT*: proc (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glNamedProgramLocalParameter4fvEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}
  glGetNamedProgramLocalParameterdvEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}
  glGetNamedProgramLocalParameterfvEXT*: proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}
  glGetNamedProgramivEXT*: proc (program: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetNamedProgramStringEXT*: proc (program: GLuint, target: GLenum, pname: GLenum, string: pointer) {.stdcall.}
  glNamedRenderbufferStorageEXT*: proc (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetNamedRenderbufferParameterivEXT*: proc (renderbuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glNamedRenderbufferStorageMultisampleEXT*: proc (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glNamedRenderbufferStorageMultisampleCoverageEXT*: proc (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glCheckNamedFramebufferStatusEXT*: proc (framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}
  glNamedFramebufferTexture1DEXT*: proc (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glNamedFramebufferTexture2DEXT*: proc (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glNamedFramebufferTexture3DEXT*: proc (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}
  glNamedFramebufferRenderbufferEXT*: proc (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}
  glGetNamedFramebufferAttachmentParameterivEXT*: proc (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGenerateTextureMipmapEXT*: proc (texture: GLuint, target: GLenum) {.stdcall.}
  glGenerateMultiTexMipmapEXT*: proc (texunit: GLenum, target: GLenum) {.stdcall.}
  glFramebufferDrawBufferEXT*: proc (framebuffer: GLuint, mode: GLenum) {.stdcall.}
  glFramebufferDrawBuffersEXT*: proc (framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum) {.stdcall.}
  glFramebufferReadBufferEXT*: proc (framebuffer: GLuint, mode: GLenum) {.stdcall.}
  glGetFramebufferParameterivEXT*: proc (framebuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glNamedCopyBufferSubDataEXT*: proc (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glNamedFramebufferTextureEXT*: proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glNamedFramebufferTextureLayerEXT*: proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}
  glNamedFramebufferTextureFaceEXT*: proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) {.stdcall.}
  glTextureRenderbufferEXT*: proc (texture: GLuint, target: GLenum, renderbuffer: GLuint) {.stdcall.}
  glMultiTexRenderbufferEXT*: proc (texunit: GLenum, target: GLenum, renderbuffer: GLuint) {.stdcall.}
  glVertexArrayVertexOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayColorOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayEdgeFlagOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayIndexOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayNormalOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayTexCoordOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayMultiTexCoordOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayFogCoordOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArraySecondaryColorOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayVertexAttribOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glVertexArrayVertexAttribIOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glEnableVertexArrayEXT*: proc (vaobj: GLuint, array: GLenum) {.stdcall.}
  glDisableVertexArrayEXT*: proc (vaobj: GLuint, array: GLenum) {.stdcall.}
  glEnableVertexArrayAttribEXT*: proc (vaobj: GLuint, index: GLuint) {.stdcall.}
  glDisableVertexArrayAttribEXT*: proc (vaobj: GLuint, index: GLuint) {.stdcall.}
  glGetVertexArrayIntegervEXT*: proc (vaobj: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glGetVertexArrayPointervEXT*: proc (vaobj: GLuint, pname: GLenum, param: ptr pointer) {.stdcall.}
  glGetVertexArrayIntegeri_vEXT*: proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}
  glGetVertexArrayPointeri_vEXT*: proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr pointer) {.stdcall.}
  glMapNamedBufferRangeEXT*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}
  glFlushMappedNamedBufferRangeEXT*: proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}
  glNamedBufferStorageEXT*: proc (buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}
  glClearNamedBufferDataEXT*: proc (buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glClearNamedBufferSubDataEXT*: proc (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glNamedFramebufferParameteriEXT*: proc (framebuffer: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glGetNamedFramebufferParameterivEXT*: proc (framebuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glProgramUniform1dEXT*: proc (program: GLuint, location: GLint, x: GLdouble) {.stdcall.}
  glProgramUniform2dEXT*: proc (program: GLuint, location: GLint, x: GLdouble, y: GLdouble) {.stdcall.}
  glProgramUniform3dEXT*: proc (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glProgramUniform4dEXT*: proc (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glProgramUniform1dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform2dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform3dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniform4dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix2dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix2x3dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix2x4dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3x2dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix3x4dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4x2dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glProgramUniformMatrix4x3dvEXT*: proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}
  glTextureBufferRangeEXT*: proc (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glTextureStorage1DEXT*: proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}
  glTextureStorage2DEXT*: proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glTextureStorage3DEXT*: proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glTextureStorage2DMultisampleEXT*: proc (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glTextureStorage3DMultisampleEXT*: proc (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}
  glVertexArrayBindVertexBufferEXT*: proc (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}
  glVertexArrayVertexAttribFormatEXT*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}
  glVertexArrayVertexAttribIFormatEXT*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}
  glVertexArrayVertexAttribLFormatEXT*: proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}
  glVertexArrayVertexAttribBindingEXT*: proc (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) {.stdcall.}
  glVertexArrayVertexBindingDivisorEXT*: proc (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) {.stdcall.}
  glVertexArrayVertexAttribLOffsetEXT*: proc (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}
  glTexturePageCommitmentEXT*: proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) {.stdcall.}
  glVertexArrayVertexAttribDivisorEXT*: proc (vaobj: GLuint, index: GLuint, divisor: GLuint) {.stdcall.}
  glColorMaskIndexedEXT*: proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.stdcall.}
  glDrawArraysInstancedEXT*: proc (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) {.stdcall.}
  glDrawElementsInstancedEXT*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei) {.stdcall.}
  glDrawRangeElementsEXT*: proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}
  glBufferStorageExternalEXT*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) {.stdcall.}
  glNamedBufferStorageExternalEXT*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) {.stdcall.}
  glFogCoordfEXT*: proc (coord: GLfloat) {.stdcall.}
  glFogCoordfvEXT*: proc (coord: ptr GLfloat) {.stdcall.}
  glFogCoorddEXT*: proc (coord: GLdouble) {.stdcall.}
  glFogCoorddvEXT*: proc (coord: ptr GLdouble) {.stdcall.}
  glFogCoordPointerEXT*: proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glBlitFramebufferEXT*: proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}
  glRenderbufferStorageMultisampleEXT*: proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glIsRenderbufferEXT*: proc (renderbuffer: GLuint): GLboolean {.stdcall.}
  glBindRenderbufferEXT*: proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}
  glDeleteRenderbuffersEXT*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glGenRenderbuffersEXT*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}
  glRenderbufferStorageEXT*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glGetRenderbufferParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glIsFramebufferEXT*: proc (framebuffer: GLuint): GLboolean {.stdcall.}
  glBindFramebufferEXT*: proc (target: GLenum, framebuffer: GLuint) {.stdcall.}
  glDeleteFramebuffersEXT*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glGenFramebuffersEXT*: proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}
  glCheckFramebufferStatusEXT*: proc (target: GLenum): GLenum {.stdcall.}
  glFramebufferTexture1DEXT*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTexture2DEXT*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTexture3DEXT*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}
  glFramebufferRenderbufferEXT*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}
  glGetFramebufferAttachmentParameterivEXT*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGenerateMipmapEXT*: proc (target: GLenum) {.stdcall.}
  glProgramParameteriEXT*: proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}
  glProgramEnvParameters4fvEXT*: proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}
  glProgramLocalParameters4fvEXT*: proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}
  glGetUniformuivEXT*: proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}
  glBindFragDataLocationEXT*: proc (program: GLuint, color: GLuint, name: cstring) {.stdcall.}
  glGetFragDataLocationEXT*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glUniform1uiEXT*: proc (location: GLint, v0: GLuint) {.stdcall.}
  glUniform2uiEXT*: proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}
  glUniform3uiEXT*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}
  glUniform4uiEXT*: proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}
  glUniform1uivEXT*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform2uivEXT*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform3uivEXT*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glUniform4uivEXT*: proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}
  glVertexAttribI1iEXT*: proc (index: GLuint, x: GLint) {.stdcall.}
  glVertexAttribI2iEXT*: proc (index: GLuint, x: GLint, y: GLint) {.stdcall.}
  glVertexAttribI3iEXT*: proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.stdcall.}
  glVertexAttribI4iEXT*: proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glVertexAttribI1uiEXT*: proc (index: GLuint, x: GLuint) {.stdcall.}
  glVertexAttribI2uiEXT*: proc (index: GLuint, x: GLuint, y: GLuint) {.stdcall.}
  glVertexAttribI3uiEXT*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.stdcall.}
  glVertexAttribI4uiEXT*: proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}
  glVertexAttribI1ivEXT*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI2ivEXT*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI3ivEXT*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI4ivEXT*: proc (index: GLuint, v: ptr GLint) {.stdcall.}
  glVertexAttribI1uivEXT*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI2uivEXT*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI3uivEXT*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI4uivEXT*: proc (index: GLuint, v: ptr GLuint) {.stdcall.}
  glVertexAttribI4bvEXT*: proc (index: GLuint, v: ptr GLbyte) {.stdcall.}
  glVertexAttribI4svEXT*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttribI4ubvEXT*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttribI4usvEXT*: proc (index: GLuint, v: ptr GLushort) {.stdcall.}
  glVertexAttribIPointerEXT*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGetVertexAttribIivEXT*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribIuivEXT*: proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetHistogramEXT*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}
  glGetHistogramParameterfvEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetHistogramParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMinmaxEXT*: proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}
  glGetMinmaxParameterfvEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMinmaxParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glHistogramEXT*: proc (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) {.stdcall.}
  glMinmaxEXT*: proc (target: GLenum, internalformat: GLenum, sink: GLboolean) {.stdcall.}
  glResetHistogramEXT*: proc (target: GLenum) {.stdcall.}
  glResetMinmaxEXT*: proc (target: GLenum) {.stdcall.}
  glIndexFuncEXT*: proc (`func`: GLenum, `ref`: GLclampf) {.stdcall.}
  glIndexMaterialEXT*: proc (face: GLenum, mode: GLenum) {.stdcall.}
  glApplyTextureEXT*: proc (mode: GLenum) {.stdcall.}
  glTextureLightEXT*: proc (pname: GLenum) {.stdcall.}
  glTextureMaterialEXT*: proc (face: GLenum, mode: GLenum) {.stdcall.}
  glGetUnsignedBytevEXT*: proc (pname: GLenum, data: ptr GLubyte) {.stdcall.}
  glGetUnsignedBytei_vEXT*: proc (target: GLenum, index: GLuint, data: ptr GLubyte) {.stdcall.}
  glDeleteMemoryObjectsEXT*: proc (n: GLsizei, memoryObjects: ptr GLuint) {.stdcall.}
  glIsMemoryObjectEXT*: proc (memoryObject: GLuint): GLboolean {.stdcall.}
  glCreateMemoryObjectsEXT*: proc (n: GLsizei, memoryObjects: ptr GLuint) {.stdcall.}
  glMemoryObjectParameterivEXT*: proc (memoryObject: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMemoryObjectParameterivEXT*: proc (memoryObject: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTexStorageMem2DEXT*: proc (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTexStorageMem2DMultisampleEXT*: proc (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTexStorageMem3DEXT*: proc (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTexStorageMem3DMultisampleEXT*: proc (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}
  glBufferStorageMemEXT*: proc (target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTextureStorageMem2DEXT*: proc (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTextureStorageMem2DMultisampleEXT*: proc (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTextureStorageMem3DEXT*: proc (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTextureStorageMem3DMultisampleEXT*: proc (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}
  glNamedBufferStorageMemEXT*: proc (buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTexStorageMem1DEXT*: proc (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTextureStorageMem1DEXT*: proc (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}
  glImportMemoryFdEXT*: proc (memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) {.stdcall.}
  glImportMemoryWin32HandleEXT*: proc (memory: GLuint, size: GLuint64, handleType: GLenum, handle: pointer) {.stdcall.}
  glImportMemoryWin32NameEXT*: proc (memory: GLuint, size: GLuint64, handleType: GLenum, name: pointer) {.stdcall.}
  glMultiDrawArraysEXT*: proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei) {.stdcall.}
  glMultiDrawElementsEXT*: proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei) {.stdcall.}
  glSampleMaskEXT*: proc (value: GLclampf, invert: GLboolean) {.stdcall.}
  glSamplePatternEXT*: proc (pattern: GLenum) {.stdcall.}
  glColorTableEXT*: proc (target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}
  glGetColorTableEXT*: proc (target: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}
  glGetColorTableParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetColorTableParameterfvEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glPixelTransformParameteriEXT*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glPixelTransformParameterfEXT*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glPixelTransformParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glPixelTransformParameterfvEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetPixelTransformParameterivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetPixelTransformParameterfvEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glPointParameterfEXT*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPointParameterfvEXT*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glPolygonOffsetEXT*: proc (factor: GLfloat, bias: GLfloat) {.stdcall.}
  glPolygonOffsetClampEXT*: proc (factor: GLfloat, units: GLfloat, clamp: GLfloat) {.stdcall.}
  glProvokingVertexEXT*: proc (mode: GLenum) {.stdcall.}
  glRasterSamplesEXT*: proc (samples: GLuint, fixedsamplelocations: GLboolean) {.stdcall.}
  glSecondaryColor3bEXT*: proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.stdcall.}
  glSecondaryColor3bvEXT*: proc (v: ptr GLbyte) {.stdcall.}
  glSecondaryColor3dEXT*: proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.stdcall.}
  glSecondaryColor3dvEXT*: proc (v: ptr GLdouble) {.stdcall.}
  glSecondaryColor3fEXT*: proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.stdcall.}
  glSecondaryColor3fvEXT*: proc (v: ptr GLfloat) {.stdcall.}
  glSecondaryColor3iEXT*: proc (red: GLint, green: GLint, blue: GLint) {.stdcall.}
  glSecondaryColor3ivEXT*: proc (v: ptr GLint) {.stdcall.}
  glSecondaryColor3sEXT*: proc (red: GLshort, green: GLshort, blue: GLshort) {.stdcall.}
  glSecondaryColor3svEXT*: proc (v: ptr GLshort) {.stdcall.}
  glSecondaryColor3ubEXT*: proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.stdcall.}
  glSecondaryColor3ubvEXT*: proc (v: ptr GLubyte) {.stdcall.}
  glSecondaryColor3uiEXT*: proc (red: GLuint, green: GLuint, blue: GLuint) {.stdcall.}
  glSecondaryColor3uivEXT*: proc (v: ptr GLuint) {.stdcall.}
  glSecondaryColor3usEXT*: proc (red: GLushort, green: GLushort, blue: GLushort) {.stdcall.}
  glSecondaryColor3usvEXT*: proc (v: ptr GLushort) {.stdcall.}
  glSecondaryColorPointerEXT*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGenSemaphoresEXT*: proc (n: GLsizei, semaphores: ptr GLuint) {.stdcall.}
  glDeleteSemaphoresEXT*: proc (n: GLsizei, semaphores: ptr GLuint) {.stdcall.}
  glIsSemaphoreEXT*: proc (semaphore: GLuint): GLboolean {.stdcall.}
  glSemaphoreParameterui64vEXT*: proc (semaphore: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}
  glGetSemaphoreParameterui64vEXT*: proc (semaphore: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}
  glWaitSemaphoreEXT*: proc (semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, srcLayouts: ptr GLenum) {.stdcall.}
  glSignalSemaphoreEXT*: proc (semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, dstLayouts: ptr GLenum) {.stdcall.}
  glImportSemaphoreFdEXT*: proc (semaphore: GLuint, handleType: GLenum, fd: GLint) {.stdcall.}
  glImportSemaphoreWin32HandleEXT*: proc (semaphore: GLuint, handleType: GLenum, handle: pointer) {.stdcall.}
  glImportSemaphoreWin32NameEXT*: proc (semaphore: GLuint, handleType: GLenum, name: pointer) {.stdcall.}
  glUseShaderProgramEXT*: proc (`type`: GLenum, program: GLuint) {.stdcall.}
  glActiveProgramEXT*: proc (program: GLuint) {.stdcall.}
  glCreateShaderProgramEXT*: proc (`type`: GLenum, string: cstring): GLuint {.stdcall.}
  glActiveShaderProgramEXT*: proc (pipeline: GLuint, program: GLuint) {.stdcall.}
  glBindProgramPipelineEXT*: proc (pipeline: GLuint) {.stdcall.}
  glCreateShaderProgramvEXT*: proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.stdcall.}
  glDeleteProgramPipelinesEXT*: proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}
  glGenProgramPipelinesEXT*: proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}
  glGetProgramPipelineInfoLogEXT*: proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}
  glGetProgramPipelineivEXT*: proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glIsProgramPipelineEXT*: proc (pipeline: GLuint): GLboolean {.stdcall.}
  glUseProgramStagesEXT*: proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.stdcall.}
  glValidateProgramPipelineEXT*: proc (pipeline: GLuint) {.stdcall.}
  glFramebufferFetchBarrierEXT*: proc () {.stdcall.}
  glBindImageTextureEXT*: proc (index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) {.stdcall.}
  glMemoryBarrierEXT*: proc (barriers: GLbitfield) {.stdcall.}
  glStencilClearTagEXT*: proc (stencilTagBits: GLsizei, stencilClearTag: GLuint) {.stdcall.}
  glActiveStencilFaceEXT*: proc (face: GLenum) {.stdcall.}
  glTexSubImage1DEXT*: proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage2DEXT*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexImage3DEXT*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage3DEXT*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glFramebufferTextureLayerEXT*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}
  glTexBufferEXT*: proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}
  glTexParameterIivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glTexParameterIuivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetTexParameterIivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetTexParameterIuivEXT*: proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glClearColorIiEXT*: proc (red: GLint, green: GLint, blue: GLint, alpha: GLint) {.stdcall.}
  glClearColorIuiEXT*: proc (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) {.stdcall.}
  glAreTexturesResidentEXT*: proc (n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}
  glBindTextureEXT*: proc (target: GLenum, texture: GLuint) {.stdcall.}
  glDeleteTexturesEXT*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glGenTexturesEXT*: proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}
  glIsTextureEXT*: proc (texture: GLuint): GLboolean {.stdcall.}
  glPrioritizeTexturesEXT*: proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLclampf) {.stdcall.}
  glTextureNormalEXT*: proc (mode: GLenum) {.stdcall.}
  glTexStorage1DEXT*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}
  glTexStorage2DEXT*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glTexStorage3DEXT*: proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glGetQueryObjecti64vEXT*: proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glGetQueryObjectui64vEXT*: proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}
  glBeginTransformFeedbackEXT*: proc (primitiveMode: GLenum) {.stdcall.}
  glEndTransformFeedbackEXT*: proc () {.stdcall.}
  glBindBufferRangeEXT*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glBindBufferOffsetEXT*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) {.stdcall.}
  glBindBufferBaseEXT*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}
  glTransformFeedbackVaryingsEXT*: proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}
  glGetTransformFeedbackVaryingEXT*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glArrayElementEXT*: proc (i: GLint) {.stdcall.}
  glColorPointerEXT*: proc (size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}
  glDrawArraysEXT*: proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}
  glEdgeFlagPointerEXT*: proc (stride: GLsizei, count: GLsizei, pointer: ptr GLboolean) {.stdcall.}
  glGetPointervEXT*: proc (pname: GLenum, params: ptr pointer) {.stdcall.}
  glIndexPointerEXT*: proc (`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}
  glNormalPointerEXT*: proc (`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}
  glTexCoordPointerEXT*: proc (size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}
  glVertexPointerEXT*: proc (size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}
  glVertexAttribL1dEXT*: proc (index: GLuint, x: GLdouble) {.stdcall.}
  glVertexAttribL2dEXT*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexAttribL3dEXT*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexAttribL4dEXT*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexAttribL1dvEXT*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL2dvEXT*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL3dvEXT*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribL4dvEXT*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttribLPointerEXT*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glGetVertexAttribLdvEXT*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glBeginVertexShaderEXT*: proc () {.stdcall.}
  glEndVertexShaderEXT*: proc () {.stdcall.}
  glBindVertexShaderEXT*: proc (id: GLuint) {.stdcall.}
  glGenVertexShadersEXT*: proc (range: GLuint): GLuint {.stdcall.}
  glDeleteVertexShaderEXT*: proc (id: GLuint) {.stdcall.}
  glShaderOp1EXT*: proc (op: GLenum, res: GLuint, arg1: GLuint) {.stdcall.}
  glShaderOp2EXT*: proc (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) {.stdcall.}
  glShaderOp3EXT*: proc (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) {.stdcall.}
  glSwizzleEXT*: proc (res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) {.stdcall.}
  glWriteMaskEXT*: proc (res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) {.stdcall.}
  glInsertComponentEXT*: proc (res: GLuint, src: GLuint, num: GLuint) {.stdcall.}
  glExtractComponentEXT*: proc (res: GLuint, src: GLuint, num: GLuint) {.stdcall.}
  glGenSymbolsEXT*: proc (datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint): GLuint {.stdcall.}
  glSetInvariantEXT*: proc (id: GLuint, `type`: GLenum, `addr`: pointer) {.stdcall.}
  glSetLocalConstantEXT*: proc (id: GLuint, `type`: GLenum, `addr`: pointer) {.stdcall.}
  glVariantbvEXT*: proc (id: GLuint, `addr`: ptr GLbyte) {.stdcall.}
  glVariantsvEXT*: proc (id: GLuint, `addr`: ptr GLshort) {.stdcall.}
  glVariantivEXT*: proc (id: GLuint, `addr`: ptr GLint) {.stdcall.}
  glVariantfvEXT*: proc (id: GLuint, `addr`: ptr GLfloat) {.stdcall.}
  glVariantdvEXT*: proc (id: GLuint, `addr`: ptr GLdouble) {.stdcall.}
  glVariantubvEXT*: proc (id: GLuint, `addr`: ptr GLubyte) {.stdcall.}
  glVariantusvEXT*: proc (id: GLuint, `addr`: ptr GLushort) {.stdcall.}
  glVariantuivEXT*: proc (id: GLuint, `addr`: ptr GLuint) {.stdcall.}
  glVariantPointerEXT*: proc (id: GLuint, `type`: GLenum, stride: GLuint, `addr`: pointer) {.stdcall.}
  glEnableVariantClientStateEXT*: proc (id: GLuint) {.stdcall.}
  glDisableVariantClientStateEXT*: proc (id: GLuint) {.stdcall.}
  glBindLightParameterEXT*: proc (light: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindMaterialParameterEXT*: proc (face: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindTexGenParameterEXT*: proc (unit: GLenum, coord: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindTextureUnitParameterEXT*: proc (unit: GLenum, value: GLenum): GLuint {.stdcall.}
  glBindParameterEXT*: proc (value: GLenum): GLuint {.stdcall.}
  glIsVariantEnabledEXT*: proc (id: GLuint, cap: GLenum): GLboolean {.stdcall.}
  glGetVariantBooleanvEXT*: proc (id: GLuint, value: GLenum, data: ptr GLboolean) {.stdcall.}
  glGetVariantIntegervEXT*: proc (id: GLuint, value: GLenum, data: ptr GLint) {.stdcall.}
  glGetVariantFloatvEXT*: proc (id: GLuint, value: GLenum, data: ptr GLfloat) {.stdcall.}
  glGetVariantPointervEXT*: proc (id: GLuint, value: GLenum, data: ptr pointer) {.stdcall.}
  glGetInvariantBooleanvEXT*: proc (id: GLuint, value: GLenum, data: ptr GLboolean) {.stdcall.}
  glGetInvariantIntegervEXT*: proc (id: GLuint, value: GLenum, data: ptr GLint) {.stdcall.}
  glGetInvariantFloatvEXT*: proc (id: GLuint, value: GLenum, data: ptr GLfloat) {.stdcall.}
  glGetLocalConstantBooleanvEXT*: proc (id: GLuint, value: GLenum, data: ptr GLboolean) {.stdcall.}
  glGetLocalConstantIntegervEXT*: proc (id: GLuint, value: GLenum, data: ptr GLint) {.stdcall.}
  glGetLocalConstantFloatvEXT*: proc (id: GLuint, value: GLenum, data: ptr GLfloat) {.stdcall.}
  glVertexWeightfEXT*: proc (weight: GLfloat) {.stdcall.}
  glVertexWeightfvEXT*: proc (weight: ptr GLfloat) {.stdcall.}
  glVertexWeightPointerEXT*: proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glAcquireKeyedMutexWin32EXT*: proc (memory: GLuint, key: GLuint64, timeout: GLuint): GLboolean {.stdcall.}
  glReleaseKeyedMutexWin32EXT*: proc (memory: GLuint, key: GLuint64): GLboolean {.stdcall.}
  glWindowRectanglesEXT*: proc (mode: GLenum, count: GLsizei, box: ptr GLint) {.stdcall.}
  glImportSyncEXT*: proc (external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield): GLsync {.stdcall.}
  glFrameTerminatorGREMEDY*: proc () {.stdcall.}
  glStringMarkerGREMEDY*: proc (len: GLsizei, string: pointer) {.stdcall.}
  glImageTransformParameteriHP*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glImageTransformParameterfHP*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glImageTransformParameterivHP*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glImageTransformParameterfvHP*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetImageTransformParameterivHP*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetImageTransformParameterfvHP*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glMultiModeDrawArraysIBM*: proc (mode: ptr GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei, modestride: GLint) {.stdcall.}
  glMultiModeDrawElementsIBM*: proc (mode: ptr GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei, modestride: GLint) {.stdcall.}
  glFlushStaticDataIBM*: proc (target: GLenum) {.stdcall.}
  glColorPointerListIBM*: proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glSecondaryColorPointerListIBM*: proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glEdgeFlagPointerListIBM*: proc (stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glFogCoordPointerListIBM*: proc (`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glIndexPointerListIBM*: proc (`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glNormalPointerListIBM*: proc (`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glTexCoordPointerListIBM*: proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glVertexPointerListIBM*: proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}
  glBlendFuncSeparateINGR*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}
  glApplyFramebufferAttachmentCMAAINTEL*: proc () {.stdcall.}
  glSyncTextureINTEL*: proc (texture: GLuint) {.stdcall.}
  glUnmapTexture2DINTEL*: proc (texture: GLuint, level: GLint) {.stdcall.}
  glMapTexture2DINTEL*: proc (texture: GLuint, level: GLint, access: GLbitfield, stride: ptr GLint, layout: ptr GLenum): pointer {.stdcall.}
  glVertexPointervINTEL*: proc (size: GLint, `type`: GLenum, pointer: ptr pointer) {.stdcall.}
  glNormalPointervINTEL*: proc (`type`: GLenum, pointer: ptr pointer) {.stdcall.}
  glColorPointervINTEL*: proc (size: GLint, `type`: GLenum, pointer: ptr pointer) {.stdcall.}
  glTexCoordPointervINTEL*: proc (size: GLint, `type`: GLenum, pointer: ptr pointer) {.stdcall.}
  glBeginPerfQueryINTEL*: proc (queryHandle: GLuint) {.stdcall.}
  glCreatePerfQueryINTEL*: proc (queryId: GLuint, queryHandle: ptr GLuint) {.stdcall.}
  glDeletePerfQueryINTEL*: proc (queryHandle: GLuint) {.stdcall.}
  glEndPerfQueryINTEL*: proc (queryHandle: GLuint) {.stdcall.}
  glGetFirstPerfQueryIdINTEL*: proc (queryId: ptr GLuint) {.stdcall.}
  glGetNextPerfQueryIdINTEL*: proc (queryId: GLuint, nextQueryId: ptr GLuint) {.stdcall.}
  glGetPerfCounterInfoINTEL*: proc (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: cstring, counterDescLength: GLuint, counterDesc: cstring, counterOffset: ptr GLuint, counterDataSize: ptr GLuint, counterTypeEnum: ptr GLuint, counterDataTypeEnum: ptr GLuint, rawCounterMaxValue: ptr GLuint64) {.stdcall.}
  glGetPerfQueryDataINTEL*: proc (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: pointer, bytesWritten: ptr GLuint) {.stdcall.}
  glGetPerfQueryIdByNameINTEL*: proc (queryName: cstring, queryId: ptr GLuint) {.stdcall.}
  glGetPerfQueryInfoINTEL*: proc (queryId: GLuint, queryNameLength: GLuint, queryName: cstring, dataSize: ptr GLuint, noCounters: ptr GLuint, noInstances: ptr GLuint, capsMask: ptr GLuint) {.stdcall.}
  glBlendBarrierKHR*: proc () {.stdcall.}
  glDebugMessageControlKHR*: proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}
  glDebugMessageInsertKHR*: proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.stdcall.}
  glDebugMessageCallbackKHR*: proc (callback: GLDEBUGPROCKHR, userParam: pointer) {.stdcall.}
  glGetDebugMessageLogKHR*: proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}
  glPushDebugGroupKHR*: proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.stdcall.}
  glPopDebugGroupKHR*: proc () {.stdcall.}
  glObjectLabelKHR*: proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.stdcall.}
  glGetObjectLabelKHR*: proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}
  glObjectPtrLabelKHR*: proc (`ptr`: pointer, length: GLsizei, label: cstring) {.stdcall.}
  glGetObjectPtrLabelKHR*: proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}
  glGetPointervKHR*: proc (pname: GLenum, params: ptr pointer) {.stdcall.}
  glMaxShaderCompilerThreadsKHR*: proc (count: GLuint) {.stdcall.}
  glGetGraphicsResetStatusKHR*: proc (): GLenum {.stdcall.}
  glReadnPixelsKHR*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.stdcall.}
  glGetnUniformfvKHR*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.stdcall.}
  glGetnUniformivKHR*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.stdcall.}
  glGetnUniformuivKHR*: proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.stdcall.}
  glFramebufferParameteriMESA*: proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glGetFramebufferParameterivMESA*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glResizeBuffersMESA*: proc () {.stdcall.}
  glWindowPos2dMESA*: proc (x: GLdouble, y: GLdouble) {.stdcall.}
  glWindowPos2dvMESA*: proc (v: ptr GLdouble) {.stdcall.}
  glWindowPos2fMESA*: proc (x: GLfloat, y: GLfloat) {.stdcall.}
  glWindowPos2fvMESA*: proc (v: ptr GLfloat) {.stdcall.}
  glWindowPos2iMESA*: proc (x: GLint, y: GLint) {.stdcall.}
  glWindowPos2ivMESA*: proc (v: ptr GLint) {.stdcall.}
  glWindowPos2sMESA*: proc (x: GLshort, y: GLshort) {.stdcall.}
  glWindowPos2svMESA*: proc (v: ptr GLshort) {.stdcall.}
  glWindowPos3dMESA*: proc (x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glWindowPos3dvMESA*: proc (v: ptr GLdouble) {.stdcall.}
  glWindowPos3fMESA*: proc (x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glWindowPos3fvMESA*: proc (v: ptr GLfloat) {.stdcall.}
  glWindowPos3iMESA*: proc (x: GLint, y: GLint, z: GLint) {.stdcall.}
  glWindowPos3ivMESA*: proc (v: ptr GLint) {.stdcall.}
  glWindowPos3sMESA*: proc (x: GLshort, y: GLshort, z: GLshort) {.stdcall.}
  glWindowPos3svMESA*: proc (v: ptr GLshort) {.stdcall.}
  glWindowPos4dMESA*: proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glWindowPos4dvMESA*: proc (v: ptr GLdouble) {.stdcall.}
  glWindowPos4fMESA*: proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glWindowPos4fvMESA*: proc (v: ptr GLfloat) {.stdcall.}
  glWindowPos4iMESA*: proc (x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glWindowPos4ivMESA*: proc (v: ptr GLint) {.stdcall.}
  glWindowPos4sMESA*: proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}
  glWindowPos4svMESA*: proc (v: ptr GLshort) {.stdcall.}
  glBeginConditionalRenderNVX*: proc (id: GLuint) {.stdcall.}
  glEndConditionalRenderNVX*: proc () {.stdcall.}
  glUploadGpuMaskNVX*: proc (mask: GLbitfield) {.stdcall.}
  glMulticastViewportArrayvNVX*: proc (gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glMulticastViewportPositionWScaleNVX*: proc (gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) {.stdcall.}
  glMulticastScissorArrayvNVX*: proc (gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}
  glAsyncCopyBufferSubDataNVX*: proc (waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}
  glAsyncCopyImageSubDataNVX*: proc (waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, waitValueArray: ptr GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}
  glLGPUNamedBufferSubDataNVX*: proc (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glLGPUCopyImageSubDataNVX*: proc (sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glLGPUInterlockNVX*: proc () {.stdcall.}
  glCreateProgressFenceNVX*: proc (): GLuint {.stdcall.}
  glSignalSemaphoreui64NVX*: proc (signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64) {.stdcall.}
  glWaitSemaphoreui64NVX*: proc (waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64) {.stdcall.}
  glClientWaitSemaphoreui64NVX*: proc (fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64) {.stdcall.}
  glAlphaToCoverageDitherControlNV*: proc (mode: GLenum) {.stdcall.}
  glMultiDrawArraysIndirectBindlessNV*: proc (mode: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}
  glMultiDrawElementsIndirectBindlessNV*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}
  glMultiDrawArraysIndirectBindlessCountNV*: proc (mode: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}
  glMultiDrawElementsIndirectBindlessCountNV*: proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}
  glGetTextureHandleNV*: proc (texture: GLuint): GLuint64 {.stdcall.}
  glGetTextureSamplerHandleNV*: proc (texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}
  glMakeTextureHandleResidentNV*: proc (handle: GLuint64) {.stdcall.}
  glMakeTextureHandleNonResidentNV*: proc (handle: GLuint64) {.stdcall.}
  glGetImageHandleNV*: proc (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}
  glMakeImageHandleResidentNV*: proc (handle: GLuint64, access: GLenum) {.stdcall.}
  glMakeImageHandleNonResidentNV*: proc (handle: GLuint64) {.stdcall.}
  glUniformHandleui64NV*: proc (location: GLint, value: GLuint64) {.stdcall.}
  glUniformHandleui64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}
  glProgramUniformHandleui64NV*: proc (program: GLuint, location: GLint, value: GLuint64) {.stdcall.}
  glProgramUniformHandleui64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64) {.stdcall.}
  glIsTextureHandleResidentNV*: proc (handle: GLuint64): GLboolean {.stdcall.}
  glIsImageHandleResidentNV*: proc (handle: GLuint64): GLboolean {.stdcall.}
  glBlendParameteriNV*: proc (pname: GLenum, value: GLint) {.stdcall.}
  glBlendBarrierNV*: proc () {.stdcall.}
  glViewportPositionWScaleNV*: proc (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) {.stdcall.}
  glCreateStatesNV*: proc (n: GLsizei, states: ptr GLuint) {.stdcall.}
  glDeleteStatesNV*: proc (n: GLsizei, states: ptr GLuint) {.stdcall.}
  glIsStateNV*: proc (state: GLuint): GLboolean {.stdcall.}
  glStateCaptureNV*: proc (state: GLuint, mode: GLenum) {.stdcall.}
  glGetCommandHeaderNV*: proc (tokenID: GLenum, size: GLuint): GLuint {.stdcall.}
  glGetStageIndexNV*: proc (shadertype: GLenum): GLushort {.stdcall.}
  glDrawCommandsNV*: proc (primitiveMode: GLenum, buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, count: GLuint) {.stdcall.}
  glDrawCommandsAddressNV*: proc (primitiveMode: GLenum, indirects: ptr GLuint64, sizes: ptr GLsizei, count: GLuint) {.stdcall.}
  glDrawCommandsStatesNV*: proc (buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint) {.stdcall.}
  glDrawCommandsStatesAddressNV*: proc (indirects: ptr GLuint64, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint) {.stdcall.}
  glCreateCommandListsNV*: proc (n: GLsizei, lists: ptr GLuint) {.stdcall.}
  glDeleteCommandListsNV*: proc (n: GLsizei, lists: ptr GLuint) {.stdcall.}
  glIsCommandListNV*: proc (list: GLuint): GLboolean {.stdcall.}
  glListDrawCommandsStatesClientNV*: proc (list: GLuint, segment: GLuint, indirects: ptr pointer, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint) {.stdcall.}
  glCommandListSegmentsNV*: proc (list: GLuint, segments: GLuint) {.stdcall.}
  glCompileCommandListNV*: proc (list: GLuint) {.stdcall.}
  glCallCommandListNV*: proc (list: GLuint) {.stdcall.}
  glBeginConditionalRenderNV*: proc (id: GLuint, mode: GLenum) {.stdcall.}
  glEndConditionalRenderNV*: proc () {.stdcall.}
  glSubpixelPrecisionBiasNV*: proc (xbits: GLuint, ybits: GLuint) {.stdcall.}
  glConservativeRasterParameterfNV*: proc (pname: GLenum, value: GLfloat) {.stdcall.}
  glConservativeRasterParameteriNV*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glCopyImageSubDataNV*: proc (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}
  glDepthRangedNV*: proc (zNear: GLdouble, zFar: GLdouble) {.stdcall.}
  glClearDepthdNV*: proc (depth: GLdouble) {.stdcall.}
  glDepthBoundsdNV*: proc (zmin: GLdouble, zmax: GLdouble) {.stdcall.}
  glDrawTextureNV*: proc (texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) {.stdcall.}
  glDrawVkImageNV*: proc (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) {.stdcall.}
  glGetVkProcAddrNV*: proc (name: cstring): GLVULKANPROCNV {.stdcall.}
  glWaitVkSemaphoreNV*: proc (vkSemaphore: GLuint64) {.stdcall.}
  glSignalVkSemaphoreNV*: proc (vkSemaphore: GLuint64) {.stdcall.}
  glSignalVkFenceNV*: proc (vkFence: GLuint64) {.stdcall.}
  glMapControlPointsNV*: proc (target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: pointer) {.stdcall.}
  glMapParameterivNV*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glMapParameterfvNV*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMapControlPointsNV*: proc (target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: pointer) {.stdcall.}
  glGetMapParameterivNV*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMapParameterfvNV*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetMapAttribParameterivNV*: proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetMapAttribParameterfvNV*: proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glEvalMapsNV*: proc (target: GLenum, mode: GLenum) {.stdcall.}
  glGetMultisamplefvNV*: proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}
  glSampleMaskIndexedNV*: proc (index: GLuint, mask: GLbitfield) {.stdcall.}
  glTexRenderbufferNV*: proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}
  glDeleteFencesNV*: proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}
  glGenFencesNV*: proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}
  glIsFenceNV*: proc (fence: GLuint): GLboolean {.stdcall.}
  glTestFenceNV*: proc (fence: GLuint): GLboolean {.stdcall.}
  glGetFenceivNV*: proc (fence: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glFinishFenceNV*: proc (fence: GLuint) {.stdcall.}
  glSetFenceNV*: proc (fence: GLuint, condition: GLenum) {.stdcall.}
  glFragmentCoverageColorNV*: proc (color: GLuint) {.stdcall.}
  glProgramNamedParameter4fNV*: proc (id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glProgramNamedParameter4fvNV*: proc (id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLfloat) {.stdcall.}
  glProgramNamedParameter4dNV*: proc (id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glProgramNamedParameter4dvNV*: proc (id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLdouble) {.stdcall.}
  glGetProgramNamedParameterfvNV*: proc (id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLfloat) {.stdcall.}
  glGetProgramNamedParameterdvNV*: proc (id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLdouble) {.stdcall.}
  glCoverageModulationTableNV*: proc (n: GLsizei, v: ptr GLfloat) {.stdcall.}
  glGetCoverageModulationTableNV*: proc (bufSize: GLsizei, v: ptr GLfloat) {.stdcall.}
  glCoverageModulationNV*: proc (components: GLenum) {.stdcall.}
  glRenderbufferStorageMultisampleCoverageNV*: proc (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}
  glProgramVertexLimitNV*: proc (target: GLenum, limit: GLint) {.stdcall.}
  glFramebufferTextureEXT*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}
  glFramebufferTextureFaceEXT*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) {.stdcall.}
  glRenderGpuMaskNV*: proc (mask: GLbitfield) {.stdcall.}
  glMulticastBufferSubDataNV*: proc (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}
  glMulticastCopyBufferSubDataNV*: proc (readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glMulticastCopyImageSubDataNV*: proc (srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) {.stdcall.}
  glMulticastBlitFramebufferNV*: proc (srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}
  glMulticastFramebufferSampleLocationsfvNV*: proc (gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glMulticastBarrierNV*: proc () {.stdcall.}
  glMulticastWaitSyncNV*: proc (signalGpu: GLuint, waitGpuMask: GLbitfield) {.stdcall.}
  glMulticastGetQueryObjectivNV*: proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glMulticastGetQueryObjectuivNV*: proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glMulticastGetQueryObjecti64vNV*: proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}
  glMulticastGetQueryObjectui64vNV*: proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}
  glProgramLocalParameterI4iNV*: proc (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glProgramLocalParameterI4ivNV*: proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}
  glProgramLocalParametersI4ivNV*: proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}
  glProgramLocalParameterI4uiNV*: proc (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}
  glProgramLocalParameterI4uivNV*: proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}
  glProgramLocalParametersI4uivNV*: proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}
  glProgramEnvParameterI4iNV*: proc (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}
  glProgramEnvParameterI4ivNV*: proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}
  glProgramEnvParametersI4ivNV*: proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}
  glProgramEnvParameterI4uiNV*: proc (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}
  glProgramEnvParameterI4uivNV*: proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}
  glProgramEnvParametersI4uivNV*: proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}
  glGetProgramLocalParameterIivNV*: proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}
  glGetProgramLocalParameterIuivNV*: proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}
  glGetProgramEnvParameterIivNV*: proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}
  glGetProgramEnvParameterIuivNV*: proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}
  glProgramSubroutineParametersuivNV*: proc (target: GLenum, count: GLsizei, params: ptr GLuint) {.stdcall.}
  glGetProgramSubroutineParameteruivNV*: proc (target: GLenum, index: GLuint, param: ptr GLuint) {.stdcall.}
  glVertex2hNV*: proc (x: GLhalfNV, y: GLhalfNV) {.stdcall.}
  glVertex2hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glVertex3hNV*: proc (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) {.stdcall.}
  glVertex3hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glVertex4hNV*: proc (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) {.stdcall.}
  glVertex4hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glNormal3hNV*: proc (nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) {.stdcall.}
  glNormal3hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glColor3hNV*: proc (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) {.stdcall.}
  glColor3hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glColor4hNV*: proc (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) {.stdcall.}
  glColor4hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glTexCoord1hNV*: proc (s: GLhalfNV) {.stdcall.}
  glTexCoord1hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glTexCoord2hNV*: proc (s: GLhalfNV, t: GLhalfNV) {.stdcall.}
  glTexCoord2hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glTexCoord3hNV*: proc (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) {.stdcall.}
  glTexCoord3hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glTexCoord4hNV*: proc (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) {.stdcall.}
  glTexCoord4hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glMultiTexCoord1hNV*: proc (target: GLenum, s: GLhalfNV) {.stdcall.}
  glMultiTexCoord1hvNV*: proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}
  glMultiTexCoord2hNV*: proc (target: GLenum, s: GLhalfNV, t: GLhalfNV) {.stdcall.}
  glMultiTexCoord2hvNV*: proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}
  glMultiTexCoord3hNV*: proc (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) {.stdcall.}
  glMultiTexCoord3hvNV*: proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}
  glMultiTexCoord4hNV*: proc (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) {.stdcall.}
  glMultiTexCoord4hvNV*: proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}
  glFogCoordhNV*: proc (fog: GLhalfNV) {.stdcall.}
  glFogCoordhvNV*: proc (fog: ptr GLhalfNV) {.stdcall.}
  glSecondaryColor3hNV*: proc (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) {.stdcall.}
  glSecondaryColor3hvNV*: proc (v: ptr GLhalfNV) {.stdcall.}
  glVertexWeighthNV*: proc (weight: GLhalfNV) {.stdcall.}
  glVertexWeighthvNV*: proc (weight: ptr GLhalfNV) {.stdcall.}
  glVertexAttrib1hNV*: proc (index: GLuint, x: GLhalfNV) {.stdcall.}
  glVertexAttrib1hvNV*: proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}
  glVertexAttrib2hNV*: proc (index: GLuint, x: GLhalfNV, y: GLhalfNV) {.stdcall.}
  glVertexAttrib2hvNV*: proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}
  glVertexAttrib3hNV*: proc (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) {.stdcall.}
  glVertexAttrib3hvNV*: proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}
  glVertexAttrib4hNV*: proc (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) {.stdcall.}
  glVertexAttrib4hvNV*: proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}
  glVertexAttribs1hvNV*: proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}
  glVertexAttribs2hvNV*: proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}
  glVertexAttribs3hvNV*: proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}
  glVertexAttribs4hvNV*: proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}
  glGetInternalformatSampleivNV*: proc (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: ptr GLint) {.stdcall.}
  glGetMemoryObjectDetachedResourcesuivNV*: proc (memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: ptr GLuint) {.stdcall.}
  glResetMemoryObjectParameterNV*: proc (memory: GLuint, pname: GLenum) {.stdcall.}
  glTexAttachMemoryNV*: proc (target: GLenum, memory: GLuint, offset: GLuint64) {.stdcall.}
  glBufferAttachMemoryNV*: proc (target: GLenum, memory: GLuint, offset: GLuint64) {.stdcall.}
  glTextureAttachMemoryNV*: proc (texture: GLuint, memory: GLuint, offset: GLuint64) {.stdcall.}
  glNamedBufferAttachMemoryNV*: proc (buffer: GLuint, memory: GLuint, offset: GLuint64) {.stdcall.}
  glBufferPageCommitmentMemNV*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) {.stdcall.}
  glTexPageCommitmentMemNV*: proc (target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) {.stdcall.}
  glNamedBufferPageCommitmentMemNV*: proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) {.stdcall.}
  glTexturePageCommitmentMemNV*: proc (texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) {.stdcall.}
  glDrawMeshTasksNV*: proc (first: GLuint, count: GLuint) {.stdcall.}
  glDrawMeshTasksIndirectNV*: proc (indirect: GLintptr) {.stdcall.}
  glMultiDrawMeshTasksIndirectNV*: proc (indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glMultiDrawMeshTasksIndirectCountNV*: proc (indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}
  glGenOcclusionQueriesNV*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glDeleteOcclusionQueriesNV*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsOcclusionQueryNV*: proc (id: GLuint): GLboolean {.stdcall.}
  glBeginOcclusionQueryNV*: proc (id: GLuint) {.stdcall.}
  glEndOcclusionQueryNV*: proc () {.stdcall.}
  glGetOcclusionQueryivNV*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetOcclusionQueryuivNV*: proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glProgramBufferParametersfvNV*: proc (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}
  glProgramBufferParametersIivNV*: proc (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}
  glProgramBufferParametersIuivNV*: proc (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}
  glGenPathsNV*: proc (range: GLsizei): GLuint {.stdcall.}
  glDeletePathsNV*: proc (path: GLuint, range: GLsizei) {.stdcall.}
  glIsPathNV*: proc (path: GLuint): GLboolean {.stdcall.}
  glPathCommandsNV*: proc (path: GLuint, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}
  glPathCoordsNV*: proc (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}
  glPathSubCommandsNV*: proc (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}
  glPathSubCoordsNV*: proc (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}
  glPathStringNV*: proc (path: GLuint, format: GLenum, length: GLsizei, pathString: pointer) {.stdcall.}
  glPathGlyphsNV*: proc (firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, numGlyphs: GLsizei, `type`: GLenum, charcodes: pointer, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) {.stdcall.}
  glPathGlyphRangeNV*: proc (firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) {.stdcall.}
  glWeightPathsNV*: proc (resultPath: GLuint, numPaths: GLsizei, paths: ptr GLuint, weights: ptr GLfloat) {.stdcall.}
  glCopyPathNV*: proc (resultPath: GLuint, srcPath: GLuint) {.stdcall.}
  glInterpolatePathsNV*: proc (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) {.stdcall.}
  glTransformPathNV*: proc (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}
  glPathParameterivNV*: proc (path: GLuint, pname: GLenum, value: ptr GLint) {.stdcall.}
  glPathParameteriNV*: proc (path: GLuint, pname: GLenum, value: GLint) {.stdcall.}
  glPathParameterfvNV*: proc (path: GLuint, pname: GLenum, value: ptr GLfloat) {.stdcall.}
  glPathParameterfNV*: proc (path: GLuint, pname: GLenum, value: GLfloat) {.stdcall.}
  glPathDashArrayNV*: proc (path: GLuint, dashCount: GLsizei, dashArray: ptr GLfloat) {.stdcall.}
  glPathStencilFuncNV*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}
  glPathStencilDepthOffsetNV*: proc (factor: GLfloat, units: GLfloat) {.stdcall.}
  glStencilFillPathNV*: proc (path: GLuint, fillMode: GLenum, mask: GLuint) {.stdcall.}
  glStencilStrokePathNV*: proc (path: GLuint, reference: GLint, mask: GLuint) {.stdcall.}
  glStencilFillPathInstancedNV*: proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}
  glStencilStrokePathInstancedNV*: proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}
  glPathCoverDepthFuncNV*: proc (`func`: GLenum) {.stdcall.}
  glCoverFillPathNV*: proc (path: GLuint, coverMode: GLenum) {.stdcall.}
  glCoverStrokePathNV*: proc (path: GLuint, coverMode: GLenum) {.stdcall.}
  glCoverFillPathInstancedNV*: proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}
  glCoverStrokePathInstancedNV*: proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}
  glGetPathParameterivNV*: proc (path: GLuint, pname: GLenum, value: ptr GLint) {.stdcall.}
  glGetPathParameterfvNV*: proc (path: GLuint, pname: GLenum, value: ptr GLfloat) {.stdcall.}
  glGetPathCommandsNV*: proc (path: GLuint, commands: ptr GLubyte) {.stdcall.}
  glGetPathCoordsNV*: proc (path: GLuint, coords: ptr GLfloat) {.stdcall.}
  glGetPathDashArrayNV*: proc (path: GLuint, dashArray: ptr GLfloat) {.stdcall.}
  glGetPathMetricsNV*: proc (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, stride: GLsizei, metrics: ptr GLfloat) {.stdcall.}
  glGetPathMetricRangeNV*: proc (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: ptr GLfloat) {.stdcall.}
  glGetPathSpacingNV*: proc (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: ptr GLfloat) {.stdcall.}
  glIsPointInFillPathNV*: proc (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}
  glIsPointInStrokePathNV*: proc (path: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}
  glGetPathLengthNV*: proc (path: GLuint, startSegment: GLsizei, numSegments: GLsizei): GLfloat {.stdcall.}
  glPointAlongPathNV*: proc (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: ptr GLfloat, y: ptr GLfloat, tangentX: ptr GLfloat, tangentY: ptr GLfloat): GLboolean {.stdcall.}
  glMatrixLoad3x2fNV*: proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixLoad3x3fNV*: proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixLoadTranspose3x3fNV*: proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixMult3x2fNV*: proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixMult3x3fNV*: proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}
  glMatrixMultTranspose3x3fNV*: proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}
  glStencilThenCoverFillPathNV*: proc (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) {.stdcall.}
  glStencilThenCoverStrokePathNV*: proc (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) {.stdcall.}
  glStencilThenCoverFillPathInstancedNV*: proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}
  glStencilThenCoverStrokePathInstancedNV*: proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}
  glPathGlyphIndexRangeNV*: proc (fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: ptr GLuint): GLenum {.stdcall.}
  glPathGlyphIndexArrayNV*: proc (firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}
  glPathMemoryGlyphIndexArrayNV*: proc (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: pointer, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}
  glProgramPathFragmentInputGenNV*: proc (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: ptr GLfloat) {.stdcall.}
  glGetProgramResourcefvNV*: proc (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLfloat) {.stdcall.}
  glPathColorGenNV*: proc (color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: ptr GLfloat) {.stdcall.}
  glPathTexGenNV*: proc (texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: ptr GLfloat) {.stdcall.}
  glPathFogGenNV*: proc (genMode: GLenum) {.stdcall.}
  glGetPathColorGenivNV*: proc (color: GLenum, pname: GLenum, value: ptr GLint) {.stdcall.}
  glGetPathColorGenfvNV*: proc (color: GLenum, pname: GLenum, value: ptr GLfloat) {.stdcall.}
  glGetPathTexGenivNV*: proc (texCoordSet: GLenum, pname: GLenum, value: ptr GLint) {.stdcall.}
  glGetPathTexGenfvNV*: proc (texCoordSet: GLenum, pname: GLenum, value: ptr GLfloat) {.stdcall.}
  glPixelDataRangeNV*: proc (target: GLenum, length: GLsizei, pointer: pointer) {.stdcall.}
  glFlushPixelDataRangeNV*: proc (target: GLenum) {.stdcall.}
  glPointParameteriNV*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glPointParameterivNV*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glPresentFrameKeyedNV*: proc (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) {.stdcall.}
  glPresentFrameDualFillNV*: proc (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) {.stdcall.}
  glGetVideoivNV*: proc (video_slot: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVideouivNV*: proc (video_slot: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}
  glGetVideoi64vNV*: proc (video_slot: GLuint, pname: GLenum, params: ptr GLint64EXT) {.stdcall.}
  glGetVideoui64vNV*: proc (video_slot: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}
  glPrimitiveRestartNV*: proc () {.stdcall.}
  glPrimitiveRestartIndexNV*: proc (index: GLuint) {.stdcall.}
  glQueryResourceNV*: proc (queryType: GLenum, tagId: GLint, count: GLuint, buffer: ptr GLint): GLint {.stdcall.}
  glGenQueryResourceTagNV*: proc (n: GLsizei, tagIds: ptr GLint) {.stdcall.}
  glDeleteQueryResourceTagNV*: proc (n: GLsizei, tagIds: ptr GLint) {.stdcall.}
  glQueryResourceTagNV*: proc (tagId: GLint, tagString: cstring) {.stdcall.}
  glCombinerParameterfvNV*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glCombinerParameterfNV*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glCombinerParameterivNV*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glCombinerParameteriNV*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glCombinerInputNV*: proc (stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) {.stdcall.}
  glCombinerOutputNV*: proc (stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) {.stdcall.}
  glFinalCombinerInputNV*: proc (variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) {.stdcall.}
  glGetCombinerInputParameterfvNV*: proc (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetCombinerInputParameterivNV*: proc (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetCombinerOutputParameterfvNV*: proc (stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetCombinerOutputParameterivNV*: proc (stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetFinalCombinerInputParameterfvNV*: proc (variable: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetFinalCombinerInputParameterivNV*: proc (variable: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCombinerStageParameterfvNV*: proc (stage: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetCombinerStageParameterfvNV*: proc (stage: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glFramebufferSampleLocationsfvNV*: proc (target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glNamedFramebufferSampleLocationsfvNV*: proc (framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glResolveDepthValuesNV*: proc () {.stdcall.}
  glScissorExclusiveNV*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}
  glScissorExclusiveArrayvNV*: proc (first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}
  glMakeBufferResidentNV*: proc (target: GLenum, access: GLenum) {.stdcall.}
  glMakeBufferNonResidentNV*: proc (target: GLenum) {.stdcall.}
  glIsBufferResidentNV*: proc (target: GLenum): GLboolean {.stdcall.}
  glMakeNamedBufferResidentNV*: proc (buffer: GLuint, access: GLenum) {.stdcall.}
  glMakeNamedBufferNonResidentNV*: proc (buffer: GLuint) {.stdcall.}
  glIsNamedBufferResidentNV*: proc (buffer: GLuint): GLboolean {.stdcall.}
  glGetBufferParameterui64vNV*: proc (target: GLenum, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}
  glGetNamedBufferParameterui64vNV*: proc (buffer: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}
  glGetIntegerui64vNV*: proc (value: GLenum, result: ptr GLuint64EXT) {.stdcall.}
  glUniformui64NV*: proc (location: GLint, value: GLuint64EXT) {.stdcall.}
  glUniformui64vNV*: proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glProgramUniformui64NV*: proc (program: GLuint, location: GLint, value: GLuint64EXT) {.stdcall.}
  glProgramUniformui64vNV*: proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}
  glBindShadingRateImageNV*: proc (texture: GLuint) {.stdcall.}
  glGetShadingRateImagePaletteNV*: proc (viewport: GLuint, entry: GLuint, rate: ptr GLenum) {.stdcall.}
  glGetShadingRateSampleLocationivNV*: proc (rate: GLenum, samples: GLuint, index: GLuint, location: ptr GLint) {.stdcall.}
  glShadingRateImageBarrierNV*: proc (synchronize: GLboolean) {.stdcall.}
  glShadingRateImagePaletteNV*: proc (viewport: GLuint, first: GLuint, count: GLsizei, rates: ptr GLenum) {.stdcall.}
  glShadingRateSampleOrderNV*: proc (order: GLenum) {.stdcall.}
  glShadingRateSampleOrderCustomNV*: proc (rate: GLenum, samples: GLuint, locations: ptr GLint) {.stdcall.}
  glTextureBarrierNV*: proc () {.stdcall.}
  glTexImage2DMultisampleCoverageNV*: proc (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}
  glTexImage3DMultisampleCoverageNV*: proc (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}
  glTextureImage2DMultisampleNV*: proc (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}
  glTextureImage3DMultisampleNV*: proc (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}
  glTextureImage2DMultisampleCoverageNV*: proc (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}
  glTextureImage3DMultisampleCoverageNV*: proc (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}
  glCreateSemaphoresNV*: proc (n: GLsizei, semaphores: ptr GLuint) {.stdcall.}
  glSemaphoreParameterivNV*: proc (semaphore: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetSemaphoreParameterivNV*: proc (semaphore: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glBeginTransformFeedbackNV*: proc (primitiveMode: GLenum) {.stdcall.}
  glEndTransformFeedbackNV*: proc () {.stdcall.}
  glTransformFeedbackAttribsNV*: proc (count: GLsizei, attribs: ptr GLint, bufferMode: GLenum) {.stdcall.}
  glBindBufferRangeNV*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}
  glBindBufferOffsetNV*: proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) {.stdcall.}
  glBindBufferBaseNV*: proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}
  glTransformFeedbackVaryingsNV*: proc (program: GLuint, count: GLsizei, locations: ptr GLint, bufferMode: GLenum) {.stdcall.}
  glActiveVaryingNV*: proc (program: GLuint, name: cstring) {.stdcall.}
  glGetVaryingLocationNV*: proc (program: GLuint, name: cstring): GLint {.stdcall.}
  glGetActiveVaryingNV*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}
  glGetTransformFeedbackVaryingNV*: proc (program: GLuint, index: GLuint, location: ptr GLint) {.stdcall.}
  glTransformFeedbackStreamAttribsNV*: proc (count: GLsizei, attribs: ptr GLint, nbuffers: GLsizei, bufstreams: ptr GLint, bufferMode: GLenum) {.stdcall.}
  glBindTransformFeedbackNV*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glDeleteTransformFeedbacksNV*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glGenTransformFeedbacksNV*: proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}
  glIsTransformFeedbackNV*: proc (id: GLuint): GLboolean {.stdcall.}
  glPauseTransformFeedbackNV*: proc () {.stdcall.}
  glResumeTransformFeedbackNV*: proc () {.stdcall.}
  glDrawTransformFeedbackNV*: proc (mode: GLenum, id: GLuint) {.stdcall.}
  glVDPAUInitNV*: proc (vdpDevice: pointer, getProcAddress: pointer) {.stdcall.}
  glVDPAUFiniNV*: proc () {.stdcall.}
  glVDPAURegisterVideoSurfaceNV*: proc (vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}
  glVDPAURegisterOutputSurfaceNV*: proc (vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}
  glVDPAUIsSurfaceNV*: proc (surface: GLvdpauSurfaceNV): GLboolean {.stdcall.}
  glVDPAUUnregisterSurfaceNV*: proc (surface: GLvdpauSurfaceNV) {.stdcall.}
  glVDPAUGetSurfaceivNV*: proc (surface: GLvdpauSurfaceNV, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}
  glVDPAUSurfaceAccessNV*: proc (surface: GLvdpauSurfaceNV, access: GLenum) {.stdcall.}
  glVDPAUMapSurfacesNV*: proc (numSurfaces: GLsizei, surfaces: ptr GLvdpauSurfaceNV) {.stdcall.}
  glVDPAUUnmapSurfacesNV*: proc (numSurface: GLsizei, surfaces: ptr GLvdpauSurfaceNV) {.stdcall.}
  glVDPAURegisterVideoSurfaceWithPictureStructureNV*: proc (vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint, isFrameStructure: GLboolean): GLvdpauSurfaceNV {.stdcall.}
  glFlushVertexArrayRangeNV*: proc () {.stdcall.}
  glVertexArrayRangeNV*: proc (length: GLsizei, pointer: pointer) {.stdcall.}
  glVertexAttribL1i64NV*: proc (index: GLuint, x: GLint64EXT) {.stdcall.}
  glVertexAttribL2i64NV*: proc (index: GLuint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}
  glVertexAttribL3i64NV*: proc (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}
  glVertexAttribL4i64NV*: proc (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}
  glVertexAttribL1i64vNV*: proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}
  glVertexAttribL2i64vNV*: proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}
  glVertexAttribL3i64vNV*: proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}
  glVertexAttribL4i64vNV*: proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}
  glVertexAttribL1ui64NV*: proc (index: GLuint, x: GLuint64EXT) {.stdcall.}
  glVertexAttribL2ui64NV*: proc (index: GLuint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}
  glVertexAttribL3ui64NV*: proc (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}
  glVertexAttribL4ui64NV*: proc (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}
  glVertexAttribL1ui64vNV*: proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}
  glVertexAttribL2ui64vNV*: proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}
  glVertexAttribL3ui64vNV*: proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}
  glVertexAttribL4ui64vNV*: proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}
  glGetVertexAttribLi64vNV*: proc (index: GLuint, pname: GLenum, params: ptr GLint64EXT) {.stdcall.}
  glGetVertexAttribLui64vNV*: proc (index: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}
  glVertexAttribLFormatNV*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}
  glBufferAddressRangeNV*: proc (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) {.stdcall.}
  glVertexFormatNV*: proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}
  glNormalFormatNV*: proc (`type`: GLenum, stride: GLsizei) {.stdcall.}
  glColorFormatNV*: proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}
  glIndexFormatNV*: proc (`type`: GLenum, stride: GLsizei) {.stdcall.}
  glTexCoordFormatNV*: proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}
  glEdgeFlagFormatNV*: proc (stride: GLsizei) {.stdcall.}
  glSecondaryColorFormatNV*: proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}
  glFogCoordFormatNV*: proc (`type`: GLenum, stride: GLsizei) {.stdcall.}
  glVertexAttribFormatNV*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei) {.stdcall.}
  glVertexAttribIFormatNV*: proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}
  glGetIntegerui64i_vNV*: proc (value: GLenum, index: GLuint, result: ptr GLuint64EXT) {.stdcall.}
  glAreProgramsResidentNV*: proc (n: GLsizei, programs: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}
  glBindProgramNV*: proc (target: GLenum, id: GLuint) {.stdcall.}
  glDeleteProgramsNV*: proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}
  glExecuteProgramNV*: proc (target: GLenum, id: GLuint, params: ptr GLfloat) {.stdcall.}
  glGenProgramsNV*: proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}
  glGetProgramParameterdvNV*: proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glGetProgramParameterfvNV*: proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetProgramivNV*: proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetProgramStringNV*: proc (id: GLuint, pname: GLenum, program: ptr GLubyte) {.stdcall.}
  glGetTrackMatrixivNV*: proc (target: GLenum, address: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribdvNV*: proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glGetVertexAttribfvNV*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVertexAttribivNV*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVertexAttribPointervNV*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}
  glIsProgramNV*: proc (id: GLuint): GLboolean {.stdcall.}
  glLoadProgramNV*: proc (target: GLenum, id: GLuint, len: GLsizei, program: ptr GLubyte) {.stdcall.}
  glProgramParameter4dNV*: proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glProgramParameter4dvNV*: proc (target: GLenum, index: GLuint, v: ptr GLdouble) {.stdcall.}
  glProgramParameter4fNV*: proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glProgramParameter4fvNV*: proc (target: GLenum, index: GLuint, v: ptr GLfloat) {.stdcall.}
  glProgramParameters4dvNV*: proc (target: GLenum, index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glProgramParameters4fvNV*: proc (target: GLenum, index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glRequestResidentProgramsNV*: proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}
  glTrackMatrixNV*: proc (target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) {.stdcall.}
  glVertexAttribPointerNV*: proc (index: GLuint, fsize: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}
  glVertexAttrib1dNV*: proc (index: GLuint, x: GLdouble) {.stdcall.}
  glVertexAttrib1dvNV*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib1fNV*: proc (index: GLuint, x: GLfloat) {.stdcall.}
  glVertexAttrib1fvNV*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib1sNV*: proc (index: GLuint, x: GLshort) {.stdcall.}
  glVertexAttrib1svNV*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib2dNV*: proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}
  glVertexAttrib2dvNV*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib2fNV*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}
  glVertexAttrib2fvNV*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib2sNV*: proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}
  glVertexAttrib2svNV*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib3dNV*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}
  glVertexAttrib3dvNV*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib3fNV*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glVertexAttrib3fvNV*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib3sNV*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}
  glVertexAttrib3svNV*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4dNV*: proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}
  glVertexAttrib4dvNV*: proc (index: GLuint, v: ptr GLdouble) {.stdcall.}
  glVertexAttrib4fNV*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glVertexAttrib4fvNV*: proc (index: GLuint, v: ptr GLfloat) {.stdcall.}
  glVertexAttrib4sNV*: proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}
  glVertexAttrib4svNV*: proc (index: GLuint, v: ptr GLshort) {.stdcall.}
  glVertexAttrib4ubNV*: proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}
  glVertexAttrib4ubvNV*: proc (index: GLuint, v: ptr GLubyte) {.stdcall.}
  glVertexAttribs1dvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glVertexAttribs1fvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glVertexAttribs1svNV*: proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}
  glVertexAttribs2dvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glVertexAttribs2fvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glVertexAttribs2svNV*: proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}
  glVertexAttribs3dvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glVertexAttribs3fvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glVertexAttribs3svNV*: proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}
  glVertexAttribs4dvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}
  glVertexAttribs4fvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}
  glVertexAttribs4svNV*: proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}
  glVertexAttribs4ubvNV*: proc (index: GLuint, count: GLsizei, v: ptr GLubyte) {.stdcall.}
  glBeginVideoCaptureNV*: proc (video_capture_slot: GLuint) {.stdcall.}
  glBindVideoCaptureStreamBufferNV*: proc (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) {.stdcall.}
  glBindVideoCaptureStreamTextureNV*: proc (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) {.stdcall.}
  glEndVideoCaptureNV*: proc (video_capture_slot: GLuint) {.stdcall.}
  glGetVideoCaptureivNV*: proc (video_capture_slot: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVideoCaptureStreamivNV*: proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetVideoCaptureStreamfvNV*: proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetVideoCaptureStreamdvNV*: proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glVideoCaptureNV*: proc (video_capture_slot: GLuint, sequence_num: ptr GLuint, capture_time: ptr GLuint64EXT): GLenum {.stdcall.}
  glVideoCaptureStreamParameterivNV*: proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glVideoCaptureStreamParameterfvNV*: proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glVideoCaptureStreamParameterdvNV*: proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}
  glViewportSwizzleNV*: proc (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) {.stdcall.}
  glMultiTexCoord1bOES*: proc (texture: GLenum, s: GLbyte) {.stdcall.}
  glMultiTexCoord1bvOES*: proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}
  glMultiTexCoord2bOES*: proc (texture: GLenum, s: GLbyte, t: GLbyte) {.stdcall.}
  glMultiTexCoord2bvOES*: proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}
  glMultiTexCoord3bOES*: proc (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) {.stdcall.}
  glMultiTexCoord3bvOES*: proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}
  glMultiTexCoord4bOES*: proc (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) {.stdcall.}
  glMultiTexCoord4bvOES*: proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}
  glTexCoord1bOES*: proc (s: GLbyte) {.stdcall.}
  glTexCoord1bvOES*: proc (coords: ptr GLbyte) {.stdcall.}
  glTexCoord2bOES*: proc (s: GLbyte, t: GLbyte) {.stdcall.}
  glTexCoord2bvOES*: proc (coords: ptr GLbyte) {.stdcall.}
  glTexCoord3bOES*: proc (s: GLbyte, t: GLbyte, r: GLbyte) {.stdcall.}
  glTexCoord3bvOES*: proc (coords: ptr GLbyte) {.stdcall.}
  glTexCoord4bOES*: proc (s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) {.stdcall.}
  glTexCoord4bvOES*: proc (coords: ptr GLbyte) {.stdcall.}
  glVertex2bOES*: proc (x: GLbyte, y: GLbyte) {.stdcall.}
  glVertex2bvOES*: proc (coords: ptr GLbyte) {.stdcall.}
  glVertex3bOES*: proc (x: GLbyte, y: GLbyte, z: GLbyte) {.stdcall.}
  glVertex3bvOES*: proc (coords: ptr GLbyte) {.stdcall.}
  glVertex4bOES*: proc (x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) {.stdcall.}
  glVertex4bvOES*: proc (coords: ptr GLbyte) {.stdcall.}
  glAlphaFuncxOES*: proc (`func`: GLenum, `ref`: GLfixed) {.stdcall.}
  glClearColorxOES*: proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}
  glClearDepthxOES*: proc (depth: GLfixed) {.stdcall.}
  glClipPlanexOES*: proc (plane: GLenum, equation: ptr GLfixed) {.stdcall.}
  glColor4xOES*: proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}
  glDepthRangexOES*: proc (n: GLfixed, f: GLfixed) {.stdcall.}
  glFogxOES*: proc (pname: GLenum, param: GLfixed) {.stdcall.}
  glFogxvOES*: proc (pname: GLenum, param: ptr GLfixed) {.stdcall.}
  glFrustumxOES*: proc (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) {.stdcall.}
  glGetClipPlanexOES*: proc (plane: GLenum, equation: ptr GLfixed) {.stdcall.}
  glGetFixedvOES*: proc (pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glGetTexEnvxvOES*: proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glGetTexParameterxvOES*: proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glLightModelxOES*: proc (pname: GLenum, param: GLfixed) {.stdcall.}
  glLightModelxvOES*: proc (pname: GLenum, param: ptr GLfixed) {.stdcall.}
  glLightxOES*: proc (light: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}
  glLightxvOES*: proc (light: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glLineWidthxOES*: proc (width: GLfixed) {.stdcall.}
  glLoadMatrixxOES*: proc (m: ptr GLfixed) {.stdcall.}
  glMaterialxOES*: proc (face: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}
  glMaterialxvOES*: proc (face: GLenum, pname: GLenum, param: ptr GLfixed) {.stdcall.}
  glMultMatrixxOES*: proc (m: ptr GLfixed) {.stdcall.}
  glMultiTexCoord4xOES*: proc (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) {.stdcall.}
  glNormal3xOES*: proc (nx: GLfixed, ny: GLfixed, nz: GLfixed) {.stdcall.}
  glOrthoxOES*: proc (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) {.stdcall.}
  glPointParameterxvOES*: proc (pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glPointSizexOES*: proc (size: GLfixed) {.stdcall.}
  glPolygonOffsetxOES*: proc (factor: GLfixed, units: GLfixed) {.stdcall.}
  glRotatexOES*: proc (angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}
  glScalexOES*: proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}
  glTexEnvxOES*: proc (target: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}
  glTexEnvxvOES*: proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glTexParameterxOES*: proc (target: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}
  glTexParameterxvOES*: proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glTranslatexOES*: proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}
  glGetLightxvOES*: proc (light: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glGetMaterialxvOES*: proc (face: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glPointParameterxOES*: proc (pname: GLenum, param: GLfixed) {.stdcall.}
  glSampleCoveragexOES*: proc (value: GLclampx, invert: GLboolean) {.stdcall.}
  glAccumxOES*: proc (op: GLenum, value: GLfixed) {.stdcall.}
  glBitmapxOES*: proc (width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: ptr GLubyte) {.stdcall.}
  glBlendColorxOES*: proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}
  glClearAccumxOES*: proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}
  glColor3xOES*: proc (red: GLfixed, green: GLfixed, blue: GLfixed) {.stdcall.}
  glColor3xvOES*: proc (components: ptr GLfixed) {.stdcall.}
  glColor4xvOES*: proc (components: ptr GLfixed) {.stdcall.}
  glConvolutionParameterxOES*: proc (target: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}
  glConvolutionParameterxvOES*: proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glEvalCoord1xOES*: proc (u: GLfixed) {.stdcall.}
  glEvalCoord1xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glEvalCoord2xOES*: proc (u: GLfixed, v: GLfixed) {.stdcall.}
  glEvalCoord2xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glFeedbackBufferxOES*: proc (n: GLsizei, `type`: GLenum, buffer: ptr GLfixed) {.stdcall.}
  glGetConvolutionParameterxvOES*: proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glGetHistogramParameterxvOES*: proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glGetLightxOES*: proc (light: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glGetMapxvOES*: proc (target: GLenum, query: GLenum, v: ptr GLfixed) {.stdcall.}
  glGetMaterialxOES*: proc (face: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}
  glGetPixelMapxv*: proc (map: GLenum, size: GLint, values: ptr GLfixed) {.stdcall.}
  glGetTexGenxvOES*: proc (coord: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glGetTexLevelParameterxvOES*: proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glIndexxOES*: proc (component: GLfixed) {.stdcall.}
  glIndexxvOES*: proc (component: ptr GLfixed) {.stdcall.}
  glLoadTransposeMatrixxOES*: proc (m: ptr GLfixed) {.stdcall.}
  glMap1xOES*: proc (target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) {.stdcall.}
  glMap2xOES*: proc (target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) {.stdcall.}
  glMapGrid1xOES*: proc (n: GLint, u1: GLfixed, u2: GLfixed) {.stdcall.}
  glMapGrid2xOES*: proc (n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) {.stdcall.}
  glMultTransposeMatrixxOES*: proc (m: ptr GLfixed) {.stdcall.}
  glMultiTexCoord1xOES*: proc (texture: GLenum, s: GLfixed) {.stdcall.}
  glMultiTexCoord1xvOES*: proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}
  glMultiTexCoord2xOES*: proc (texture: GLenum, s: GLfixed, t: GLfixed) {.stdcall.}
  glMultiTexCoord2xvOES*: proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}
  glMultiTexCoord3xOES*: proc (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) {.stdcall.}
  glMultiTexCoord3xvOES*: proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}
  glMultiTexCoord4xvOES*: proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}
  glNormal3xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glPassThroughxOES*: proc (token: GLfixed) {.stdcall.}
  glPixelMapx*: proc (map: GLenum, size: GLint, values: ptr GLfixed) {.stdcall.}
  glPixelStorex*: proc (pname: GLenum, param: GLfixed) {.stdcall.}
  glPixelTransferxOES*: proc (pname: GLenum, param: GLfixed) {.stdcall.}
  glPixelZoomxOES*: proc (xfactor: GLfixed, yfactor: GLfixed) {.stdcall.}
  glPrioritizeTexturesxOES*: proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLfixed) {.stdcall.}
  glRasterPos2xOES*: proc (x: GLfixed, y: GLfixed) {.stdcall.}
  glRasterPos2xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glRasterPos3xOES*: proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}
  glRasterPos3xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glRasterPos4xOES*: proc (x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) {.stdcall.}
  glRasterPos4xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glRectxOES*: proc (x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) {.stdcall.}
  glRectxvOES*: proc (v1: ptr GLfixed, v2: ptr GLfixed) {.stdcall.}
  glTexCoord1xOES*: proc (s: GLfixed) {.stdcall.}
  glTexCoord1xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glTexCoord2xOES*: proc (s: GLfixed, t: GLfixed) {.stdcall.}
  glTexCoord2xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glTexCoord3xOES*: proc (s: GLfixed, t: GLfixed, r: GLfixed) {.stdcall.}
  glTexCoord3xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glTexCoord4xOES*: proc (s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) {.stdcall.}
  glTexCoord4xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glTexGenxOES*: proc (coord: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}
  glTexGenxvOES*: proc (coord: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}
  glVertex2xOES*: proc (x: GLfixed) {.stdcall.}
  glVertex2xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glVertex3xOES*: proc (x: GLfixed, y: GLfixed) {.stdcall.}
  glVertex3xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glVertex4xOES*: proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}
  glVertex4xvOES*: proc (coords: ptr GLfixed) {.stdcall.}
  glQueryMatrixxOES*: proc (mantissa: ptr GLfixed, exponent: ptr GLint): GLbitfield {.stdcall.}
  glClearDepthfOES*: proc (depth: GLclampf) {.stdcall.}
  glClipPlanefOES*: proc (plane: GLenum, equation: ptr GLfloat) {.stdcall.}
  glDepthRangefOES*: proc (n: GLclampf, f: GLclampf) {.stdcall.}
  glFrustumfOES*: proc (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) {.stdcall.}
  glGetClipPlanefOES*: proc (plane: GLenum, equation: ptr GLfloat) {.stdcall.}
  glOrthofOES*: proc (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) {.stdcall.}
  glFramebufferTextureMultiviewOVR*: proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) {.stdcall.}
  glHintPGI*: proc (target: GLenum, mode: GLint) {.stdcall.}
  glDetailTexFuncSGIS*: proc (target: GLenum, n: GLsizei, points: ptr GLfloat) {.stdcall.}
  glGetDetailTexFuncSGIS*: proc (target: GLenum, points: ptr GLfloat) {.stdcall.}
  glFogFuncSGIS*: proc (n: GLsizei, points: ptr GLfloat) {.stdcall.}
  glGetFogFuncSGIS*: proc (points: ptr GLfloat) {.stdcall.}
  glSampleMaskSGIS*: proc (value: GLclampf, invert: GLboolean) {.stdcall.}
  glSamplePatternSGIS*: proc (pattern: GLenum) {.stdcall.}
  glPixelTexGenParameteriSGIS*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glPixelTexGenParameterivSGIS*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glPixelTexGenParameterfSGIS*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPixelTexGenParameterfvSGIS*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetPixelTexGenParameterivSGIS*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetPixelTexGenParameterfvSGIS*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glPointParameterfSGIS*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glPointParameterfvSGIS*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glSharpenTexFuncSGIS*: proc (target: GLenum, n: GLsizei, points: ptr GLfloat) {.stdcall.}
  glGetSharpenTexFuncSGIS*: proc (target: GLenum, points: ptr GLfloat) {.stdcall.}
  glTexImage4DSGIS*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTexSubImage4DSGIS*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}
  glTextureColorMaskSGIS*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}
  glGetTexFilterFuncSGIS*: proc (target: GLenum, filter: GLenum, weights: ptr GLfloat) {.stdcall.}
  glTexFilterFuncSGIS*: proc (target: GLenum, filter: GLenum, n: GLsizei, weights: ptr GLfloat) {.stdcall.}
  glAsyncMarkerSGIX*: proc (marker: GLuint) {.stdcall.}
  glFinishAsyncSGIX*: proc (markerp: ptr GLuint): GLint {.stdcall.}
  glPollAsyncSGIX*: proc (markerp: ptr GLuint): GLint {.stdcall.}
  glGenAsyncMarkersSGIX*: proc (range: GLsizei): GLuint {.stdcall.}
  glDeleteAsyncMarkersSGIX*: proc (marker: GLuint, range: GLsizei) {.stdcall.}
  glIsAsyncMarkerSGIX*: proc (marker: GLuint): GLboolean {.stdcall.}
  glFlushRasterSGIX*: proc () {.stdcall.}
  glFragmentColorMaterialSGIX*: proc (face: GLenum, mode: GLenum) {.stdcall.}
  glFragmentLightfSGIX*: proc (light: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glFragmentLightfvSGIX*: proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glFragmentLightiSGIX*: proc (light: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glFragmentLightivSGIX*: proc (light: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glFragmentLightModelfSGIX*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glFragmentLightModelfvSGIX*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glFragmentLightModeliSGIX*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glFragmentLightModelivSGIX*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glFragmentMaterialfSGIX*: proc (face: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}
  glFragmentMaterialfvSGIX*: proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glFragmentMaterialiSGIX*: proc (face: GLenum, pname: GLenum, param: GLint) {.stdcall.}
  glFragmentMaterialivSGIX*: proc (face: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetFragmentLightfvSGIX*: proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetFragmentLightivSGIX*: proc (light: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glGetFragmentMaterialfvSGIX*: proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetFragmentMaterialivSGIX*: proc (face: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glLightEnviSGIX*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glFrameZoomSGIX*: proc (factor: GLint) {.stdcall.}
  glIglooInterfaceSGIX*: proc (pname: GLenum, params: pointer) {.stdcall.}
  glGetInstrumentsSGIX*: proc (): GLint {.stdcall.}
  glInstrumentsBufferSGIX*: proc (size: GLsizei, buffer: ptr GLint) {.stdcall.}
  glPollInstrumentsSGIX*: proc (marker_p: ptr GLint): GLint {.stdcall.}
  glReadInstrumentsSGIX*: proc (marker: GLint) {.stdcall.}
  glStartInstrumentsSGIX*: proc () {.stdcall.}
  glStopInstrumentsSGIX*: proc (marker: GLint) {.stdcall.}
  glGetListParameterfvSGIX*: proc (list: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetListParameterivSGIX*: proc (list: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glListParameterfSGIX*: proc (list: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}
  glListParameterfvSGIX*: proc (list: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glListParameteriSGIX*: proc (list: GLuint, pname: GLenum, param: GLint) {.stdcall.}
  glListParameterivSGIX*: proc (list: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}
  glPixelTexGenSGIX*: proc (mode: GLenum) {.stdcall.}
  glDeformationMap3dSGIX*: proc (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: ptr GLdouble) {.stdcall.}
  glDeformationMap3fSGIX*: proc (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: ptr GLfloat) {.stdcall.}
  glDeformSGIX*: proc (mask: GLbitfield) {.stdcall.}
  glLoadIdentityDeformationMapSGIX*: proc (mask: GLbitfield) {.stdcall.}
  glReferencePlaneSGIX*: proc (equation: ptr GLdouble) {.stdcall.}
  glSpriteParameterfSGIX*: proc (pname: GLenum, param: GLfloat) {.stdcall.}
  glSpriteParameterfvSGIX*: proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glSpriteParameteriSGIX*: proc (pname: GLenum, param: GLint) {.stdcall.}
  glSpriteParameterivSGIX*: proc (pname: GLenum, params: ptr GLint) {.stdcall.}
  glTagSampleBufferSGIX*: proc () {.stdcall.}
  glColorTableSGI*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}
  glColorTableParameterfvSGI*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glColorTableParameterivSGI*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glCopyColorTableSGI*: proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}
  glGetColorTableSGI*: proc (target: GLenum, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}
  glGetColorTableParameterfvSGI*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}
  glGetColorTableParameterivSGI*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}
  glFinishTextureSUNX*: proc () {.stdcall.}
  glGlobalAlphaFactorbSUN*: proc (factor: GLbyte) {.stdcall.}
  glGlobalAlphaFactorsSUN*: proc (factor: GLshort) {.stdcall.}
  glGlobalAlphaFactoriSUN*: proc (factor: GLint) {.stdcall.}
  glGlobalAlphaFactorfSUN*: proc (factor: GLfloat) {.stdcall.}
  glGlobalAlphaFactordSUN*: proc (factor: GLdouble) {.stdcall.}
  glGlobalAlphaFactorubSUN*: proc (factor: GLubyte) {.stdcall.}
  glGlobalAlphaFactorusSUN*: proc (factor: GLushort) {.stdcall.}
  glGlobalAlphaFactoruiSUN*: proc (factor: GLuint) {.stdcall.}
  glDrawMeshArraysSUN*: proc (mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) {.stdcall.}
  glReplacementCodeuiSUN*: proc (code: GLuint) {.stdcall.}
  glReplacementCodeusSUN*: proc (code: GLushort) {.stdcall.}
  glReplacementCodeubSUN*: proc (code: GLubyte) {.stdcall.}
  glReplacementCodeuivSUN*: proc (code: ptr GLuint) {.stdcall.}
  glReplacementCodeusvSUN*: proc (code: ptr GLushort) {.stdcall.}
  glReplacementCodeubvSUN*: proc (code: ptr GLubyte) {.stdcall.}
  glReplacementCodePointerSUN*: proc (`type`: GLenum, stride: GLsizei, pointer: ptr pointer) {.stdcall.}
  glColor4ubVertex2fSUN*: proc (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) {.stdcall.}
  glColor4ubVertex2fvSUN*: proc (c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}
  glColor4ubVertex3fSUN*: proc (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glColor4ubVertex3fvSUN*: proc (c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}
  glColor3fVertex3fSUN*: proc (r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glColor3fVertex3fvSUN*: proc (c: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glNormal3fVertex3fSUN*: proc (nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glNormal3fVertex3fvSUN*: proc (n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glColor4fNormal3fVertex3fSUN*: proc (r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glColor4fNormal3fVertex3fvSUN*: proc (c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glTexCoord2fVertex3fSUN*: proc (s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glTexCoord2fVertex3fvSUN*: proc (tc: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glTexCoord4fVertex4fSUN*: proc (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glTexCoord4fVertex4fvSUN*: proc (tc: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glTexCoord2fColor4ubVertex3fSUN*: proc (s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glTexCoord2fColor4ubVertex3fvSUN*: proc (tc: ptr GLfloat, c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}
  glTexCoord2fColor3fVertex3fSUN*: proc (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glTexCoord2fColor3fVertex3fvSUN*: proc (tc: ptr GLfloat, c: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glTexCoord2fNormal3fVertex3fSUN*: proc (s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glTexCoord2fNormal3fVertex3fvSUN*: proc (tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glTexCoord2fColor4fNormal3fVertex3fSUN*: proc (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glTexCoord2fColor4fNormal3fVertex3fvSUN*: proc (tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glTexCoord4fColor4fNormal3fVertex4fSUN*: proc (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}
  glTexCoord4fColor4fNormal3fVertex4fvSUN*: proc (tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiVertex3fSUN*: proc (rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiVertex3fvSUN*: proc (rc: ptr GLuint, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiColor4ubVertex3fSUN*: proc (rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiColor4ubVertex3fvSUN*: proc (rc: ptr GLuint, c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiColor3fVertex3fSUN*: proc (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiColor3fVertex3fvSUN*: proc (rc: ptr GLuint, c: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiNormal3fVertex3fSUN*: proc (rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiNormal3fVertex3fvSUN*: proc (rc: ptr GLuint, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiColor4fNormal3fVertex3fSUN*: proc (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN*: proc (rc: ptr GLuint, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiTexCoord2fVertex3fSUN*: proc (rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiTexCoord2fVertex3fvSUN*: proc (rc: ptr GLuint, tc: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN*: proc (rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN*: proc (rc: ptr GLuint, tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN*: proc (rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN*: proc (rc: ptr GLuint, tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}


proc hasExt(extname: string): bool =
  if extname.len == 0:
    return false

  if glVersionMajor < 3:
    var extensions = $cast[cstring](glGetString(GL_EXTENSIONS))
    if extensions.len == 0:
      return false

    var
      loc, terminatorLoc: int
      terminator: char

    while true:
      loc = extensions.find(extname)
      if loc < 0:
        return false

      terminatorLoc = loc + extname.len
      terminator = extensions[terminatorLoc]

      if (loc == 0 or extensions[loc - 1] == ' ') and
         (terminator == ' ' or terminator == '\0'):
        return true

      extensions = extensions[terminatorLoc..^1]

  else:
    var
      num: GLint
      s: cstring

    glGetIntegerv(GL_NUM_EXTENSIONS, num.addr)

    for i in 0..num-1:
      s = cast[cstring](glGetStringi(GL_EXTENSIONS, GLuint(i)))
      if s == extname:
        return true


proc load_GL_VERSION_1_0(load: proc) =
  if not GLAD_GL_VERSION_1_0: return

  glCullFace = cast[proc (mode: GLenum) {.stdcall.}](load("glCullFace"))
  glFrontFace = cast[proc (mode: GLenum) {.stdcall.}](load("glFrontFace"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.stdcall.}](load("glHint"))
  glLineWidth = cast[proc (width: GLfloat) {.stdcall.}](load("glLineWidth"))
  glPointSize = cast[proc (size: GLfloat) {.stdcall.}](load("glPointSize"))
  glPolygonMode = cast[proc (face: GLenum, mode: GLenum) {.stdcall.}](load("glPolygonMode"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glScissor"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glTexParameterf"))
  glTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glTexParameteri"))
  glTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTexParameteriv"))
  glTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage1D"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage2D"))
  glDrawBuffer = cast[proc (buf: GLenum) {.stdcall.}](load("glDrawBuffer"))
  glClear = cast[proc (mask: GLbitfield) {.stdcall.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glClearColor"))
  glClearStencil = cast[proc (s: GLint) {.stdcall.}](load("glClearStencil"))
  glClearDepth = cast[proc (depth: GLdouble) {.stdcall.}](load("glClearDepth"))
  glStencilMask = cast[proc (mask: GLuint) {.stdcall.}](load("glStencilMask"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}](load("glColorMask"))
  glDepthMask = cast[proc (flag: GLboolean) {.stdcall.}](load("glDepthMask"))
  glDisable = cast[proc (cap: GLenum) {.stdcall.}](load("glDisable"))
  glEnable = cast[proc (cap: GLenum) {.stdcall.}](load("glEnable"))
  glFinish = cast[proc () {.stdcall.}](load("glFinish"))
  glFlush = cast[proc () {.stdcall.}](load("glFlush"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.stdcall.}](load("glBlendFunc"))
  glLogicOp = cast[proc (opcode: GLenum) {.stdcall.}](load("glLogicOp"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glStencilFunc"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.stdcall.}](load("glStencilOp"))
  glDepthFunc = cast[proc (`func`: GLenum) {.stdcall.}](load("glDepthFunc"))
  glPixelStoref = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPixelStoref"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPixelStorei"))
  glReadBuffer = cast[proc (src: GLenum) {.stdcall.}](load("glReadBuffer"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glReadPixels"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.stdcall.}](load("glGetBooleanv"))
  glGetDoublev = cast[proc (pname: GLenum, data: ptr GLdouble) {.stdcall.}](load("glGetDoublev"))
  glGetError = cast[proc (): GLenum {.stdcall.}](load("glGetError"))
  glGetFloatv = cast[proc (pname: GLenum, data: ptr GLfloat) {.stdcall.}](load("glGetFloatv"))
  glGetIntegerv = cast[proc (pname: GLenum, data: ptr GLint) {.stdcall.}](load("glGetIntegerv"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.stdcall.}](load("glGetString"))
  glGetTexImage = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glGetTexImage"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexParameteriv"))
  glGetTexLevelParameterfv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTexLevelParameterfv"))
  glGetTexLevelParameteriv = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexLevelParameteriv"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.stdcall.}](load("glIsEnabled"))
  glDepthRange = cast[proc (n: GLdouble, f: GLdouble) {.stdcall.}](load("glDepthRange"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glViewport"))


proc load_GL_VERSION_1_1(load: proc) =
  if not GLAD_GL_VERSION_1_1: return

  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}](load("glDrawElements"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.stdcall.}](load("glPolygonOffset"))
  glCopyTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}](load("glCopyTexImage1D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}](load("glCopyTexImage2D"))
  glCopyTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyTexSubImage1D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage2D"))
  glTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage1D"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage2D"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.stdcall.}](load("glBindTexture"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glDeleteTextures"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glGenTextures"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.stdcall.}](load("glIsTexture"))


proc load_GL_VERSION_1_2(load: proc) =
  if not GLAD_GL_VERSION_1_2: return

  glDrawRangeElements = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}](load("glDrawRangeElements"))
  glTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage3D"))
  glTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage3D"))
  glCopyTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage3D"))


proc load_GL_VERSION_1_3(load: proc) =
  if not GLAD_GL_VERSION_1_3: return

  glActiveTexture = cast[proc (texture: GLenum) {.stdcall.}](load("glActiveTexture"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.stdcall.}](load("glSampleCoverage"))
  glCompressedTexImage3D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage3D"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage2D"))
  glCompressedTexImage1D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage1D"))
  glCompressedTexSubImage3D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage3D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage2D"))
  glCompressedTexSubImage1D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage1D"))
  glGetCompressedTexImage = cast[proc (target: GLenum, level: GLint, img: pointer) {.stdcall.}](load("glGetCompressedTexImage"))


proc load_GL_VERSION_1_4(load: proc) =
  if not GLAD_GL_VERSION_1_4: return

  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparate"))
  glMultiDrawArrays = cast[proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, drawcount: GLsizei) {.stdcall.}](load("glMultiDrawArrays"))
  glMultiDrawElements = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei) {.stdcall.}](load("glMultiDrawElements"))
  glPointParameterf = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPointParameterf"))
  glPointParameterfv = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glPointParameterfv"))
  glPointParameteri = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPointParameteri"))
  glPointParameteriv = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glPointParameteriv"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.stdcall.}](load("glBlendEquation"))


proc load_GL_VERSION_1_5(load: proc) =
  if not GLAD_GL_VERSION_1_5: return

  glGenQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenQueries"))
  glDeleteQueries = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteQueries"))
  glIsQuery = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsQuery"))
  glBeginQuery = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBeginQuery"))
  glEndQuery = cast[proc (target: GLenum) {.stdcall.}](load("glEndQuery"))
  glGetQueryiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryiv"))
  glGetQueryObjectiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryObjectiv"))
  glGetQueryObjectuiv = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetQueryObjectuiv"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.stdcall.}](load("glBindBuffer"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glDeleteBuffers"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glGenBuffers"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glIsBuffer"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glBufferSubData"))
  glGetBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glGetBufferSubData"))
  glMapBuffer = cast[proc (target: GLenum, access: GLenum): pointer {.stdcall.}](load("glMapBuffer"))
  glUnmapBuffer = cast[proc (target: GLenum): GLboolean {.stdcall.}](load("glUnmapBuffer"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetBufferParameteriv"))
  glGetBufferPointerv = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetBufferPointerv"))


proc load_GL_VERSION_2_0(load: proc) =
  if not GLAD_GL_VERSION_2_0: return

  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparate"))
  glDrawBuffers = cast[proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glDrawBuffers"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}](load("glStencilOpSeparate"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glStencilFuncSeparate"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.stdcall.}](load("glStencilMaskSeparate"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.stdcall.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.stdcall.}](load("glBindAttribLocation"))
  glCompileShader = cast[proc (shader: GLuint) {.stdcall.}](load("glCompileShader"))
  glCreateProgram = cast[proc (): GLuint {.stdcall.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.stdcall.}](load("glCreateShader"))
  glDeleteProgram = cast[proc (program: GLuint) {.stdcall.}](load("glDeleteProgram"))
  glDeleteShader = cast[proc (shader: GLuint) {.stdcall.}](load("glDeleteShader"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.stdcall.}](load("glDetachShader"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.stdcall.}](load("glDisableVertexAttribArray"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.stdcall.}](load("glEnableVertexAttribArray"))
  glGetActiveAttrib = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.stdcall.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetAttribLocation"))
  glGetProgramiv = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetProgramInfoLog"))
  glGetShaderiv = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetShaderInfoLog"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.stdcall.}](load("glGetShaderSource"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetUniformLocation"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.stdcall.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.stdcall.}](load("glGetUniformiv"))
  glGetVertexAttribdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribdv"))
  glGetVertexAttribfv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}](load("glGetVertexAttribPointerv"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.stdcall.}](load("glIsProgram"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.stdcall.}](load("glIsShader"))
  glLinkProgram = cast[proc (program: GLuint) {.stdcall.}](load("glLinkProgram"))
  glShaderSource = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.stdcall.}](load("glShaderSource"))
  glUseProgram = cast[proc (program: GLuint) {.stdcall.}](load("glUseProgram"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.stdcall.}](load("glUniform1f"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glUniform2f"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glUniform3f"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glUniform4f"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.stdcall.}](load("glUniform1i"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glUniform2i"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glUniform3i"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glUniform4i"))
  glUniform1fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform1fv"))
  glUniform2fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform2fv"))
  glUniform3fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform3fv"))
  glUniform4fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform4fv"))
  glUniform1iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform1iv"))
  glUniform2iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform2iv"))
  glUniform3iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform3iv"))
  glUniform4iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform4iv"))
  glUniformMatrix2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4fv"))
  glValidateProgram = cast[proc (program: GLuint) {.stdcall.}](load("glValidateProgram"))
  glVertexAttrib1d = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttrib1d"))
  glVertexAttrib1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib1dv"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.stdcall.}](load("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib1fv"))
  glVertexAttrib1s = cast[proc (index: GLuint, x: GLshort) {.stdcall.}](load("glVertexAttrib1s"))
  glVertexAttrib1sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib1sv"))
  glVertexAttrib2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttrib2d"))
  glVertexAttrib2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib2dv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}](load("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib2fv"))
  glVertexAttrib2s = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}](load("glVertexAttrib2s"))
  glVertexAttrib2sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib2sv"))
  glVertexAttrib3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttrib3d"))
  glVertexAttrib3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib3dv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib3fv"))
  glVertexAttrib3s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glVertexAttrib3s"))
  glVertexAttrib3sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib3sv"))
  glVertexAttrib4Nbv = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4Nbv"))
  glVertexAttrib4Niv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4Niv"))
  glVertexAttrib4Nsv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4Nsv"))
  glVertexAttrib4Nub = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}](load("glVertexAttrib4Nub"))
  glVertexAttrib4Nubv = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4Nubv"))
  glVertexAttrib4Nuiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4Nuiv"))
  glVertexAttrib4Nusv = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4Nusv"))
  glVertexAttrib4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4bv"))
  glVertexAttrib4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttrib4d"))
  glVertexAttrib4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib4dv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib4fv"))
  glVertexAttrib4iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4iv"))
  glVertexAttrib4s = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}](load("glVertexAttrib4s"))
  glVertexAttrib4sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4sv"))
  glVertexAttrib4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4ubv"))
  glVertexAttrib4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4uiv"))
  glVertexAttrib4usv = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4usv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribPointer"))


proc load_GL_VERSION_2_1(load: proc) =
  if not GLAD_GL_VERSION_2_1: return

  glUniformMatrix2x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2x3fv"))
  glUniformMatrix3x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3x2fv"))
  glUniformMatrix2x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2x4fv"))
  glUniformMatrix4x2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4x2fv"))
  glUniformMatrix3x4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3x4fv"))
  glUniformMatrix4x3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4x3fv"))


proc load_GL_VERSION_3_0(load: proc) =
  if not GLAD_GL_VERSION_3_0: return

  glColorMaski = cast[proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.stdcall.}](load("glColorMaski"))
  glGetBooleani_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.stdcall.}](load("glGetBooleani_v"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegeri_v"))
  glEnablei = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glEnablei"))
  glDisablei = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glDisablei"))
  glIsEnabledi = cast[proc (target: GLenum, index: GLuint): GLboolean {.stdcall.}](load("glIsEnabledi"))
  glBeginTransformFeedback = cast[proc (primitiveMode: GLenum) {.stdcall.}](load("glBeginTransformFeedback"))
  glEndTransformFeedback = cast[proc () {.stdcall.}](load("glEndTransformFeedback"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBase"))
  glTransformFeedbackVaryings = cast[proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}](load("glTransformFeedbackVaryings"))
  glGetTransformFeedbackVarying = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetTransformFeedbackVarying"))
  glClampColor = cast[proc (target: GLenum, clamp: GLenum) {.stdcall.}](load("glClampColor"))
  glBeginConditionalRender = cast[proc (id: GLuint, mode: GLenum) {.stdcall.}](load("glBeginConditionalRender"))
  glEndConditionalRender = cast[proc () {.stdcall.}](load("glEndConditionalRender"))
  glVertexAttribIPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribIPointer"))
  glGetVertexAttribIiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribIiv"))
  glGetVertexAttribIuiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetVertexAttribIuiv"))
  glVertexAttribI1i = cast[proc (index: GLuint, x: GLint) {.stdcall.}](load("glVertexAttribI1i"))
  glVertexAttribI2i = cast[proc (index: GLuint, x: GLint, y: GLint) {.stdcall.}](load("glVertexAttribI2i"))
  glVertexAttribI3i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.stdcall.}](load("glVertexAttribI3i"))
  glVertexAttribI4i = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glVertexAttribI4i"))
  glVertexAttribI1ui = cast[proc (index: GLuint, x: GLuint) {.stdcall.}](load("glVertexAttribI1ui"))
  glVertexAttribI2ui = cast[proc (index: GLuint, x: GLuint, y: GLuint) {.stdcall.}](load("glVertexAttribI2ui"))
  glVertexAttribI3ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.stdcall.}](load("glVertexAttribI3ui"))
  glVertexAttribI4ui = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glVertexAttribI4ui"))
  glVertexAttribI1iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI1iv"))
  glVertexAttribI2iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI2iv"))
  glVertexAttribI3iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI3iv"))
  glVertexAttribI4iv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI4iv"))
  glVertexAttribI1uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI1uiv"))
  glVertexAttribI2uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI2uiv"))
  glVertexAttribI3uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI3uiv"))
  glVertexAttribI4uiv = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI4uiv"))
  glVertexAttribI4bv = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttribI4bv"))
  glVertexAttribI4sv = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttribI4sv"))
  glVertexAttribI4ubv = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttribI4ubv"))
  glVertexAttribI4usv = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttribI4usv"))
  glGetUniformuiv = cast[proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}](load("glGetUniformuiv"))
  glBindFragDataLocation = cast[proc (program: GLuint, color: GLuint, name: cstring) {.stdcall.}](load("glBindFragDataLocation"))
  glGetFragDataLocation = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetFragDataLocation"))
  glUniform1ui = cast[proc (location: GLint, v0: GLuint) {.stdcall.}](load("glUniform1ui"))
  glUniform2ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glUniform2ui"))
  glUniform3ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glUniform3ui"))
  glUniform4ui = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glUniform4ui"))
  glUniform1uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform1uiv"))
  glUniform2uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform2uiv"))
  glUniform3uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform3uiv"))
  glUniform4uiv = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform4uiv"))
  glTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTexParameterIiv"))
  glTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glTexParameterIuiv"))
  glGetTexParameterIiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexParameterIiv"))
  glGetTexParameterIuiv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetTexParameterIuiv"))
  glClearBufferiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}](load("glClearBufferiv"))
  glClearBufferuiv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}](load("glClearBufferuiv"))
  glClearBufferfv = cast[proc (buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}](load("glClearBufferfv"))
  glClearBufferfi = cast[proc (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}](load("glClearBufferfi"))
  glGetStringi = cast[proc (name: GLenum, index: GLuint): ptr GLubyte {.stdcall.}](load("glGetStringi"))
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.stdcall.}](load("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.stdcall.}](load("glIsFramebuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.stdcall.}](load("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.stdcall.}](load("glCheckFramebufferStatus"))
  glFramebufferTexture1D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture1D"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture2D"))
  glFramebufferTexture3D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}](load("glFramebufferTexture3D"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc (target: GLenum) {.stdcall.}](load("glGenerateMipmap"))
  glBlitFramebuffer = cast[proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glFramebufferTextureLayer"))
  glMapBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](load("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glFlushMappedBufferRange"))
  glBindVertexArray = cast[proc (array: GLuint) {.stdcall.}](load("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glGenVertexArrays"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.stdcall.}](load("glIsVertexArray"))


proc load_GL_VERSION_3_1(load: proc) =
  if not GLAD_GL_VERSION_3_1: return

  glDrawArraysInstanced = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) {.stdcall.}](load("glDrawArraysInstanced"))
  glDrawElementsInstanced = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei) {.stdcall.}](load("glDrawElementsInstanced"))
  glTexBuffer = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glTexBuffer"))
  glPrimitiveRestartIndex = cast[proc (index: GLuint) {.stdcall.}](load("glPrimitiveRestartIndex"))
  glCopyBufferSubData = cast[proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glCopyBufferSubData"))
  glGetUniformIndices = cast[proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.stdcall.}](load("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.stdcall.}](load("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc (program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}](load("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.stdcall.}](load("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.stdcall.}](load("glUniformBlockBinding"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBase"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegeri_v"))


proc load_GL_VERSION_3_2(load: proc) =
  if not GLAD_GL_VERSION_3_2: return

  glDrawElementsBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}](load("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}](load("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.stdcall.}](load("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.stdcall.}](load("glMultiDrawElementsBaseVertex"))
  glProvokingVertex = cast[proc (mode: GLenum) {.stdcall.}](load("glProvokingVertex"))
  glFenceSync = cast[proc (condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}](load("glFenceSync"))
  glIsSync = cast[proc (sync: GLsync): GLboolean {.stdcall.}](load("glIsSync"))
  glDeleteSync = cast[proc (sync: GLsync) {.stdcall.}](load("glDeleteSync"))
  glClientWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}](load("glClientWaitSync"))
  glWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.stdcall.}](load("glWaitSync"))
  glGetInteger64v = cast[proc (pname: GLenum, data: ptr GLint64) {.stdcall.}](load("glGetInteger64v"))
  glGetSynciv = cast[proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}](load("glGetSynciv"))
  glGetInteger64i_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint64) {.stdcall.}](load("glGetInteger64i_v"))
  glGetBufferParameteri64v = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetBufferParameteri64v"))
  glFramebufferTexture = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture"))
  glTexImage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexImage2DMultisample"))
  glTexImage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexImage3DMultisample"))
  glGetMultisamplefv = cast[proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}](load("glGetMultisamplefv"))
  glSampleMaski = cast[proc (maskNumber: GLuint, mask: GLbitfield) {.stdcall.}](load("glSampleMaski"))


proc load_GL_VERSION_3_3(load: proc) =
  if not GLAD_GL_VERSION_3_3: return

  glBindFragDataLocationIndexed = cast[proc (program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring) {.stdcall.}](load("glBindFragDataLocationIndexed"))
  glGetFragDataIndex = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetFragDataIndex"))
  glGenSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glGenSamplers"))
  glDeleteSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glDeleteSamplers"))
  glIsSampler = cast[proc (sampler: GLuint): GLboolean {.stdcall.}](load("glIsSampler"))
  glBindSampler = cast[proc (unit: GLuint, sampler: GLuint) {.stdcall.}](load("glBindSampler"))
  glSamplerParameteri = cast[proc (sampler: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glSamplerParameteri"))
  glSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glSamplerParameteriv"))
  glSamplerParameterf = cast[proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}](load("glSamplerParameterf"))
  glSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glSamplerParameterfv"))
  glSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glSamplerParameterIiv"))
  glSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLuint) {.stdcall.}](load("glSamplerParameterIuiv"))
  glGetSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSamplerParameteriv"))
  glGetSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSamplerParameterIiv"))
  glGetSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetSamplerParameterfv"))
  glGetSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetSamplerParameterIuiv"))
  glQueryCounter = cast[proc (id: GLuint, target: GLenum) {.stdcall.}](load("glQueryCounter"))
  glGetQueryObjecti64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetQueryObjecti64v"))
  glGetQueryObjectui64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}](load("glGetQueryObjectui64v"))
  glVertexAttribDivisor = cast[proc (index: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexAttribDivisor"))
  glVertexAttribP1ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP1ui"))
  glVertexAttribP1uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP1uiv"))
  glVertexAttribP2ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP2ui"))
  glVertexAttribP2uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP2uiv"))
  glVertexAttribP3ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP3ui"))
  glVertexAttribP3uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP3uiv"))
  glVertexAttribP4ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP4ui"))
  glVertexAttribP4uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP4uiv"))
  glVertexP2ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP2ui"))
  glVertexP2uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP2uiv"))
  glVertexP3ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP3ui"))
  glVertexP3uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP3uiv"))
  glVertexP4ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP4ui"))
  glVertexP4uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP4uiv"))
  glTexCoordP1ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP1ui"))
  glTexCoordP1uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP1uiv"))
  glTexCoordP2ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP2ui"))
  glTexCoordP2uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP2uiv"))
  glTexCoordP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP3ui"))
  glTexCoordP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP3uiv"))
  glTexCoordP4ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP4ui"))
  glTexCoordP4uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP4uiv"))
  glMultiTexCoordP1ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP1ui"))
  glMultiTexCoordP1uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP1uiv"))
  glMultiTexCoordP2ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP2ui"))
  glMultiTexCoordP2uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP2uiv"))
  glMultiTexCoordP3ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP3ui"))
  glMultiTexCoordP3uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP3uiv"))
  glMultiTexCoordP4ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP4ui"))
  glMultiTexCoordP4uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP4uiv"))
  glNormalP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glNormalP3ui"))
  glNormalP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glNormalP3uiv"))
  glColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glColorP3ui"))
  glColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glColorP3uiv"))
  glColorP4ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glColorP4ui"))
  glColorP4uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glColorP4uiv"))
  glSecondaryColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glSecondaryColorP3ui"))
  glSecondaryColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glSecondaryColorP3uiv"))


proc load_GL_VERSION_4_0(load: proc) =
  if not GLAD_GL_VERSION_4_0: return

  glMinSampleShading = cast[proc (value: GLfloat) {.stdcall.}](load("glMinSampleShading"))
  glBlendEquationi = cast[proc (buf: GLuint, mode: GLenum) {.stdcall.}](load("glBlendEquationi"))
  glBlendEquationSeparatei = cast[proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparatei"))
  glBlendFunci = cast[proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}](load("glBlendFunci"))
  glBlendFuncSeparatei = cast[proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparatei"))
  glDrawArraysIndirect = cast[proc (mode: GLenum, indirect: pointer) {.stdcall.}](load("glDrawArraysIndirect"))
  glDrawElementsIndirect = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer) {.stdcall.}](load("glDrawElementsIndirect"))
  glUniform1d = cast[proc (location: GLint, x: GLdouble) {.stdcall.}](load("glUniform1d"))
  glUniform2d = cast[proc (location: GLint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glUniform2d"))
  glUniform3d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glUniform3d"))
  glUniform4d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glUniform4d"))
  glUniform1dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform1dv"))
  glUniform2dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform2dv"))
  glUniform3dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform3dv"))
  glUniform4dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform4dv"))
  glUniformMatrix2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2dv"))
  glUniformMatrix3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3dv"))
  glUniformMatrix4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4dv"))
  glUniformMatrix2x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2x3dv"))
  glUniformMatrix2x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2x4dv"))
  glUniformMatrix3x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3x2dv"))
  glUniformMatrix3x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3x4dv"))
  glUniformMatrix4x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4x2dv"))
  glUniformMatrix4x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4x3dv"))
  glGetUniformdv = cast[proc (program: GLuint, location: GLint, params: ptr GLdouble) {.stdcall.}](load("glGetUniformdv"))
  glGetSubroutineUniformLocation = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}](load("glGetSubroutineUniformLocation"))
  glGetSubroutineIndex = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}](load("glGetSubroutineIndex"))
  glGetActiveSubroutineUniformiv = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint) {.stdcall.}](load("glGetActiveSubroutineUniformiv"))
  glGetActiveSubroutineUniformName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetActiveSubroutineUniformName"))
  glGetActiveSubroutineName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetActiveSubroutineName"))
  glUniformSubroutinesuiv = cast[proc (shadertype: GLenum, count: GLsizei, indices: ptr GLuint) {.stdcall.}](load("glUniformSubroutinesuiv"))
  glGetUniformSubroutineuiv = cast[proc (shadertype: GLenum, location: GLint, params: ptr GLuint) {.stdcall.}](load("glGetUniformSubroutineuiv"))
  glGetProgramStageiv = cast[proc (program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint) {.stdcall.}](load("glGetProgramStageiv"))
  glPatchParameteri = cast[proc (pname: GLenum, value: GLint) {.stdcall.}](load("glPatchParameteri"))
  glPatchParameterfv = cast[proc (pname: GLenum, values: ptr GLfloat) {.stdcall.}](load("glPatchParameterfv"))
  glBindTransformFeedback = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBindTransformFeedback"))
  glDeleteTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteTransformFeedbacks"))
  glGenTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenTransformFeedbacks"))
  glIsTransformFeedback = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsTransformFeedback"))
  glPauseTransformFeedback = cast[proc () {.stdcall.}](load("glPauseTransformFeedback"))
  glResumeTransformFeedback = cast[proc () {.stdcall.}](load("glResumeTransformFeedback"))
  glDrawTransformFeedback = cast[proc (mode: GLenum, id: GLuint) {.stdcall.}](load("glDrawTransformFeedback"))
  glDrawTransformFeedbackStream = cast[proc (mode: GLenum, id: GLuint, stream: GLuint) {.stdcall.}](load("glDrawTransformFeedbackStream"))
  glBeginQueryIndexed = cast[proc (target: GLenum, index: GLuint, id: GLuint) {.stdcall.}](load("glBeginQueryIndexed"))
  glEndQueryIndexed = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glEndQueryIndexed"))
  glGetQueryIndexediv = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryIndexediv"))


proc load_GL_VERSION_4_1(load: proc) =
  if not GLAD_GL_VERSION_4_1: return

  glReleaseShaderCompiler = cast[proc () {.stdcall.}](load("glReleaseShaderCompiler"))
  glShaderBinary = cast[proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glShaderBinary"))
  glGetShaderPrecisionFormat = cast[proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.stdcall.}](load("glGetShaderPrecisionFormat"))
  glDepthRangef = cast[proc (n: GLfloat, f: GLfloat) {.stdcall.}](load("glDepthRangef"))
  glClearDepthf = cast[proc (d: GLfloat) {.stdcall.}](load("glClearDepthf"))
  glGetProgramBinary = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.stdcall.}](load("glGetProgramBinary"))
  glProgramBinary = cast[proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glProgramBinary"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteri"))
  glUseProgramStages = cast[proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.stdcall.}](load("glUseProgramStages"))
  glActiveShaderProgram = cast[proc (pipeline: GLuint, program: GLuint) {.stdcall.}](load("glActiveShaderProgram"))
  glCreateShaderProgramv = cast[proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.stdcall.}](load("glCreateShaderProgramv"))
  glBindProgramPipeline = cast[proc (pipeline: GLuint) {.stdcall.}](load("glBindProgramPipeline"))
  glDeleteProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glDeleteProgramPipelines"))
  glGenProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glGenProgramPipelines"))
  glIsProgramPipeline = cast[proc (pipeline: GLuint): GLboolean {.stdcall.}](load("glIsProgramPipeline"))
  glGetProgramPipelineiv = cast[proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramPipelineiv"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteri"))
  glProgramUniform1i = cast[proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}](load("glProgramUniform1i"))
  glProgramUniform1iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform1iv"))
  glProgramUniform1f = cast[proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}](load("glProgramUniform1f"))
  glProgramUniform1fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform1fv"))
  glProgramUniform1d = cast[proc (program: GLuint, location: GLint, v0: GLdouble) {.stdcall.}](load("glProgramUniform1d"))
  glProgramUniform1dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform1dv"))
  glProgramUniform1ui = cast[proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}](load("glProgramUniform1ui"))
  glProgramUniform1uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform1uiv"))
  glProgramUniform2i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glProgramUniform2i"))
  glProgramUniform2iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform2iv"))
  glProgramUniform2f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glProgramUniform2f"))
  glProgramUniform2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform2fv"))
  glProgramUniform2d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) {.stdcall.}](load("glProgramUniform2d"))
  glProgramUniform2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform2dv"))
  glProgramUniform2ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glProgramUniform2ui"))
  glProgramUniform2uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform2uiv"))
  glProgramUniform3i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glProgramUniform3i"))
  glProgramUniform3iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform3iv"))
  glProgramUniform3f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glProgramUniform3f"))
  glProgramUniform3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform3fv"))
  glProgramUniform3d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) {.stdcall.}](load("glProgramUniform3d"))
  glProgramUniform3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform3dv"))
  glProgramUniform3ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glProgramUniform3ui"))
  glProgramUniform3uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform3uiv"))
  glProgramUniform4i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glProgramUniform4i"))
  glProgramUniform4iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform4iv"))
  glProgramUniform4f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glProgramUniform4f"))
  glProgramUniform4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform4fv"))
  glProgramUniform4d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) {.stdcall.}](load("glProgramUniform4d"))
  glProgramUniform4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform4dv"))
  glProgramUniform4ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glProgramUniform4ui"))
  glProgramUniform4uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform4uiv"))
  glProgramUniformMatrix2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2fv"))
  glProgramUniformMatrix3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3fv"))
  glProgramUniformMatrix4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4fv"))
  glProgramUniformMatrix2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2dv"))
  glProgramUniformMatrix3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3dv"))
  glProgramUniformMatrix4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4dv"))
  glProgramUniformMatrix2x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x3fv"))
  glProgramUniformMatrix3x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x2fv"))
  glProgramUniformMatrix2x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x4fv"))
  glProgramUniformMatrix4x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x2fv"))
  glProgramUniformMatrix3x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x4fv"))
  glProgramUniformMatrix4x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x3fv"))
  glProgramUniformMatrix2x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x3dv"))
  glProgramUniformMatrix3x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x2dv"))
  glProgramUniformMatrix2x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x4dv"))
  glProgramUniformMatrix4x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x2dv"))
  glProgramUniformMatrix3x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x4dv"))
  glProgramUniformMatrix4x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x3dv"))
  glValidateProgramPipeline = cast[proc (pipeline: GLuint) {.stdcall.}](load("glValidateProgramPipeline"))
  glGetProgramPipelineInfoLog = cast[proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetProgramPipelineInfoLog"))
  glVertexAttribL1d = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttribL1d"))
  glVertexAttribL2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttribL2d"))
  glVertexAttribL3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttribL3d"))
  glVertexAttribL4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttribL4d"))
  glVertexAttribL1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL1dv"))
  glVertexAttribL2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL2dv"))
  glVertexAttribL3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL3dv"))
  glVertexAttribL4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL4dv"))
  glVertexAttribLPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribLPointer"))
  glGetVertexAttribLdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribLdv"))
  glViewportArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glViewportArrayv"))
  glViewportIndexedf = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) {.stdcall.}](load("glViewportIndexedf"))
  glViewportIndexedfv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glViewportIndexedfv"))
  glScissorArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}](load("glScissorArrayv"))
  glScissorIndexed = cast[proc (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glScissorIndexed"))
  glScissorIndexedv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glScissorIndexedv"))
  glDepthRangeArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glDepthRangeArrayv"))
  glDepthRangeIndexed = cast[proc (index: GLuint, n: GLdouble, f: GLdouble) {.stdcall.}](load("glDepthRangeIndexed"))
  glGetFloati_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.stdcall.}](load("glGetFloati_v"))
  glGetDoublei_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.stdcall.}](load("glGetDoublei_v"))


proc load_GL_VERSION_4_2(load: proc) =
  if not GLAD_GL_VERSION_4_2: return

  glDrawArraysInstancedBaseInstance = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) {.stdcall.}](load("glDrawArraysInstancedBaseInstance"))
  glDrawElementsInstancedBaseInstance = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint) {.stdcall.}](load("glDrawElementsInstancedBaseInstance"))
  glDrawElementsInstancedBaseVertexBaseInstance = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) {.stdcall.}](load("glDrawElementsInstancedBaseVertexBaseInstance"))
  glGetInternalformativ = cast[proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetInternalformativ"))
  glGetActiveAtomicCounterBufferiv = cast[proc (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveAtomicCounterBufferiv"))
  glBindImageTexture = cast[proc (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) {.stdcall.}](load("glBindImageTexture"))
  glMemoryBarrier = cast[proc (barriers: GLbitfield) {.stdcall.}](load("glMemoryBarrier"))
  glTexStorage1D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}](load("glTexStorage1D"))
  glTexStorage2D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTexStorage2D"))
  glTexStorage3D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTexStorage3D"))
  glDrawTransformFeedbackInstanced = cast[proc (mode: GLenum, id: GLuint, instancecount: GLsizei) {.stdcall.}](load("glDrawTransformFeedbackInstanced"))
  glDrawTransformFeedbackStreamInstanced = cast[proc (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) {.stdcall.}](load("glDrawTransformFeedbackStreamInstanced"))


proc load_GL_VERSION_4_3(load: proc) =
  if not GLAD_GL_VERSION_4_3: return

  glClearBufferData = cast[proc (target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearBufferData"))
  glClearBufferSubData = cast[proc (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearBufferSubData"))
  glDispatchCompute = cast[proc (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) {.stdcall.}](load("glDispatchCompute"))
  glDispatchComputeIndirect = cast[proc (indirect: GLintptr) {.stdcall.}](load("glDispatchComputeIndirect"))
  glCopyImageSubData = cast[proc (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) {.stdcall.}](load("glCopyImageSubData"))
  glFramebufferParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glFramebufferParameteri"))
  glGetFramebufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferParameteriv"))
  glGetInternalformati64v = cast[proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64) {.stdcall.}](load("glGetInternalformati64v"))
  glInvalidateTexSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glInvalidateTexSubImage"))
  glInvalidateTexImage = cast[proc (texture: GLuint, level: GLint) {.stdcall.}](load("glInvalidateTexImage"))
  glInvalidateBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glInvalidateBufferSubData"))
  glInvalidateBufferData = cast[proc (buffer: GLuint) {.stdcall.}](load("glInvalidateBufferData"))
  glInvalidateFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}](load("glInvalidateFramebuffer"))
  glInvalidateSubFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glInvalidateSubFramebuffer"))
  glMultiDrawArraysIndirect = cast[proc (mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawArraysIndirect"))
  glMultiDrawElementsIndirect = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawElementsIndirect"))
  glGetProgramInterfaceiv = cast[proc (program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramInterfaceiv"))
  glGetProgramResourceIndex = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLuint {.stdcall.}](load("glGetProgramResourceIndex"))
  glGetProgramResourceName = cast[proc (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetProgramResourceName"))
  glGetProgramResourceiv = cast[proc (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint) {.stdcall.}](load("glGetProgramResourceiv"))
  glGetProgramResourceLocation = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](load("glGetProgramResourceLocation"))
  glGetProgramResourceLocationIndex = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](load("glGetProgramResourceLocationIndex"))
  glShaderStorageBlockBinding = cast[proc (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) {.stdcall.}](load("glShaderStorageBlockBinding"))
  glTexBufferRange = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glTexBufferRange"))
  glTexStorage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexStorage2DMultisample"))
  glTexStorage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexStorage3DMultisample"))
  glTextureView = cast[proc (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) {.stdcall.}](load("glTextureView"))
  glBindVertexBuffer = cast[proc (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}](load("glBindVertexBuffer"))
  glVertexAttribFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}](load("glVertexAttribFormat"))
  glVertexAttribIFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexAttribIFormat"))
  glVertexAttribLFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexAttribLFormat"))
  glVertexAttribBinding = cast[proc (attribindex: GLuint, bindingindex: GLuint) {.stdcall.}](load("glVertexAttribBinding"))
  glVertexBindingDivisor = cast[proc (bindingindex: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexBindingDivisor"))
  glDebugMessageControl = cast[proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}](load("glDebugMessageControl"))
  glDebugMessageInsert = cast[proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.stdcall.}](load("glDebugMessageInsert"))
  glDebugMessageCallback = cast[proc (callback: GLDEBUGPROC, userParam: pointer) {.stdcall.}](load("glDebugMessageCallback"))
  glGetDebugMessageLog = cast[proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](load("glGetDebugMessageLog"))
  glPushDebugGroup = cast[proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.stdcall.}](load("glPushDebugGroup"))
  glPopDebugGroup = cast[proc () {.stdcall.}](load("glPopDebugGroup"))
  glObjectLabel = cast[proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.stdcall.}](load("glObjectLabel"))
  glGetObjectLabel = cast[proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}](load("glGetObjectLabel"))
  glObjectPtrLabel = cast[proc (`ptr`: pointer, length: GLsizei, label: cstring) {.stdcall.}](load("glObjectPtrLabel"))
  glGetObjectPtrLabel = cast[proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}](load("glGetObjectPtrLabel"))
  glGetPointerv = cast[proc (pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetPointerv"))


proc load_GL_VERSION_4_4(load: proc) =
  if not GLAD_GL_VERSION_4_4: return

  glBufferStorage = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}](load("glBufferStorage"))
  glClearTexImage = cast[proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearTexImage"))
  glClearTexSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearTexSubImage"))
  glBindBuffersBase = cast[proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glBindBuffersBase"))
  glBindBuffersRange = cast[proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr) {.stdcall.}](load("glBindBuffersRange"))
  glBindTextures = cast[proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glBindTextures"))
  glBindSamplers = cast[proc (first: GLuint, count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glBindSamplers"))
  glBindImageTextures = cast[proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glBindImageTextures"))
  glBindVertexBuffers = cast[proc (first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.stdcall.}](load("glBindVertexBuffers"))


proc load_GL_VERSION_4_5(load: proc) =
  if not GLAD_GL_VERSION_4_5: return

  glClipControl = cast[proc (origin: GLenum, depth: GLenum) {.stdcall.}](load("glClipControl"))
  glCreateTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glCreateTransformFeedbacks"))
  glTransformFeedbackBufferBase = cast[proc (xfb: GLuint, index: GLuint, buffer: GLuint) {.stdcall.}](load("glTransformFeedbackBufferBase"))
  glTransformFeedbackBufferRange = cast[proc (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glTransformFeedbackBufferRange"))
  glGetTransformFeedbackiv = cast[proc (xfb: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetTransformFeedbackiv"))
  glGetTransformFeedbacki_v2 = cast[proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint) {.stdcall.}](load("glGetTransformFeedbacki_v2"))
  glGetTransformFeedbacki64_v = cast[proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64) {.stdcall.}](load("glGetTransformFeedbacki64_v"))
  glCreateBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glCreateBuffers"))
  glNamedBufferStorage = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}](load("glNamedBufferStorage"))
  glNamedBufferData = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}](load("glNamedBufferData"))
  glNamedBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glNamedBufferSubData"))
  glCopyNamedBufferSubData = cast[proc (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glCopyNamedBufferSubData"))
  glClearNamedBufferData = cast[proc (buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearNamedBufferData"))
  glClearNamedBufferSubData = cast[proc (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearNamedBufferSubData"))
  glMapNamedBuffer = cast[proc (buffer: GLuint, access: GLenum): pointer {.stdcall.}](load("glMapNamedBuffer"))
  glMapNamedBufferRange = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](load("glMapNamedBufferRange"))
  glUnmapNamedBuffer = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glUnmapNamedBuffer"))
  glFlushMappedNamedBufferRange = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glFlushMappedNamedBufferRange"))
  glGetNamedBufferParameteriv = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedBufferParameteriv"))
  glGetNamedBufferParameteri64v = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetNamedBufferParameteri64v"))
  glGetNamedBufferPointerv = cast[proc (buffer: GLuint, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetNamedBufferPointerv"))
  glGetNamedBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glGetNamedBufferSubData"))
  glCreateFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glCreateFramebuffers"))
  glNamedFramebufferRenderbuffer = cast[proc (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glNamedFramebufferRenderbuffer"))
  glNamedFramebufferParameteri = cast[proc (framebuffer: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glNamedFramebufferParameteri"))
  glNamedFramebufferTexture = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glNamedFramebufferTexture"))
  glNamedFramebufferTextureLayer = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glNamedFramebufferTextureLayer"))
  glNamedFramebufferDrawBuffer = cast[proc (framebuffer: GLuint, buf: GLenum) {.stdcall.}](load("glNamedFramebufferDrawBuffer"))
  glNamedFramebufferDrawBuffers = cast[proc (framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glNamedFramebufferDrawBuffers"))
  glNamedFramebufferReadBuffer = cast[proc (framebuffer: GLuint, src: GLenum) {.stdcall.}](load("glNamedFramebufferReadBuffer"))
  glInvalidateNamedFramebufferData = cast[proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}](load("glInvalidateNamedFramebufferData"))
  glInvalidateNamedFramebufferSubData = cast[proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glInvalidateNamedFramebufferSubData"))
  glClearNamedFramebufferiv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}](load("glClearNamedFramebufferiv"))
  glClearNamedFramebufferuiv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}](load("glClearNamedFramebufferuiv"))
  glClearNamedFramebufferfv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}](load("glClearNamedFramebufferfv"))
  glClearNamedFramebufferfi = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}](load("glClearNamedFramebufferfi"))
  glBlitNamedFramebuffer = cast[proc (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glBlitNamedFramebuffer"))
  glCheckNamedFramebufferStatus = cast[proc (framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}](load("glCheckNamedFramebufferStatus"))
  glGetNamedFramebufferParameteriv = cast[proc (framebuffer: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetNamedFramebufferParameteriv"))
  glGetNamedFramebufferAttachmentParameteriv = cast[proc (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedFramebufferAttachmentParameteriv"))
  glCreateRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glCreateRenderbuffers"))
  glNamedRenderbufferStorage = cast[proc (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorage"))
  glNamedRenderbufferStorageMultisample = cast[proc (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorageMultisample"))
  glGetNamedRenderbufferParameteriv = cast[proc (renderbuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedRenderbufferParameteriv"))
  glCreateTextures = cast[proc (target: GLenum, n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glCreateTextures"))
  glTextureBuffer = cast[proc (texture: GLuint, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glTextureBuffer"))
  glTextureBufferRange = cast[proc (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glTextureBufferRange"))
  glTextureStorage1D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}](load("glTextureStorage1D"))
  glTextureStorage2D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTextureStorage2D"))
  glTextureStorage3D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTextureStorage3D"))
  glTextureStorage2DMultisample = cast[proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTextureStorage2DMultisample"))
  glTextureStorage3DMultisample = cast[proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTextureStorage3DMultisample"))
  glTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage1D"))
  glTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage2D"))
  glTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage3D"))
  glCompressedTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTextureSubImage1D"))
  glCompressedTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTextureSubImage2D"))
  glCompressedTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTextureSubImage3D"))
  glCopyTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyTextureSubImage1D"))
  glCopyTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTextureSubImage2D"))
  glCopyTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTextureSubImage3D"))
  glTextureParameterf = cast[proc (texture: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}](load("glTextureParameterf"))
  glTextureParameterfv = cast[proc (texture: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glTextureParameterfv"))
  glTextureParameteri = cast[proc (texture: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glTextureParameteri"))
  glTextureParameterIiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTextureParameterIiv"))
  glTextureParameterIuiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glTextureParameterIuiv"))
  glTextureParameteriv = cast[proc (texture: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glTextureParameteriv"))
  glGenerateTextureMipmap = cast[proc (texture: GLuint) {.stdcall.}](load("glGenerateTextureMipmap"))
  glBindTextureUnit = cast[proc (unit: GLuint, texture: GLuint) {.stdcall.}](load("glBindTextureUnit"))
  glGetTextureImage = cast[proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetTextureImage"))
  glGetCompressedTextureImage = cast[proc (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetCompressedTextureImage"))
  glGetTextureLevelParameterfv = cast[proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTextureLevelParameterfv"))
  glGetTextureLevelParameteriv = cast[proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureLevelParameteriv"))
  glGetTextureParameterfv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTextureParameterfv"))
  glGetTextureParameterIiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureParameterIiv"))
  glGetTextureParameterIuiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetTextureParameterIuiv"))
  glGetTextureParameteriv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureParameteriv"))
  glCreateVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glCreateVertexArrays"))
  glDisableVertexArrayAttrib = cast[proc (vaobj: GLuint, index: GLuint) {.stdcall.}](load("glDisableVertexArrayAttrib"))
  glEnableVertexArrayAttrib = cast[proc (vaobj: GLuint, index: GLuint) {.stdcall.}](load("glEnableVertexArrayAttrib"))
  glVertexArrayElementBuffer = cast[proc (vaobj: GLuint, buffer: GLuint) {.stdcall.}](load("glVertexArrayElementBuffer"))
  glVertexArrayVertexBuffer = cast[proc (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}](load("glVertexArrayVertexBuffer"))
  glVertexArrayVertexBuffers = cast[proc (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.stdcall.}](load("glVertexArrayVertexBuffers"))
  glVertexArrayAttribBinding = cast[proc (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) {.stdcall.}](load("glVertexArrayAttribBinding"))
  glVertexArrayAttribFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayAttribFormat"))
  glVertexArrayAttribIFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayAttribIFormat"))
  glVertexArrayAttribLFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayAttribLFormat"))
  glVertexArrayBindingDivisor = cast[proc (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexArrayBindingDivisor"))
  glGetVertexArrayiv = cast[proc (vaobj: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetVertexArrayiv"))
  glGetVertexArrayIndexediv = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetVertexArrayIndexediv"))
  glGetVertexArrayIndexed64iv = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64) {.stdcall.}](load("glGetVertexArrayIndexed64iv"))
  glCreateSamplers = cast[proc (n: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glCreateSamplers"))
  glCreateProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glCreateProgramPipelines"))
  glCreateQueries = cast[proc (target: GLenum, n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glCreateQueries"))
  glGetQueryBufferObjecti64v = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjecti64v"))
  glGetQueryBufferObjectiv = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjectiv"))
  glGetQueryBufferObjectui64v = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjectui64v"))
  glGetQueryBufferObjectuiv = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjectuiv"))
  glMemoryBarrierByRegion = cast[proc (barriers: GLbitfield) {.stdcall.}](load("glMemoryBarrierByRegion"))
  glGetTextureSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetTextureSubImage"))
  glGetCompressedTextureSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetCompressedTextureSubImage"))
  glGetGraphicsResetStatus = cast[proc (): GLenum {.stdcall.}](load("glGetGraphicsResetStatus"))
  glGetnCompressedTexImage = cast[proc (target: GLenum, lod: GLint, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetnCompressedTexImage"))
  glGetnTexImage = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetnTexImage"))
  glGetnUniformdv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble) {.stdcall.}](load("glGetnUniformdv"))
  glGetnUniformfv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glGetnUniformfv"))
  glGetnUniformiv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetnUniformiv"))
  glGetnUniformuiv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.stdcall.}](load("glGetnUniformuiv"))
  glReadnPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.stdcall.}](load("glReadnPixels"))
  glGetnMapdv = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glGetnMapdv"))
  glGetnMapfv = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glGetnMapfv"))
  glGetnMapiv = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint) {.stdcall.}](load("glGetnMapiv"))
  glGetnPixelMapfv = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLfloat) {.stdcall.}](load("glGetnPixelMapfv"))
  glGetnPixelMapuiv = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLuint) {.stdcall.}](load("glGetnPixelMapuiv"))
  glGetnPixelMapusv = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLushort) {.stdcall.}](load("glGetnPixelMapusv"))
  glGetnPolygonStipple = cast[proc (bufSize: GLsizei, pattern: ptr GLubyte) {.stdcall.}](load("glGetnPolygonStipple"))
  glGetnColorTable = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer) {.stdcall.}](load("glGetnColorTable"))
  glGetnConvolutionFilter = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer) {.stdcall.}](load("glGetnConvolutionFilter"))
  glGetnSeparableFilter = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer) {.stdcall.}](load("glGetnSeparableFilter"))
  glGetnHistogram = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}](load("glGetnHistogram"))
  glGetnMinmax = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}](load("glGetnMinmax"))
  glTextureBarrier = cast[proc () {.stdcall.}](load("glTextureBarrier"))


proc load_GL_VERSION_4_6(load: proc) =
  if not GLAD_GL_VERSION_4_6: return

  glSpecializeShader = cast[proc (shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint) {.stdcall.}](load("glSpecializeShader"))
  glMultiDrawArraysIndirectCount = cast[proc (mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawArraysIndirectCount"))
  glMultiDrawElementsIndirectCount = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawElementsIndirectCount"))
  glPolygonOffsetClamp = cast[proc (factor: GLfloat, units: GLfloat, clamp: GLfloat) {.stdcall.}](load("glPolygonOffsetClamp"))


proc load_GL_3DFX_tbuffer(load: proc) =
  if not GLAD_GL_3DFX_tbuffer: return
  glTbufferMask3DFX = cast[proc (mask: GLuint) {.stdcall.}](load("glTbufferMask3DFX"))


proc load_GL_AMD_debug_output(load: proc) =
  if not GLAD_GL_AMD_debug_output: return
  glDebugMessageEnableAMD = cast[proc (category: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}](load("glDebugMessageEnableAMD"))
  glDebugMessageInsertAMD = cast[proc (category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: cstring) {.stdcall.}](load("glDebugMessageInsertAMD"))
  glDebugMessageCallbackAMD = cast[proc (callback: GLDEBUGPROCAMD, userParam: pointer) {.stdcall.}](load("glDebugMessageCallbackAMD"))
  glGetDebugMessageLogAMD = cast[proc (count: GLuint, bufSize: GLsizei, categories: ptr GLenum, severities: ptr GLuint, ids: ptr GLuint, lengths: ptr GLsizei, message: cstring): GLuint {.stdcall.}](load("glGetDebugMessageLogAMD"))


proc load_GL_AMD_draw_buffers_blend(load: proc) =
  if not GLAD_GL_AMD_draw_buffers_blend: return
  glBlendFuncIndexedAMD = cast[proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}](load("glBlendFuncIndexedAMD"))
  glBlendFuncSeparateIndexedAMD = cast[proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparateIndexedAMD"))
  glBlendEquationIndexedAMD = cast[proc (buf: GLuint, mode: GLenum) {.stdcall.}](load("glBlendEquationIndexedAMD"))
  glBlendEquationSeparateIndexedAMD = cast[proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparateIndexedAMD"))


proc load_GL_AMD_framebuffer_multisample_advanced(load: proc) =
  if not GLAD_GL_AMD_framebuffer_multisample_advanced: return
  glRenderbufferStorageMultisampleAdvancedAMD = cast[proc (target: GLenum, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageMultisampleAdvancedAMD"))
  glNamedRenderbufferStorageMultisampleAdvancedAMD = cast[proc (renderbuffer: GLuint, samples: GLsizei, storageSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorageMultisampleAdvancedAMD"))


proc load_GL_AMD_framebuffer_sample_positions(load: proc) =
  if not GLAD_GL_AMD_framebuffer_sample_positions: return
  glFramebufferSamplePositionsfvAMD = cast[proc (target: GLenum, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat) {.stdcall.}](load("glFramebufferSamplePositionsfvAMD"))
  glNamedFramebufferSamplePositionsfvAMD = cast[proc (framebuffer: GLuint, numsamples: GLuint, pixelindex: GLuint, values: ptr GLfloat) {.stdcall.}](load("glNamedFramebufferSamplePositionsfvAMD"))
  glGetFramebufferParameterfvAMD = cast[proc (target: GLenum, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat) {.stdcall.}](load("glGetFramebufferParameterfvAMD"))
  glGetNamedFramebufferParameterfvAMD = cast[proc (framebuffer: GLuint, pname: GLenum, numsamples: GLuint, pixelindex: GLuint, size: GLsizei, values: ptr GLfloat) {.stdcall.}](load("glGetNamedFramebufferParameterfvAMD"))


proc load_GL_AMD_gpu_shader_int64(load: proc) =
  if not GLAD_GL_AMD_gpu_shader_int64: return
  glUniform1i64NV = cast[proc (location: GLint, x: GLint64EXT) {.stdcall.}](load("glUniform1i64NV"))
  glUniform2i64NV = cast[proc (location: GLint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}](load("glUniform2i64NV"))
  glUniform3i64NV = cast[proc (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}](load("glUniform3i64NV"))
  glUniform4i64NV = cast[proc (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}](load("glUniform4i64NV"))
  glUniform1i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform1i64vNV"))
  glUniform2i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform2i64vNV"))
  glUniform3i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform3i64vNV"))
  glUniform4i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform4i64vNV"))
  glUniform1ui64NV = cast[proc (location: GLint, x: GLuint64EXT) {.stdcall.}](load("glUniform1ui64NV"))
  glUniform2ui64NV = cast[proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}](load("glUniform2ui64NV"))
  glUniform3ui64NV = cast[proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}](load("glUniform3ui64NV"))
  glUniform4ui64NV = cast[proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}](load("glUniform4ui64NV"))
  glUniform1ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform1ui64vNV"))
  glUniform2ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform2ui64vNV"))
  glUniform3ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform3ui64vNV"))
  glUniform4ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform4ui64vNV"))
  glGetUniformi64vNV = cast[proc (program: GLuint, location: GLint, params: ptr GLint64EXT) {.stdcall.}](load("glGetUniformi64vNV"))
  glGetUniformui64vNV = cast[proc (program: GLuint, location: GLint, params: ptr GLuint64EXT) {.stdcall.}](load("glGetUniformui64vNV"))
  glProgramUniform1i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT) {.stdcall.}](load("glProgramUniform1i64NV"))
  glProgramUniform2i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}](load("glProgramUniform2i64NV"))
  glProgramUniform3i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}](load("glProgramUniform3i64NV"))
  glProgramUniform4i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}](load("glProgramUniform4i64NV"))
  glProgramUniform1i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform1i64vNV"))
  glProgramUniform2i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform2i64vNV"))
  glProgramUniform3i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform3i64vNV"))
  glProgramUniform4i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform4i64vNV"))
  glProgramUniform1ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT) {.stdcall.}](load("glProgramUniform1ui64NV"))
  glProgramUniform2ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}](load("glProgramUniform2ui64NV"))
  glProgramUniform3ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}](load("glProgramUniform3ui64NV"))
  glProgramUniform4ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}](load("glProgramUniform4ui64NV"))
  glProgramUniform1ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform1ui64vNV"))
  glProgramUniform2ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform2ui64vNV"))
  glProgramUniform3ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform3ui64vNV"))
  glProgramUniform4ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform4ui64vNV"))


proc load_GL_AMD_interleaved_elements(load: proc) =
  if not GLAD_GL_AMD_interleaved_elements: return
  glVertexAttribParameteriAMD = cast[proc (index: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glVertexAttribParameteriAMD"))


proc load_GL_AMD_multi_draw_indirect(load: proc) =
  if not GLAD_GL_AMD_multi_draw_indirect: return
  glMultiDrawArraysIndirectAMD = cast[proc (mode: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawArraysIndirectAMD"))
  glMultiDrawElementsIndirectAMD = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, primcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawElementsIndirectAMD"))


proc load_GL_AMD_name_gen_delete(load: proc) =
  if not GLAD_GL_AMD_name_gen_delete: return
  glGenNamesAMD = cast[proc (identifier: GLenum, num: GLuint, names: ptr GLuint) {.stdcall.}](load("glGenNamesAMD"))
  glDeleteNamesAMD = cast[proc (identifier: GLenum, num: GLuint, names: ptr GLuint) {.stdcall.}](load("glDeleteNamesAMD"))
  glIsNameAMD = cast[proc (identifier: GLenum, name: GLuint): GLboolean {.stdcall.}](load("glIsNameAMD"))


proc load_GL_AMD_occlusion_query_event(load: proc) =
  if not GLAD_GL_AMD_occlusion_query_event: return
  glQueryObjectParameteruiAMD = cast[proc (target: GLenum, id: GLuint, pname: GLenum, param: GLuint) {.stdcall.}](load("glQueryObjectParameteruiAMD"))


proc load_GL_AMD_performance_monitor(load: proc) =
  if not GLAD_GL_AMD_performance_monitor: return
  glGetPerfMonitorGroupsAMD = cast[proc (numGroups: ptr GLint, groupsSize: GLsizei, groups: ptr GLuint) {.stdcall.}](load("glGetPerfMonitorGroupsAMD"))
  glGetPerfMonitorCountersAMD = cast[proc (group: GLuint, numCounters: ptr GLint, maxActiveCounters: ptr GLint, counterSize: GLsizei, counters: ptr GLuint) {.stdcall.}](load("glGetPerfMonitorCountersAMD"))
  glGetPerfMonitorGroupStringAMD = cast[proc (group: GLuint, bufSize: GLsizei, length: ptr GLsizei, groupString: cstring) {.stdcall.}](load("glGetPerfMonitorGroupStringAMD"))
  glGetPerfMonitorCounterStringAMD = cast[proc (group: GLuint, counter: GLuint, bufSize: GLsizei, length: ptr GLsizei, counterString: cstring) {.stdcall.}](load("glGetPerfMonitorCounterStringAMD"))
  glGetPerfMonitorCounterInfoAMD = cast[proc (group: GLuint, counter: GLuint, pname: GLenum, data: pointer) {.stdcall.}](load("glGetPerfMonitorCounterInfoAMD"))
  glGenPerfMonitorsAMD = cast[proc (n: GLsizei, monitors: ptr GLuint) {.stdcall.}](load("glGenPerfMonitorsAMD"))
  glDeletePerfMonitorsAMD = cast[proc (n: GLsizei, monitors: ptr GLuint) {.stdcall.}](load("glDeletePerfMonitorsAMD"))
  glSelectPerfMonitorCountersAMD = cast[proc (monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: ptr GLuint) {.stdcall.}](load("glSelectPerfMonitorCountersAMD"))
  glBeginPerfMonitorAMD = cast[proc (monitor: GLuint) {.stdcall.}](load("glBeginPerfMonitorAMD"))
  glEndPerfMonitorAMD = cast[proc (monitor: GLuint) {.stdcall.}](load("glEndPerfMonitorAMD"))
  glGetPerfMonitorCounterDataAMD = cast[proc (monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: ptr GLuint, bytesWritten: ptr GLint) {.stdcall.}](load("glGetPerfMonitorCounterDataAMD"))


proc load_GL_AMD_sample_positions(load: proc) =
  if not GLAD_GL_AMD_sample_positions: return
  glSetMultisamplefvAMD = cast[proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}](load("glSetMultisamplefvAMD"))


proc load_GL_AMD_sparse_texture(load: proc) =
  if not GLAD_GL_AMD_sparse_texture: return
  glTexStorageSparseAMD = cast[proc (target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) {.stdcall.}](load("glTexStorageSparseAMD"))
  glTextureStorageSparseAMD = cast[proc (texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) {.stdcall.}](load("glTextureStorageSparseAMD"))


proc load_GL_AMD_stencil_operation_extended(load: proc) =
  if not GLAD_GL_AMD_stencil_operation_extended: return
  glStencilOpValueAMD = cast[proc (face: GLenum, value: GLuint) {.stdcall.}](load("glStencilOpValueAMD"))


proc load_GL_AMD_vertex_shader_tessellator(load: proc) =
  if not GLAD_GL_AMD_vertex_shader_tessellator: return
  glTessellationFactorAMD = cast[proc (factor: GLfloat) {.stdcall.}](load("glTessellationFactorAMD"))
  glTessellationModeAMD = cast[proc (mode: GLenum) {.stdcall.}](load("glTessellationModeAMD"))


proc load_GL_APPLE_element_array(load: proc) =
  if not GLAD_GL_APPLE_element_array: return
  glElementPointerAPPLE = cast[proc (`type`: GLenum, pointer: pointer) {.stdcall.}](load("glElementPointerAPPLE"))
  glDrawElementArrayAPPLE = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}](load("glDrawElementArrayAPPLE"))
  glDrawRangeElementArrayAPPLE = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, first: GLint, count: GLsizei) {.stdcall.}](load("glDrawRangeElementArrayAPPLE"))
  glMultiDrawElementArrayAPPLE = cast[proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei) {.stdcall.}](load("glMultiDrawElementArrayAPPLE"))
  glMultiDrawRangeElementArrayAPPLE = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei) {.stdcall.}](load("glMultiDrawRangeElementArrayAPPLE"))


proc load_GL_APPLE_fence(load: proc) =
  if not GLAD_GL_APPLE_fence: return
  glGenFencesAPPLE = cast[proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}](load("glGenFencesAPPLE"))
  glDeleteFencesAPPLE = cast[proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}](load("glDeleteFencesAPPLE"))
  glSetFenceAPPLE = cast[proc (fence: GLuint) {.stdcall.}](load("glSetFenceAPPLE"))
  glIsFenceAPPLE = cast[proc (fence: GLuint): GLboolean {.stdcall.}](load("glIsFenceAPPLE"))
  glTestFenceAPPLE = cast[proc (fence: GLuint): GLboolean {.stdcall.}](load("glTestFenceAPPLE"))
  glFinishFenceAPPLE = cast[proc (fence: GLuint) {.stdcall.}](load("glFinishFenceAPPLE"))
  glTestObjectAPPLE = cast[proc (`object`: GLenum, name: GLuint): GLboolean {.stdcall.}](load("glTestObjectAPPLE"))
  glFinishObjectAPPLE = cast[proc (`object`: GLenum, name: GLint) {.stdcall.}](load("glFinishObjectAPPLE"))


proc load_GL_APPLE_flush_buffer_range(load: proc) =
  if not GLAD_GL_APPLE_flush_buffer_range: return
  glBufferParameteriAPPLE = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glBufferParameteriAPPLE"))
  glFlushMappedBufferRangeAPPLE = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glFlushMappedBufferRangeAPPLE"))


proc load_GL_APPLE_object_purgeable(load: proc) =
  if not GLAD_GL_APPLE_object_purgeable: return
  glObjectPurgeableAPPLE = cast[proc (objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}](load("glObjectPurgeableAPPLE"))
  glObjectUnpurgeableAPPLE = cast[proc (objectType: GLenum, name: GLuint, option: GLenum): GLenum {.stdcall.}](load("glObjectUnpurgeableAPPLE"))
  glGetObjectParameterivAPPLE = cast[proc (objectType: GLenum, name: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetObjectParameterivAPPLE"))


proc load_GL_APPLE_texture_range(load: proc) =
  if not GLAD_GL_APPLE_texture_range: return
  glTextureRangeAPPLE = cast[proc (target: GLenum, length: GLsizei, pointer: pointer) {.stdcall.}](load("glTextureRangeAPPLE"))
  glGetTexParameterPointervAPPLE = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetTexParameterPointervAPPLE"))


proc load_GL_APPLE_vertex_array_object(load: proc) =
  if not GLAD_GL_APPLE_vertex_array_object: return
  glBindVertexArrayAPPLE = cast[proc (array: GLuint) {.stdcall.}](load("glBindVertexArrayAPPLE"))
  glDeleteVertexArraysAPPLE = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glDeleteVertexArraysAPPLE"))
  glGenVertexArraysAPPLE = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glGenVertexArraysAPPLE"))
  glIsVertexArrayAPPLE = cast[proc (array: GLuint): GLboolean {.stdcall.}](load("glIsVertexArrayAPPLE"))


proc load_GL_APPLE_vertex_array_range(load: proc) =
  if not GLAD_GL_APPLE_vertex_array_range: return
  glVertexArrayRangeAPPLE = cast[proc (length: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexArrayRangeAPPLE"))
  glFlushVertexArrayRangeAPPLE = cast[proc (length: GLsizei, pointer: pointer) {.stdcall.}](load("glFlushVertexArrayRangeAPPLE"))
  glVertexArrayParameteriAPPLE = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glVertexArrayParameteriAPPLE"))


proc load_GL_APPLE_vertex_program_evaluators(load: proc) =
  if not GLAD_GL_APPLE_vertex_program_evaluators: return
  glEnableVertexAttribAPPLE = cast[proc (index: GLuint, pname: GLenum) {.stdcall.}](load("glEnableVertexAttribAPPLE"))
  glDisableVertexAttribAPPLE = cast[proc (index: GLuint, pname: GLenum) {.stdcall.}](load("glDisableVertexAttribAPPLE"))
  glIsVertexAttribEnabledAPPLE = cast[proc (index: GLuint, pname: GLenum): GLboolean {.stdcall.}](load("glIsVertexAttribEnabledAPPLE"))
  glMapVertexAttrib1dAPPLE = cast[proc (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: ptr GLdouble) {.stdcall.}](load("glMapVertexAttrib1dAPPLE"))
  glMapVertexAttrib1fAPPLE = cast[proc (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: ptr GLfloat) {.stdcall.}](load("glMapVertexAttrib1fAPPLE"))
  glMapVertexAttrib2dAPPLE = cast[proc (index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: ptr GLdouble) {.stdcall.}](load("glMapVertexAttrib2dAPPLE"))
  glMapVertexAttrib2fAPPLE = cast[proc (index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: ptr GLfloat) {.stdcall.}](load("glMapVertexAttrib2fAPPLE"))


proc load_GL_ARB_ES2_compatibility(load: proc) =
  if not GLAD_GL_ARB_ES2_compatibility: return
  glReleaseShaderCompiler = cast[proc () {.stdcall.}](load("glReleaseShaderCompiler"))
  glShaderBinary = cast[proc (count: GLsizei, shaders: ptr GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glShaderBinary"))
  glGetShaderPrecisionFormat = cast[proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.stdcall.}](load("glGetShaderPrecisionFormat"))
  glDepthRangef = cast[proc (n: GLfloat, f: GLfloat) {.stdcall.}](load("glDepthRangef"))
  glClearDepthf = cast[proc (d: GLfloat) {.stdcall.}](load("glClearDepthf"))


proc load_GL_ARB_ES3_1_compatibility(load: proc) =
  if not GLAD_GL_ARB_ES3_1_compatibility: return
  glMemoryBarrierByRegion = cast[proc (barriers: GLbitfield) {.stdcall.}](load("glMemoryBarrierByRegion"))


proc load_GL_ARB_ES3_2_compatibility(load: proc) =
  if not GLAD_GL_ARB_ES3_2_compatibility: return
  glPrimitiveBoundingBoxARB = cast[proc (minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat) {.stdcall.}](load("glPrimitiveBoundingBoxARB"))


proc load_GL_ARB_base_instance(load: proc) =
  if not GLAD_GL_ARB_base_instance: return
  glDrawArraysInstancedBaseInstance = cast[proc (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) {.stdcall.}](load("glDrawArraysInstancedBaseInstance"))
  glDrawElementsInstancedBaseInstance = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, baseinstance: GLuint) {.stdcall.}](load("glDrawElementsInstancedBaseInstance"))
  glDrawElementsInstancedBaseVertexBaseInstance = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) {.stdcall.}](load("glDrawElementsInstancedBaseVertexBaseInstance"))


proc load_GL_ARB_bindless_texture(load: proc) =
  if not GLAD_GL_ARB_bindless_texture: return
  glGetTextureHandleARB = cast[proc (texture: GLuint): GLuint64 {.stdcall.}](load("glGetTextureHandleARB"))
  glGetTextureSamplerHandleARB = cast[proc (texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}](load("glGetTextureSamplerHandleARB"))
  glMakeTextureHandleResidentARB = cast[proc (handle: GLuint64) {.stdcall.}](load("glMakeTextureHandleResidentARB"))
  glMakeTextureHandleNonResidentARB = cast[proc (handle: GLuint64) {.stdcall.}](load("glMakeTextureHandleNonResidentARB"))
  glGetImageHandleARB = cast[proc (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}](load("glGetImageHandleARB"))
  glMakeImageHandleResidentARB = cast[proc (handle: GLuint64, access: GLenum) {.stdcall.}](load("glMakeImageHandleResidentARB"))
  glMakeImageHandleNonResidentARB = cast[proc (handle: GLuint64) {.stdcall.}](load("glMakeImageHandleNonResidentARB"))
  glUniformHandleui64ARB = cast[proc (location: GLint, value: GLuint64) {.stdcall.}](load("glUniformHandleui64ARB"))
  glUniformHandleui64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glUniformHandleui64vARB"))
  glProgramUniformHandleui64ARB = cast[proc (program: GLuint, location: GLint, value: GLuint64) {.stdcall.}](load("glProgramUniformHandleui64ARB"))
  glProgramUniformHandleui64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64) {.stdcall.}](load("glProgramUniformHandleui64vARB"))
  glIsTextureHandleResidentARB = cast[proc (handle: GLuint64): GLboolean {.stdcall.}](load("glIsTextureHandleResidentARB"))
  glIsImageHandleResidentARB = cast[proc (handle: GLuint64): GLboolean {.stdcall.}](load("glIsImageHandleResidentARB"))
  glVertexAttribL1ui64ARB = cast[proc (index: GLuint, x: GLuint64EXT) {.stdcall.}](load("glVertexAttribL1ui64ARB"))
  glVertexAttribL1ui64vARB = cast[proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}](load("glVertexAttribL1ui64vARB"))
  glGetVertexAttribLui64vARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}](load("glGetVertexAttribLui64vARB"))


proc load_GL_ARB_blend_func_extended(load: proc) =
  if not GLAD_GL_ARB_blend_func_extended: return
  glBindFragDataLocationIndexed = cast[proc (program: GLuint, colorNumber: GLuint, index: GLuint, name: cstring) {.stdcall.}](load("glBindFragDataLocationIndexed"))
  glGetFragDataIndex = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetFragDataIndex"))


proc load_GL_ARB_buffer_storage(load: proc) =
  if not GLAD_GL_ARB_buffer_storage: return
  glBufferStorage = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}](load("glBufferStorage"))


proc load_GL_ARB_cl_event(load: proc) =
  if not GLAD_GL_ARB_cl_event: return
  glCreateSyncFromCLeventARB = cast[proc (context: ClContext, event: ClEvent, flags: GLbitfield): GLsync {.stdcall.}](load("glCreateSyncFromCLeventARB"))


proc load_GL_ARB_clear_buffer_object(load: proc) =
  if not GLAD_GL_ARB_clear_buffer_object: return
  glClearBufferData = cast[proc (target: GLenum, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearBufferData"))
  glClearBufferSubData = cast[proc (target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearBufferSubData"))


proc load_GL_ARB_clear_texture(load: proc) =
  if not GLAD_GL_ARB_clear_texture: return
  glClearTexImage = cast[proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearTexImage"))
  glClearTexSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearTexSubImage"))


proc load_GL_ARB_clip_control(load: proc) =
  if not GLAD_GL_ARB_clip_control: return
  glClipControl = cast[proc (origin: GLenum, depth: GLenum) {.stdcall.}](load("glClipControl"))


proc load_GL_ARB_color_buffer_float(load: proc) =
  if not GLAD_GL_ARB_color_buffer_float: return
  glClampColorARB = cast[proc (target: GLenum, clamp: GLenum) {.stdcall.}](load("glClampColorARB"))


proc load_GL_ARB_compute_shader(load: proc) =
  if not GLAD_GL_ARB_compute_shader: return
  glDispatchCompute = cast[proc (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) {.stdcall.}](load("glDispatchCompute"))
  glDispatchComputeIndirect = cast[proc (indirect: GLintptr) {.stdcall.}](load("glDispatchComputeIndirect"))


proc load_GL_ARB_compute_variable_group_size(load: proc) =
  if not GLAD_GL_ARB_compute_variable_group_size: return
  glDispatchComputeGroupSizeARB = cast[proc (num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) {.stdcall.}](load("glDispatchComputeGroupSizeARB"))


proc load_GL_ARB_copy_buffer(load: proc) =
  if not GLAD_GL_ARB_copy_buffer: return
  glCopyBufferSubData = cast[proc (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glCopyBufferSubData"))


proc load_GL_ARB_copy_image(load: proc) =
  if not GLAD_GL_ARB_copy_image: return
  glCopyImageSubData = cast[proc (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) {.stdcall.}](load("glCopyImageSubData"))


proc load_GL_ARB_debug_output(load: proc) =
  if not GLAD_GL_ARB_debug_output: return
  glDebugMessageControlARB = cast[proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}](load("glDebugMessageControlARB"))
  glDebugMessageInsertARB = cast[proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.stdcall.}](load("glDebugMessageInsertARB"))
  glDebugMessageCallbackARB = cast[proc (callback: GLDEBUGPROCARB, userParam: pointer) {.stdcall.}](load("glDebugMessageCallbackARB"))
  glGetDebugMessageLogARB = cast[proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](load("glGetDebugMessageLogARB"))


proc load_GL_ARB_direct_state_access(load: proc) =
  if not GLAD_GL_ARB_direct_state_access: return
  glCreateTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glCreateTransformFeedbacks"))
  glTransformFeedbackBufferBase = cast[proc (xfb: GLuint, index: GLuint, buffer: GLuint) {.stdcall.}](load("glTransformFeedbackBufferBase"))
  glTransformFeedbackBufferRange = cast[proc (xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glTransformFeedbackBufferRange"))
  glGetTransformFeedbackiv = cast[proc (xfb: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetTransformFeedbackiv"))
  glGetTransformFeedbacki_v2 = cast[proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint) {.stdcall.}](load("glGetTransformFeedbacki_v2"))
  glGetTransformFeedbacki64_v = cast[proc (xfb: GLuint, pname: GLenum, index: GLuint, param: ptr GLint64) {.stdcall.}](load("glGetTransformFeedbacki64_v"))
  glCreateBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glCreateBuffers"))
  glNamedBufferStorage = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}](load("glNamedBufferStorage"))
  glNamedBufferData = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}](load("glNamedBufferData"))
  glNamedBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glNamedBufferSubData"))
  glCopyNamedBufferSubData = cast[proc (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glCopyNamedBufferSubData"))
  glClearNamedBufferData = cast[proc (buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearNamedBufferData"))
  glClearNamedBufferSubData = cast[proc (buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearNamedBufferSubData"))
  glMapNamedBuffer = cast[proc (buffer: GLuint, access: GLenum): pointer {.stdcall.}](load("glMapNamedBuffer"))
  glMapNamedBufferRange = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](load("glMapNamedBufferRange"))
  glUnmapNamedBuffer = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glUnmapNamedBuffer"))
  glFlushMappedNamedBufferRange = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glFlushMappedNamedBufferRange"))
  glGetNamedBufferParameteriv = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedBufferParameteriv"))
  glGetNamedBufferParameteri64v = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetNamedBufferParameteri64v"))
  glGetNamedBufferPointerv = cast[proc (buffer: GLuint, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetNamedBufferPointerv"))
  glGetNamedBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glGetNamedBufferSubData"))
  glCreateFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glCreateFramebuffers"))
  glNamedFramebufferRenderbuffer = cast[proc (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glNamedFramebufferRenderbuffer"))
  glNamedFramebufferParameteri = cast[proc (framebuffer: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glNamedFramebufferParameteri"))
  glNamedFramebufferTexture = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glNamedFramebufferTexture"))
  glNamedFramebufferTextureLayer = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glNamedFramebufferTextureLayer"))
  glNamedFramebufferDrawBuffer = cast[proc (framebuffer: GLuint, buf: GLenum) {.stdcall.}](load("glNamedFramebufferDrawBuffer"))
  glNamedFramebufferDrawBuffers = cast[proc (framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glNamedFramebufferDrawBuffers"))
  glNamedFramebufferReadBuffer = cast[proc (framebuffer: GLuint, src: GLenum) {.stdcall.}](load("glNamedFramebufferReadBuffer"))
  glInvalidateNamedFramebufferData = cast[proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}](load("glInvalidateNamedFramebufferData"))
  glInvalidateNamedFramebufferSubData = cast[proc (framebuffer: GLuint, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glInvalidateNamedFramebufferSubData"))
  glClearNamedFramebufferiv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLint) {.stdcall.}](load("glClearNamedFramebufferiv"))
  glClearNamedFramebufferuiv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLuint) {.stdcall.}](load("glClearNamedFramebufferuiv"))
  glClearNamedFramebufferfv = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: ptr GLfloat) {.stdcall.}](load("glClearNamedFramebufferfv"))
  glClearNamedFramebufferfi = cast[proc (framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) {.stdcall.}](load("glClearNamedFramebufferfi"))
  glBlitNamedFramebuffer = cast[proc (readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glBlitNamedFramebuffer"))
  glCheckNamedFramebufferStatus = cast[proc (framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}](load("glCheckNamedFramebufferStatus"))
  glGetNamedFramebufferParameteriv = cast[proc (framebuffer: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetNamedFramebufferParameteriv"))
  glGetNamedFramebufferAttachmentParameteriv = cast[proc (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedFramebufferAttachmentParameteriv"))
  glCreateRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glCreateRenderbuffers"))
  glNamedRenderbufferStorage = cast[proc (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorage"))
  glNamedRenderbufferStorageMultisample = cast[proc (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorageMultisample"))
  glGetNamedRenderbufferParameteriv = cast[proc (renderbuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedRenderbufferParameteriv"))
  glCreateTextures = cast[proc (target: GLenum, n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glCreateTextures"))
  glTextureBuffer = cast[proc (texture: GLuint, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glTextureBuffer"))
  glTextureBufferRange = cast[proc (texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glTextureBufferRange"))
  glTextureStorage1D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}](load("glTextureStorage1D"))
  glTextureStorage2D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTextureStorage2D"))
  glTextureStorage3D = cast[proc (texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTextureStorage3D"))
  glTextureStorage2DMultisample = cast[proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTextureStorage2DMultisample"))
  glTextureStorage3DMultisample = cast[proc (texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTextureStorage3DMultisample"))
  glTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage1D"))
  glTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage2D"))
  glTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage3D"))
  glCompressedTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTextureSubImage1D"))
  glCompressedTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTextureSubImage2D"))
  glCompressedTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTextureSubImage3D"))
  glCopyTextureSubImage1D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyTextureSubImage1D"))
  glCopyTextureSubImage2D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTextureSubImage2D"))
  glCopyTextureSubImage3D = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTextureSubImage3D"))
  glTextureParameterf = cast[proc (texture: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}](load("glTextureParameterf"))
  glTextureParameterfv = cast[proc (texture: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glTextureParameterfv"))
  glTextureParameteri = cast[proc (texture: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glTextureParameteri"))
  glTextureParameterIiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTextureParameterIiv"))
  glTextureParameterIuiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glTextureParameterIuiv"))
  glTextureParameteriv = cast[proc (texture: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glTextureParameteriv"))
  glGenerateTextureMipmap = cast[proc (texture: GLuint) {.stdcall.}](load("glGenerateTextureMipmap"))
  glBindTextureUnit = cast[proc (unit: GLuint, texture: GLuint) {.stdcall.}](load("glBindTextureUnit"))
  glGetTextureImage = cast[proc (texture: GLuint, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetTextureImage"))
  glGetCompressedTextureImage = cast[proc (texture: GLuint, level: GLint, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetCompressedTextureImage"))
  glGetTextureLevelParameterfv = cast[proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTextureLevelParameterfv"))
  glGetTextureLevelParameteriv = cast[proc (texture: GLuint, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureLevelParameteriv"))
  glGetTextureParameterfv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTextureParameterfv"))
  glGetTextureParameterIiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureParameterIiv"))
  glGetTextureParameterIuiv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetTextureParameterIuiv"))
  glGetTextureParameteriv = cast[proc (texture: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureParameteriv"))
  glCreateVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glCreateVertexArrays"))
  glDisableVertexArrayAttrib = cast[proc (vaobj: GLuint, index: GLuint) {.stdcall.}](load("glDisableVertexArrayAttrib"))
  glEnableVertexArrayAttrib = cast[proc (vaobj: GLuint, index: GLuint) {.stdcall.}](load("glEnableVertexArrayAttrib"))
  glVertexArrayElementBuffer = cast[proc (vaobj: GLuint, buffer: GLuint) {.stdcall.}](load("glVertexArrayElementBuffer"))
  glVertexArrayVertexBuffer = cast[proc (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}](load("glVertexArrayVertexBuffer"))
  glVertexArrayVertexBuffers = cast[proc (vaobj: GLuint, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.stdcall.}](load("glVertexArrayVertexBuffers"))
  glVertexArrayAttribBinding = cast[proc (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) {.stdcall.}](load("glVertexArrayAttribBinding"))
  glVertexArrayAttribFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayAttribFormat"))
  glVertexArrayAttribIFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayAttribIFormat"))
  glVertexArrayAttribLFormat = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayAttribLFormat"))
  glVertexArrayBindingDivisor = cast[proc (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexArrayBindingDivisor"))
  glGetVertexArrayiv = cast[proc (vaobj: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetVertexArrayiv"))
  glGetVertexArrayIndexediv = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetVertexArrayIndexediv"))
  glGetVertexArrayIndexed64iv = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint64) {.stdcall.}](load("glGetVertexArrayIndexed64iv"))
  glCreateSamplers = cast[proc (n: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glCreateSamplers"))
  glCreateProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glCreateProgramPipelines"))
  glCreateQueries = cast[proc (target: GLenum, n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glCreateQueries"))
  glGetQueryBufferObjecti64v = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjecti64v"))
  glGetQueryBufferObjectiv = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjectiv"))
  glGetQueryBufferObjectui64v = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjectui64v"))
  glGetQueryBufferObjectuiv = cast[proc (id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) {.stdcall.}](load("glGetQueryBufferObjectuiv"))


proc load_GL_ARB_draw_buffers(load: proc) =
  if not GLAD_GL_ARB_draw_buffers: return
  glDrawBuffersARB = cast[proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glDrawBuffersARB"))


proc load_GL_ARB_draw_buffers_blend(load: proc) =
  if not GLAD_GL_ARB_draw_buffers_blend: return
  glBlendEquationiARB = cast[proc (buf: GLuint, mode: GLenum) {.stdcall.}](load("glBlendEquationiARB"))
  glBlendEquationSeparateiARB = cast[proc (buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparateiARB"))
  glBlendFunciARB = cast[proc (buf: GLuint, src: GLenum, dst: GLenum) {.stdcall.}](load("glBlendFunciARB"))
  glBlendFuncSeparateiARB = cast[proc (buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparateiARB"))


proc load_GL_ARB_draw_elements_base_vertex(load: proc) =
  if not GLAD_GL_ARB_draw_elements_base_vertex: return
  glDrawElementsBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}](load("glDrawElementsBaseVertex"))
  glDrawRangeElementsBaseVertex = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer, basevertex: GLint) {.stdcall.}](load("glDrawRangeElementsBaseVertex"))
  glDrawElementsInstancedBaseVertex = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, instancecount: GLsizei, basevertex: GLint) {.stdcall.}](load("glDrawElementsInstancedBaseVertex"))
  glMultiDrawElementsBaseVertex = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, drawcount: GLsizei, basevertex: ptr GLint) {.stdcall.}](load("glMultiDrawElementsBaseVertex"))


proc load_GL_ARB_draw_indirect(load: proc) =
  if not GLAD_GL_ARB_draw_indirect: return
  glDrawArraysIndirect = cast[proc (mode: GLenum, indirect: pointer) {.stdcall.}](load("glDrawArraysIndirect"))
  glDrawElementsIndirect = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer) {.stdcall.}](load("glDrawElementsIndirect"))


proc load_GL_ARB_draw_instanced(load: proc) =
  if not GLAD_GL_ARB_draw_instanced: return
  glDrawArraysInstancedARB = cast[proc (mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) {.stdcall.}](load("glDrawArraysInstancedARB"))
  glDrawElementsInstancedARB = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei) {.stdcall.}](load("glDrawElementsInstancedARB"))


proc load_GL_ARB_fragment_program(load: proc) =
  if not GLAD_GL_ARB_fragment_program: return
  glProgramStringARB = cast[proc (target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.stdcall.}](load("glProgramStringARB"))
  glBindProgramARB = cast[proc (target: GLenum, program: GLuint) {.stdcall.}](load("glBindProgramARB"))
  glDeleteProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}](load("glDeleteProgramsARB"))
  glGenProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}](load("glGenProgramsARB"))
  glProgramEnvParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glProgramEnvParameter4dARB"))
  glProgramEnvParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glProgramEnvParameter4dvARB"))
  glProgramEnvParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glProgramEnvParameter4fARB"))
  glProgramEnvParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glProgramEnvParameter4fvARB"))
  glProgramLocalParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glProgramLocalParameter4dARB"))
  glProgramLocalParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glProgramLocalParameter4dvARB"))
  glProgramLocalParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glProgramLocalParameter4fARB"))
  glProgramLocalParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glProgramLocalParameter4fvARB"))
  glGetProgramEnvParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glGetProgramEnvParameterdvARB"))
  glGetProgramEnvParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glGetProgramEnvParameterfvARB"))
  glGetProgramLocalParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glGetProgramLocalParameterdvARB"))
  glGetProgramLocalParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glGetProgramLocalParameterfvARB"))
  glGetProgramivARB = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramivARB"))
  glGetProgramStringARB = cast[proc (target: GLenum, pname: GLenum, string: pointer) {.stdcall.}](load("glGetProgramStringARB"))
  glIsProgramARB = cast[proc (program: GLuint): GLboolean {.stdcall.}](load("glIsProgramARB"))


proc load_GL_ARB_framebuffer_no_attachments(load: proc) =
  if not GLAD_GL_ARB_framebuffer_no_attachments: return
  glFramebufferParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glFramebufferParameteri"))
  glGetFramebufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferParameteriv"))


proc load_GL_ARB_framebuffer_object(load: proc) =
  if not GLAD_GL_ARB_framebuffer_object: return
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.stdcall.}](load("glIsRenderbuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glBindRenderbuffer"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glDeleteRenderbuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glGenRenderbuffers"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorage"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetRenderbufferParameteriv"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.stdcall.}](load("glIsFramebuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.stdcall.}](load("glBindFramebuffer"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glDeleteFramebuffers"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glGenFramebuffers"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.stdcall.}](load("glCheckFramebufferStatus"))
  glFramebufferTexture1D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture1D"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture2D"))
  glFramebufferTexture3D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}](load("glFramebufferTexture3D"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glFramebufferRenderbuffer"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferAttachmentParameteriv"))
  glGenerateMipmap = cast[proc (target: GLenum) {.stdcall.}](load("glGenerateMipmap"))
  glBlitFramebuffer = cast[proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glBlitFramebuffer"))
  glRenderbufferStorageMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageMultisample"))
  glFramebufferTextureLayer = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glFramebufferTextureLayer"))


proc load_GL_ARB_geometry_shader4(load: proc) =
  if not GLAD_GL_ARB_geometry_shader4: return
  glProgramParameteriARB = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteriARB"))
  glFramebufferTextureARB = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTextureARB"))
  glFramebufferTextureLayerARB = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glFramebufferTextureLayerARB"))
  glFramebufferTextureFaceARB = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) {.stdcall.}](load("glFramebufferTextureFaceARB"))


proc load_GL_ARB_get_program_binary(load: proc) =
  if not GLAD_GL_ARB_get_program_binary: return
  glGetProgramBinary = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, binaryFormat: ptr GLenum, binary: pointer) {.stdcall.}](load("glGetProgramBinary"))
  glProgramBinary = cast[proc (program: GLuint, binaryFormat: GLenum, binary: pointer, length: GLsizei) {.stdcall.}](load("glProgramBinary"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteri"))


proc load_GL_ARB_get_texture_sub_image(load: proc) =
  if not GLAD_GL_ARB_get_texture_sub_image: return
  glGetTextureSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetTextureSubImage"))
  glGetCompressedTextureSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: pointer) {.stdcall.}](load("glGetCompressedTextureSubImage"))


proc load_GL_ARB_gl_spirv(load: proc) =
  if not GLAD_GL_ARB_gl_spirv: return
  glSpecializeShaderARB = cast[proc (shader: GLuint, pEntryPoint: cstring, numSpecializationConstants: GLuint, pConstantIndex: ptr GLuint, pConstantValue: ptr GLuint) {.stdcall.}](load("glSpecializeShaderARB"))


proc load_GL_ARB_gpu_shader_fp64(load: proc) =
  if not GLAD_GL_ARB_gpu_shader_fp64: return
  glUniform1d = cast[proc (location: GLint, x: GLdouble) {.stdcall.}](load("glUniform1d"))
  glUniform2d = cast[proc (location: GLint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glUniform2d"))
  glUniform3d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glUniform3d"))
  glUniform4d = cast[proc (location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glUniform4d"))
  glUniform1dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform1dv"))
  glUniform2dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform2dv"))
  glUniform3dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform3dv"))
  glUniform4dv = cast[proc (location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glUniform4dv"))
  glUniformMatrix2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2dv"))
  glUniformMatrix3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3dv"))
  glUniformMatrix4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4dv"))
  glUniformMatrix2x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2x3dv"))
  glUniformMatrix2x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix2x4dv"))
  glUniformMatrix3x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3x2dv"))
  glUniformMatrix3x4dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix3x4dv"))
  glUniformMatrix4x2dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4x2dv"))
  glUniformMatrix4x3dv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glUniformMatrix4x3dv"))
  glGetUniformdv = cast[proc (program: GLuint, location: GLint, params: ptr GLdouble) {.stdcall.}](load("glGetUniformdv"))


proc load_GL_ARB_gpu_shader_int64(load: proc) =
  if not GLAD_GL_ARB_gpu_shader_int64: return
  glUniform1i64ARB = cast[proc (location: GLint, x: GLint64) {.stdcall.}](load("glUniform1i64ARB"))
  glUniform2i64ARB = cast[proc (location: GLint, x: GLint64, y: GLint64) {.stdcall.}](load("glUniform2i64ARB"))
  glUniform3i64ARB = cast[proc (location: GLint, x: GLint64, y: GLint64, z: GLint64) {.stdcall.}](load("glUniform3i64ARB"))
  glUniform4i64ARB = cast[proc (location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) {.stdcall.}](load("glUniform4i64ARB"))
  glUniform1i64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glUniform1i64vARB"))
  glUniform2i64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glUniform2i64vARB"))
  glUniform3i64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glUniform3i64vARB"))
  glUniform4i64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glUniform4i64vARB"))
  glUniform1ui64ARB = cast[proc (location: GLint, x: GLuint64) {.stdcall.}](load("glUniform1ui64ARB"))
  glUniform2ui64ARB = cast[proc (location: GLint, x: GLuint64, y: GLuint64) {.stdcall.}](load("glUniform2ui64ARB"))
  glUniform3ui64ARB = cast[proc (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) {.stdcall.}](load("glUniform3ui64ARB"))
  glUniform4ui64ARB = cast[proc (location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) {.stdcall.}](load("glUniform4ui64ARB"))
  glUniform1ui64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glUniform1ui64vARB"))
  glUniform2ui64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glUniform2ui64vARB"))
  glUniform3ui64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glUniform3ui64vARB"))
  glUniform4ui64vARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glUniform4ui64vARB"))
  glGetUniformi64vARB = cast[proc (program: GLuint, location: GLint, params: ptr GLint64) {.stdcall.}](load("glGetUniformi64vARB"))
  glGetUniformui64vARB = cast[proc (program: GLuint, location: GLint, params: ptr GLuint64) {.stdcall.}](load("glGetUniformui64vARB"))
  glGetnUniformi64vARB = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint64) {.stdcall.}](load("glGetnUniformi64vARB"))
  glGetnUniformui64vARB = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint64) {.stdcall.}](load("glGetnUniformui64vARB"))
  glProgramUniform1i64ARB = cast[proc (program: GLuint, location: GLint, x: GLint64) {.stdcall.}](load("glProgramUniform1i64ARB"))
  glProgramUniform2i64ARB = cast[proc (program: GLuint, location: GLint, x: GLint64, y: GLint64) {.stdcall.}](load("glProgramUniform2i64ARB"))
  glProgramUniform3i64ARB = cast[proc (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64) {.stdcall.}](load("glProgramUniform3i64ARB"))
  glProgramUniform4i64ARB = cast[proc (program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64) {.stdcall.}](load("glProgramUniform4i64ARB"))
  glProgramUniform1i64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glProgramUniform1i64vARB"))
  glProgramUniform2i64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glProgramUniform2i64vARB"))
  glProgramUniform3i64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glProgramUniform3i64vARB"))
  glProgramUniform4i64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64) {.stdcall.}](load("glProgramUniform4i64vARB"))
  glProgramUniform1ui64ARB = cast[proc (program: GLuint, location: GLint, x: GLuint64) {.stdcall.}](load("glProgramUniform1ui64ARB"))
  glProgramUniform2ui64ARB = cast[proc (program: GLuint, location: GLint, x: GLuint64, y: GLuint64) {.stdcall.}](load("glProgramUniform2ui64ARB"))
  glProgramUniform3ui64ARB = cast[proc (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64) {.stdcall.}](load("glProgramUniform3ui64ARB"))
  glProgramUniform4ui64ARB = cast[proc (program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64) {.stdcall.}](load("glProgramUniform4ui64ARB"))
  glProgramUniform1ui64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glProgramUniform1ui64vARB"))
  glProgramUniform2ui64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glProgramUniform2ui64vARB"))
  glProgramUniform3ui64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glProgramUniform3ui64vARB"))
  glProgramUniform4ui64vARB = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glProgramUniform4ui64vARB"))


proc load_GL_ARB_imaging(load: proc) =
  if not GLAD_GL_ARB_imaging: return
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.stdcall.}](load("glBlendEquation"))
  glColorTable = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}](load("glColorTable"))
  glColorTableParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glColorTableParameterfv"))
  glColorTableParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glColorTableParameteriv"))
  glCopyColorTable = cast[proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyColorTable"))
  glGetColorTable = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}](load("glGetColorTable"))
  glGetColorTableParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetColorTableParameterfv"))
  glGetColorTableParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetColorTableParameteriv"))
  glColorSubTable = cast[proc (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glColorSubTable"))
  glCopyColorSubTable = cast[proc (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyColorSubTable"))
  glConvolutionFilter1D = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}](load("glConvolutionFilter1D"))
  glConvolutionFilter2D = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}](load("glConvolutionFilter2D"))
  glConvolutionParameterf = cast[proc (target: GLenum, pname: GLenum, params: GLfloat) {.stdcall.}](load("glConvolutionParameterf"))
  glConvolutionParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glConvolutionParameterfv"))
  glConvolutionParameteri = cast[proc (target: GLenum, pname: GLenum, params: GLint) {.stdcall.}](load("glConvolutionParameteri"))
  glConvolutionParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glConvolutionParameteriv"))
  glCopyConvolutionFilter1D = cast[proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyConvolutionFilter1D"))
  glCopyConvolutionFilter2D = cast[proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyConvolutionFilter2D"))
  glGetConvolutionFilter = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}](load("glGetConvolutionFilter"))
  glGetConvolutionParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetConvolutionParameterfv"))
  glGetConvolutionParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetConvolutionParameteriv"))
  glGetSeparableFilter = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer) {.stdcall.}](load("glGetSeparableFilter"))
  glSeparableFilter2D = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer) {.stdcall.}](load("glSeparableFilter2D"))
  glGetHistogram = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}](load("glGetHistogram"))
  glGetHistogramParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetHistogramParameterfv"))
  glGetHistogramParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetHistogramParameteriv"))
  glGetMinmax = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}](load("glGetMinmax"))
  glGetMinmaxParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMinmaxParameterfv"))
  glGetMinmaxParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMinmaxParameteriv"))
  glHistogram = cast[proc (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) {.stdcall.}](load("glHistogram"))
  glMinmax = cast[proc (target: GLenum, internalformat: GLenum, sink: GLboolean) {.stdcall.}](load("glMinmax"))
  glResetHistogram = cast[proc (target: GLenum) {.stdcall.}](load("glResetHistogram"))
  glResetMinmax = cast[proc (target: GLenum) {.stdcall.}](load("glResetMinmax"))


proc load_GL_ARB_indirect_parameters(load: proc) =
  if not GLAD_GL_ARB_indirect_parameters: return
  glMultiDrawArraysIndirectCountARB = cast[proc (mode: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawArraysIndirectCountARB"))
  glMultiDrawElementsIndirectCountARB = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawElementsIndirectCountARB"))


proc load_GL_ARB_instanced_arrays(load: proc) =
  if not GLAD_GL_ARB_instanced_arrays: return
  glVertexAttribDivisorARB = cast[proc (index: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexAttribDivisorARB"))


proc load_GL_ARB_internalformat_query(load: proc) =
  if not GLAD_GL_ARB_internalformat_query: return
  glGetInternalformativ = cast[proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetInternalformativ"))


proc load_GL_ARB_internalformat_query2(load: proc) =
  if not GLAD_GL_ARB_internalformat_query2: return
  glGetInternalformati64v = cast[proc (target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: ptr GLint64) {.stdcall.}](load("glGetInternalformati64v"))


proc load_GL_ARB_invalidate_subdata(load: proc) =
  if not GLAD_GL_ARB_invalidate_subdata: return
  glInvalidateTexSubImage = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glInvalidateTexSubImage"))
  glInvalidateTexImage = cast[proc (texture: GLuint, level: GLint) {.stdcall.}](load("glInvalidateTexImage"))
  glInvalidateBufferSubData = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glInvalidateBufferSubData"))
  glInvalidateBufferData = cast[proc (buffer: GLuint) {.stdcall.}](load("glInvalidateBufferData"))
  glInvalidateFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum) {.stdcall.}](load("glInvalidateFramebuffer"))
  glInvalidateSubFramebuffer = cast[proc (target: GLenum, numAttachments: GLsizei, attachments: ptr GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glInvalidateSubFramebuffer"))


proc load_GL_ARB_map_buffer_range(load: proc) =
  if not GLAD_GL_ARB_map_buffer_range: return
  glMapBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](load("glMapBufferRange"))
  glFlushMappedBufferRange = cast[proc (target: GLenum, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glFlushMappedBufferRange"))


proc load_GL_ARB_matrix_palette(load: proc) =
  if not GLAD_GL_ARB_matrix_palette: return
  glCurrentPaletteMatrixARB = cast[proc (index: GLint) {.stdcall.}](load("glCurrentPaletteMatrixARB"))
  glMatrixIndexubvARB = cast[proc (size: GLint, indices: ptr GLubyte) {.stdcall.}](load("glMatrixIndexubvARB"))
  glMatrixIndexusvARB = cast[proc (size: GLint, indices: ptr GLushort) {.stdcall.}](load("glMatrixIndexusvARB"))
  glMatrixIndexuivARB = cast[proc (size: GLint, indices: ptr GLuint) {.stdcall.}](load("glMatrixIndexuivARB"))
  glMatrixIndexPointerARB = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glMatrixIndexPointerARB"))


proc load_GL_ARB_multi_bind(load: proc) =
  if not GLAD_GL_ARB_multi_bind: return
  glBindBuffersBase = cast[proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glBindBuffersBase"))
  glBindBuffersRange = cast[proc (target: GLenum, first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, sizes: ptr GLsizeiptr) {.stdcall.}](load("glBindBuffersRange"))
  glBindTextures = cast[proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glBindTextures"))
  glBindSamplers = cast[proc (first: GLuint, count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glBindSamplers"))
  glBindImageTextures = cast[proc (first: GLuint, count: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glBindImageTextures"))
  glBindVertexBuffers = cast[proc (first: GLuint, count: GLsizei, buffers: ptr GLuint, offsets: ptr GLintptr, strides: ptr GLsizei) {.stdcall.}](load("glBindVertexBuffers"))


proc load_GL_ARB_multi_draw_indirect(load: proc) =
  if not GLAD_GL_ARB_multi_draw_indirect: return
  glMultiDrawArraysIndirect = cast[proc (mode: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawArraysIndirect"))
  glMultiDrawElementsIndirect = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawElementsIndirect"))


proc load_GL_ARB_multisample(load: proc) =
  if not GLAD_GL_ARB_multisample: return
  glSampleCoverageARB = cast[proc (value: GLfloat, invert: GLboolean) {.stdcall.}](load("glSampleCoverageARB"))


proc load_GL_ARB_multitexture(load: proc) =
  if not GLAD_GL_ARB_multitexture: return
  glActiveTextureARB = cast[proc (texture: GLenum) {.stdcall.}](load("glActiveTextureARB"))
  glClientActiveTextureARB = cast[proc (texture: GLenum) {.stdcall.}](load("glClientActiveTextureARB"))
  glMultiTexCoord1dARB = cast[proc (target: GLenum, s: GLdouble) {.stdcall.}](load("glMultiTexCoord1dARB"))
  glMultiTexCoord1dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.stdcall.}](load("glMultiTexCoord1dvARB"))
  glMultiTexCoord1fARB = cast[proc (target: GLenum, s: GLfloat) {.stdcall.}](load("glMultiTexCoord1fARB"))
  glMultiTexCoord1fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.stdcall.}](load("glMultiTexCoord1fvARB"))
  glMultiTexCoord1iARB = cast[proc (target: GLenum, s: GLint) {.stdcall.}](load("glMultiTexCoord1iARB"))
  glMultiTexCoord1ivARB = cast[proc (target: GLenum, v: ptr GLint) {.stdcall.}](load("glMultiTexCoord1ivARB"))
  glMultiTexCoord1sARB = cast[proc (target: GLenum, s: GLshort) {.stdcall.}](load("glMultiTexCoord1sARB"))
  glMultiTexCoord1svARB = cast[proc (target: GLenum, v: ptr GLshort) {.stdcall.}](load("glMultiTexCoord1svARB"))
  glMultiTexCoord2dARB = cast[proc (target: GLenum, s: GLdouble, t: GLdouble) {.stdcall.}](load("glMultiTexCoord2dARB"))
  glMultiTexCoord2dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.stdcall.}](load("glMultiTexCoord2dvARB"))
  glMultiTexCoord2fARB = cast[proc (target: GLenum, s: GLfloat, t: GLfloat) {.stdcall.}](load("glMultiTexCoord2fARB"))
  glMultiTexCoord2fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.stdcall.}](load("glMultiTexCoord2fvARB"))
  glMultiTexCoord2iARB = cast[proc (target: GLenum, s: GLint, t: GLint) {.stdcall.}](load("glMultiTexCoord2iARB"))
  glMultiTexCoord2ivARB = cast[proc (target: GLenum, v: ptr GLint) {.stdcall.}](load("glMultiTexCoord2ivARB"))
  glMultiTexCoord2sARB = cast[proc (target: GLenum, s: GLshort, t: GLshort) {.stdcall.}](load("glMultiTexCoord2sARB"))
  glMultiTexCoord2svARB = cast[proc (target: GLenum, v: ptr GLshort) {.stdcall.}](load("glMultiTexCoord2svARB"))
  glMultiTexCoord3dARB = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) {.stdcall.}](load("glMultiTexCoord3dARB"))
  glMultiTexCoord3dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.stdcall.}](load("glMultiTexCoord3dvARB"))
  glMultiTexCoord3fARB = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) {.stdcall.}](load("glMultiTexCoord3fARB"))
  glMultiTexCoord3fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.stdcall.}](load("glMultiTexCoord3fvARB"))
  glMultiTexCoord3iARB = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint) {.stdcall.}](load("glMultiTexCoord3iARB"))
  glMultiTexCoord3ivARB = cast[proc (target: GLenum, v: ptr GLint) {.stdcall.}](load("glMultiTexCoord3ivARB"))
  glMultiTexCoord3sARB = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort) {.stdcall.}](load("glMultiTexCoord3sARB"))
  glMultiTexCoord3svARB = cast[proc (target: GLenum, v: ptr GLshort) {.stdcall.}](load("glMultiTexCoord3svARB"))
  glMultiTexCoord4dARB = cast[proc (target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) {.stdcall.}](load("glMultiTexCoord4dARB"))
  glMultiTexCoord4dvARB = cast[proc (target: GLenum, v: ptr GLdouble) {.stdcall.}](load("glMultiTexCoord4dvARB"))
  glMultiTexCoord4fARB = cast[proc (target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) {.stdcall.}](load("glMultiTexCoord4fARB"))
  glMultiTexCoord4fvARB = cast[proc (target: GLenum, v: ptr GLfloat) {.stdcall.}](load("glMultiTexCoord4fvARB"))
  glMultiTexCoord4iARB = cast[proc (target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) {.stdcall.}](load("glMultiTexCoord4iARB"))
  glMultiTexCoord4ivARB = cast[proc (target: GLenum, v: ptr GLint) {.stdcall.}](load("glMultiTexCoord4ivARB"))
  glMultiTexCoord4sARB = cast[proc (target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) {.stdcall.}](load("glMultiTexCoord4sARB"))
  glMultiTexCoord4svARB = cast[proc (target: GLenum, v: ptr GLshort) {.stdcall.}](load("glMultiTexCoord4svARB"))


proc load_GL_ARB_occlusion_query(load: proc) =
  if not GLAD_GL_ARB_occlusion_query: return
  glGenQueriesARB = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenQueriesARB"))
  glDeleteQueriesARB = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteQueriesARB"))
  glIsQueryARB = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsQueryARB"))
  glBeginQueryARB = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBeginQueryARB"))
  glEndQueryARB = cast[proc (target: GLenum) {.stdcall.}](load("glEndQueryARB"))
  glGetQueryivARB = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryivARB"))
  glGetQueryObjectivARB = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryObjectivARB"))
  glGetQueryObjectuivARB = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetQueryObjectuivARB"))


proc load_GL_ARB_parallel_shader_compile(load: proc) =
  if not GLAD_GL_ARB_parallel_shader_compile: return
  glMaxShaderCompilerThreadsARB = cast[proc (count: GLuint) {.stdcall.}](load("glMaxShaderCompilerThreadsARB"))


proc load_GL_ARB_point_parameters(load: proc) =
  if not GLAD_GL_ARB_point_parameters: return
  glPointParameterfARB = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPointParameterfARB"))
  glPointParameterfvARB = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glPointParameterfvARB"))


proc load_GL_ARB_polygon_offset_clamp(load: proc) =
  if not GLAD_GL_ARB_polygon_offset_clamp: return
  glPolygonOffsetClamp = cast[proc (factor: GLfloat, units: GLfloat, clamp: GLfloat) {.stdcall.}](load("glPolygonOffsetClamp"))


proc load_GL_ARB_program_interface_query(load: proc) =
  if not GLAD_GL_ARB_program_interface_query: return
  glGetProgramInterfaceiv = cast[proc (program: GLuint, programInterface: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramInterfaceiv"))
  glGetProgramResourceIndex = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLuint {.stdcall.}](load("glGetProgramResourceIndex"))
  glGetProgramResourceName = cast[proc (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetProgramResourceName"))
  glGetProgramResourceiv = cast[proc (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLint) {.stdcall.}](load("glGetProgramResourceiv"))
  glGetProgramResourceLocation = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](load("glGetProgramResourceLocation"))
  glGetProgramResourceLocationIndex = cast[proc (program: GLuint, programInterface: GLenum, name: cstring): GLint {.stdcall.}](load("glGetProgramResourceLocationIndex"))


proc load_GL_ARB_provoking_vertex(load: proc) =
  if not GLAD_GL_ARB_provoking_vertex: return
  glProvokingVertex = cast[proc (mode: GLenum) {.stdcall.}](load("glProvokingVertex"))


proc load_GL_ARB_robustness(load: proc) =
  if not GLAD_GL_ARB_robustness: return
  glGetGraphicsResetStatusARB = cast[proc (): GLenum {.stdcall.}](load("glGetGraphicsResetStatusARB"))
  glGetnTexImageARB = cast[proc (target: GLenum, level: GLint, format: GLenum, `type`: GLenum, bufSize: GLsizei, img: pointer) {.stdcall.}](load("glGetnTexImageARB"))
  glReadnPixelsARB = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.stdcall.}](load("glReadnPixelsARB"))
  glGetnCompressedTexImageARB = cast[proc (target: GLenum, lod: GLint, bufSize: GLsizei, img: pointer) {.stdcall.}](load("glGetnCompressedTexImageARB"))
  glGetnUniformfvARB = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glGetnUniformfvARB"))
  glGetnUniformivARB = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetnUniformivARB"))
  glGetnUniformuivARB = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.stdcall.}](load("glGetnUniformuivARB"))
  glGetnUniformdvARB = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLdouble) {.stdcall.}](load("glGetnUniformdvARB"))
  glGetnMapdvARB = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glGetnMapdvARB"))
  glGetnMapfvARB = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glGetnMapfvARB"))
  glGetnMapivARB = cast[proc (target: GLenum, query: GLenum, bufSize: GLsizei, v: ptr GLint) {.stdcall.}](load("glGetnMapivARB"))
  glGetnPixelMapfvARB = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLfloat) {.stdcall.}](load("glGetnPixelMapfvARB"))
  glGetnPixelMapuivARB = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLuint) {.stdcall.}](load("glGetnPixelMapuivARB"))
  glGetnPixelMapusvARB = cast[proc (map: GLenum, bufSize: GLsizei, values: ptr GLushort) {.stdcall.}](load("glGetnPixelMapusvARB"))
  glGetnPolygonStippleARB = cast[proc (bufSize: GLsizei, pattern: ptr GLubyte) {.stdcall.}](load("glGetnPolygonStippleARB"))
  glGetnColorTableARB = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, table: pointer) {.stdcall.}](load("glGetnColorTableARB"))
  glGetnConvolutionFilterARB = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, bufSize: GLsizei, image: pointer) {.stdcall.}](load("glGetnConvolutionFilterARB"))
  glGetnSeparableFilterARB = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, rowBufSize: GLsizei, row: pointer, columnBufSize: GLsizei, column: pointer, span: pointer) {.stdcall.}](load("glGetnSeparableFilterARB"))
  glGetnHistogramARB = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}](load("glGetnHistogramARB"))
  glGetnMinmaxARB = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, bufSize: GLsizei, values: pointer) {.stdcall.}](load("glGetnMinmaxARB"))


proc load_GL_ARB_sample_locations(load: proc) =
  if not GLAD_GL_ARB_sample_locations: return
  glFramebufferSampleLocationsfvARB = cast[proc (target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glFramebufferSampleLocationsfvARB"))
  glNamedFramebufferSampleLocationsfvARB = cast[proc (framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glNamedFramebufferSampleLocationsfvARB"))
  glEvaluateDepthValuesARB = cast[proc () {.stdcall.}](load("glEvaluateDepthValuesARB"))


proc load_GL_ARB_sample_shading(load: proc) =
  if not GLAD_GL_ARB_sample_shading: return
  glMinSampleShadingARB = cast[proc (value: GLfloat) {.stdcall.}](load("glMinSampleShadingARB"))


proc load_GL_ARB_sampler_objects(load: proc) =
  if not GLAD_GL_ARB_sampler_objects: return
  glGenSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glGenSamplers"))
  glDeleteSamplers = cast[proc (count: GLsizei, samplers: ptr GLuint) {.stdcall.}](load("glDeleteSamplers"))
  glIsSampler = cast[proc (sampler: GLuint): GLboolean {.stdcall.}](load("glIsSampler"))
  glBindSampler = cast[proc (unit: GLuint, sampler: GLuint) {.stdcall.}](load("glBindSampler"))
  glSamplerParameteri = cast[proc (sampler: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glSamplerParameteri"))
  glSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glSamplerParameteriv"))
  glSamplerParameterf = cast[proc (sampler: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}](load("glSamplerParameterf"))
  glSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glSamplerParameterfv"))
  glSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glSamplerParameterIiv"))
  glSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, param: ptr GLuint) {.stdcall.}](load("glSamplerParameterIuiv"))
  glGetSamplerParameteriv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSamplerParameteriv"))
  glGetSamplerParameterIiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSamplerParameterIiv"))
  glGetSamplerParameterfv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetSamplerParameterfv"))
  glGetSamplerParameterIuiv = cast[proc (sampler: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetSamplerParameterIuiv"))


proc load_GL_ARB_separate_shader_objects(load: proc) =
  if not GLAD_GL_ARB_separate_shader_objects: return
  glUseProgramStages = cast[proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.stdcall.}](load("glUseProgramStages"))
  glActiveShaderProgram = cast[proc (pipeline: GLuint, program: GLuint) {.stdcall.}](load("glActiveShaderProgram"))
  glCreateShaderProgramv = cast[proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.stdcall.}](load("glCreateShaderProgramv"))
  glBindProgramPipeline = cast[proc (pipeline: GLuint) {.stdcall.}](load("glBindProgramPipeline"))
  glDeleteProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glDeleteProgramPipelines"))
  glGenProgramPipelines = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glGenProgramPipelines"))
  glIsProgramPipeline = cast[proc (pipeline: GLuint): GLboolean {.stdcall.}](load("glIsProgramPipeline"))
  glGetProgramPipelineiv = cast[proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramPipelineiv"))
  glProgramParameteri = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteri"))
  glProgramUniform1i = cast[proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}](load("glProgramUniform1i"))
  glProgramUniform1iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform1iv"))
  glProgramUniform1f = cast[proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}](load("glProgramUniform1f"))
  glProgramUniform1fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform1fv"))
  glProgramUniform1d = cast[proc (program: GLuint, location: GLint, v0: GLdouble) {.stdcall.}](load("glProgramUniform1d"))
  glProgramUniform1dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform1dv"))
  glProgramUniform1ui = cast[proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}](load("glProgramUniform1ui"))
  glProgramUniform1uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform1uiv"))
  glProgramUniform2i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glProgramUniform2i"))
  glProgramUniform2iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform2iv"))
  glProgramUniform2f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glProgramUniform2f"))
  glProgramUniform2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform2fv"))
  glProgramUniform2d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) {.stdcall.}](load("glProgramUniform2d"))
  glProgramUniform2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform2dv"))
  glProgramUniform2ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glProgramUniform2ui"))
  glProgramUniform2uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform2uiv"))
  glProgramUniform3i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glProgramUniform3i"))
  glProgramUniform3iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform3iv"))
  glProgramUniform3f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glProgramUniform3f"))
  glProgramUniform3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform3fv"))
  glProgramUniform3d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) {.stdcall.}](load("glProgramUniform3d"))
  glProgramUniform3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform3dv"))
  glProgramUniform3ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glProgramUniform3ui"))
  glProgramUniform3uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform3uiv"))
  glProgramUniform4i = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glProgramUniform4i"))
  glProgramUniform4iv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform4iv"))
  glProgramUniform4f = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glProgramUniform4f"))
  glProgramUniform4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform4fv"))
  glProgramUniform4d = cast[proc (program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) {.stdcall.}](load("glProgramUniform4d"))
  glProgramUniform4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform4dv"))
  glProgramUniform4ui = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glProgramUniform4ui"))
  glProgramUniform4uiv = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform4uiv"))
  glProgramUniformMatrix2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2fv"))
  glProgramUniformMatrix3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3fv"))
  glProgramUniformMatrix4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4fv"))
  glProgramUniformMatrix2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2dv"))
  glProgramUniformMatrix3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3dv"))
  glProgramUniformMatrix4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4dv"))
  glProgramUniformMatrix2x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x3fv"))
  glProgramUniformMatrix3x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x2fv"))
  glProgramUniformMatrix2x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x4fv"))
  glProgramUniformMatrix4x2fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x2fv"))
  glProgramUniformMatrix3x4fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x4fv"))
  glProgramUniformMatrix4x3fv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x3fv"))
  glProgramUniformMatrix2x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x3dv"))
  glProgramUniformMatrix3x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x2dv"))
  glProgramUniformMatrix2x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x4dv"))
  glProgramUniformMatrix4x2dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x2dv"))
  glProgramUniformMatrix3x4dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x4dv"))
  glProgramUniformMatrix4x3dv = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x3dv"))
  glValidateProgramPipeline = cast[proc (pipeline: GLuint) {.stdcall.}](load("glValidateProgramPipeline"))
  glGetProgramPipelineInfoLog = cast[proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetProgramPipelineInfoLog"))


proc load_GL_ARB_shader_atomic_counters(load: proc) =
  if not GLAD_GL_ARB_shader_atomic_counters: return
  glGetActiveAtomicCounterBufferiv = cast[proc (program: GLuint, bufferIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveAtomicCounterBufferiv"))


proc load_GL_ARB_shader_image_load_store(load: proc) =
  if not GLAD_GL_ARB_shader_image_load_store: return
  glBindImageTexture = cast[proc (unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) {.stdcall.}](load("glBindImageTexture"))
  glMemoryBarrier = cast[proc (barriers: GLbitfield) {.stdcall.}](load("glMemoryBarrier"))


proc load_GL_ARB_shader_objects(load: proc) =
  if not GLAD_GL_ARB_shader_objects: return
  glDeleteObjectARB = cast[proc (obj: GLhandleARB) {.stdcall.}](load("glDeleteObjectARB"))
  glGetHandleARB = cast[proc (pname: GLenum): GLhandleARB {.stdcall.}](load("glGetHandleARB"))
  glDetachObjectARB = cast[proc (containerObj: GLhandleARB, attachedObj: GLhandleARB) {.stdcall.}](load("glDetachObjectARB"))
  glCreateShaderObjectARB = cast[proc (shaderType: GLenum): GLhandleARB {.stdcall.}](load("glCreateShaderObjectARB"))
  glShaderSourceARB = cast[proc (shaderObj: GLhandleARB, count: GLsizei, string: ptr pointer, length: ptr GLint) {.stdcall.}](load("glShaderSourceARB"))
  glCompileShaderARB = cast[proc (shaderObj: GLhandleARB) {.stdcall.}](load("glCompileShaderARB"))
  glCreateProgramObjectARB = cast[proc (): GLhandleARB {.stdcall.}](load("glCreateProgramObjectARB"))
  glAttachObjectARB = cast[proc (containerObj: GLhandleARB, obj: GLhandleARB) {.stdcall.}](load("glAttachObjectARB"))
  glLinkProgramARB = cast[proc (programObj: GLhandleARB) {.stdcall.}](load("glLinkProgramARB"))
  glUseProgramObjectARB = cast[proc (programObj: GLhandleARB) {.stdcall.}](load("glUseProgramObjectARB"))
  glValidateProgramARB = cast[proc (programObj: GLhandleARB) {.stdcall.}](load("glValidateProgramARB"))
  glUniform1fARB = cast[proc (location: GLint, v0: GLfloat) {.stdcall.}](load("glUniform1fARB"))
  glUniform2fARB = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glUniform2fARB"))
  glUniform3fARB = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glUniform3fARB"))
  glUniform4fARB = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glUniform4fARB"))
  glUniform1iARB = cast[proc (location: GLint, v0: GLint) {.stdcall.}](load("glUniform1iARB"))
  glUniform2iARB = cast[proc (location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glUniform2iARB"))
  glUniform3iARB = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glUniform3iARB"))
  glUniform4iARB = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glUniform4iARB"))
  glUniform1fvARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform1fvARB"))
  glUniform2fvARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform2fvARB"))
  glUniform3fvARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform3fvARB"))
  glUniform4fvARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glUniform4fvARB"))
  glUniform1ivARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform1ivARB"))
  glUniform2ivARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform2ivARB"))
  glUniform3ivARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform3ivARB"))
  glUniform4ivARB = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glUniform4ivARB"))
  glUniformMatrix2fvARB = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix2fvARB"))
  glUniformMatrix3fvARB = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix3fvARB"))
  glUniformMatrix4fvARB = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glUniformMatrix4fvARB"))
  glGetObjectParameterfvARB = cast[proc (obj: GLhandleARB, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetObjectParameterfvARB"))
  glGetObjectParameterivARB = cast[proc (obj: GLhandleARB, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetObjectParameterivARB"))
  glGetInfoLogARB = cast[proc (obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, infoLog: ptr GLcharARB) {.stdcall.}](load("glGetInfoLogARB"))
  glGetAttachedObjectsARB = cast[proc (containerObj: GLhandleARB, maxCount: GLsizei, count: ptr GLsizei, obj: ptr GLhandleARB) {.stdcall.}](load("glGetAttachedObjectsARB"))
  glGetUniformLocationARB = cast[proc (programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}](load("glGetUniformLocationARB"))
  glGetActiveUniformARB = cast[proc (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB) {.stdcall.}](load("glGetActiveUniformARB"))
  glGetUniformfvARB = cast[proc (programObj: GLhandleARB, location: GLint, params: ptr GLfloat) {.stdcall.}](load("glGetUniformfvARB"))
  glGetUniformivARB = cast[proc (programObj: GLhandleARB, location: GLint, params: ptr GLint) {.stdcall.}](load("glGetUniformivARB"))
  glGetShaderSourceARB = cast[proc (obj: GLhandleARB, maxLength: GLsizei, length: ptr GLsizei, source: ptr GLcharARB) {.stdcall.}](load("glGetShaderSourceARB"))


proc load_GL_ARB_shader_storage_buffer_object(load: proc) =
  if not GLAD_GL_ARB_shader_storage_buffer_object: return
  glShaderStorageBlockBinding = cast[proc (program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) {.stdcall.}](load("glShaderStorageBlockBinding"))


proc load_GL_ARB_shader_subroutine(load: proc) =
  if not GLAD_GL_ARB_shader_subroutine: return
  glGetSubroutineUniformLocation = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLint {.stdcall.}](load("glGetSubroutineUniformLocation"))
  glGetSubroutineIndex = cast[proc (program: GLuint, shadertype: GLenum, name: cstring): GLuint {.stdcall.}](load("glGetSubroutineIndex"))
  glGetActiveSubroutineUniformiv = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: ptr GLint) {.stdcall.}](load("glGetActiveSubroutineUniformiv"))
  glGetActiveSubroutineUniformName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetActiveSubroutineUniformName"))
  glGetActiveSubroutineName = cast[proc (program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, name: cstring) {.stdcall.}](load("glGetActiveSubroutineName"))
  glUniformSubroutinesuiv = cast[proc (shadertype: GLenum, count: GLsizei, indices: ptr GLuint) {.stdcall.}](load("glUniformSubroutinesuiv"))
  glGetUniformSubroutineuiv = cast[proc (shadertype: GLenum, location: GLint, params: ptr GLuint) {.stdcall.}](load("glGetUniformSubroutineuiv"))
  glGetProgramStageiv = cast[proc (program: GLuint, shadertype: GLenum, pname: GLenum, values: ptr GLint) {.stdcall.}](load("glGetProgramStageiv"))


proc load_GL_ARB_shading_language_include(load: proc) =
  if not GLAD_GL_ARB_shading_language_include: return
  glNamedStringARB = cast[proc (`type`: GLenum, namelen: GLint, name: cstring, stringlen: GLint, string: cstring) {.stdcall.}](load("glNamedStringARB"))
  glDeleteNamedStringARB = cast[proc (namelen: GLint, name: cstring) {.stdcall.}](load("glDeleteNamedStringARB"))
  glCompileShaderIncludeARB = cast[proc (shader: GLuint, count: GLsizei, path: cstringArray, length: ptr GLint) {.stdcall.}](load("glCompileShaderIncludeARB"))
  glIsNamedStringARB = cast[proc (namelen: GLint, name: cstring): GLboolean {.stdcall.}](load("glIsNamedStringARB"))
  glGetNamedStringARB = cast[proc (namelen: GLint, name: cstring, bufSize: GLsizei, stringlen: ptr GLint, string: cstring) {.stdcall.}](load("glGetNamedStringARB"))
  glGetNamedStringivARB = cast[proc (namelen: GLint, name: cstring, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedStringivARB"))


proc load_GL_ARB_sparse_buffer(load: proc) =
  if not GLAD_GL_ARB_sparse_buffer: return
  glBufferPageCommitmentARB = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) {.stdcall.}](load("glBufferPageCommitmentARB"))
  glNamedBufferPageCommitmentEXT = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) {.stdcall.}](load("glNamedBufferPageCommitmentEXT"))
  glNamedBufferPageCommitmentARB = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, commit: GLboolean) {.stdcall.}](load("glNamedBufferPageCommitmentARB"))


proc load_GL_ARB_sparse_texture(load: proc) =
  if not GLAD_GL_ARB_sparse_texture: return
  glTexPageCommitmentARB = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) {.stdcall.}](load("glTexPageCommitmentARB"))


proc load_GL_ARB_sync(load: proc) =
  if not GLAD_GL_ARB_sync: return
  glFenceSync = cast[proc (condition: GLenum, flags: GLbitfield): GLsync {.stdcall.}](load("glFenceSync"))
  glIsSync = cast[proc (sync: GLsync): GLboolean {.stdcall.}](load("glIsSync"))
  glDeleteSync = cast[proc (sync: GLsync) {.stdcall.}](load("glDeleteSync"))
  glClientWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64): GLenum {.stdcall.}](load("glClientWaitSync"))
  glWaitSync = cast[proc (sync: GLsync, flags: GLbitfield, timeout: GLuint64) {.stdcall.}](load("glWaitSync"))
  glGetInteger64v = cast[proc (pname: GLenum, data: ptr GLint64) {.stdcall.}](load("glGetInteger64v"))
  glGetSynciv = cast[proc (sync: GLsync, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}](load("glGetSynciv"))


proc load_GL_ARB_tessellation_shader(load: proc) =
  if not GLAD_GL_ARB_tessellation_shader: return
  glPatchParameteri = cast[proc (pname: GLenum, value: GLint) {.stdcall.}](load("glPatchParameteri"))
  glPatchParameterfv = cast[proc (pname: GLenum, values: ptr GLfloat) {.stdcall.}](load("glPatchParameterfv"))


proc load_GL_ARB_texture_barrier(load: proc) =
  if not GLAD_GL_ARB_texture_barrier: return
  glTextureBarrier = cast[proc () {.stdcall.}](load("glTextureBarrier"))


proc load_GL_ARB_texture_buffer_object(load: proc) =
  if not GLAD_GL_ARB_texture_buffer_object: return
  glTexBufferARB = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glTexBufferARB"))


proc load_GL_ARB_texture_buffer_range(load: proc) =
  if not GLAD_GL_ARB_texture_buffer_range: return
  glTexBufferRange = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glTexBufferRange"))


proc load_GL_ARB_texture_compression(load: proc) =
  if not GLAD_GL_ARB_texture_compression: return
  glCompressedTexImage3DARB = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage3DARB"))
  glCompressedTexImage2DARB = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage2DARB"))
  glCompressedTexImage1DARB = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexImage1DARB"))
  glCompressedTexSubImage3DARB = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage3DARB"))
  glCompressedTexSubImage2DARB = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage2DARB"))
  glCompressedTexSubImage1DARB = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.stdcall.}](load("glCompressedTexSubImage1DARB"))
  glGetCompressedTexImageARB = cast[proc (target: GLenum, level: GLint, img: pointer) {.stdcall.}](load("glGetCompressedTexImageARB"))


proc load_GL_ARB_texture_multisample(load: proc) =
  if not GLAD_GL_ARB_texture_multisample: return
  glTexImage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexImage2DMultisample"))
  glTexImage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexImage3DMultisample"))
  glGetMultisamplefv = cast[proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}](load("glGetMultisamplefv"))
  glSampleMaski = cast[proc (maskNumber: GLuint, mask: GLbitfield) {.stdcall.}](load("glSampleMaski"))


proc load_GL_ARB_texture_storage(load: proc) =
  if not GLAD_GL_ARB_texture_storage: return
  glTexStorage1D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}](load("glTexStorage1D"))
  glTexStorage2D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTexStorage2D"))
  glTexStorage3D = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTexStorage3D"))


proc load_GL_ARB_texture_storage_multisample(load: proc) =
  if not GLAD_GL_ARB_texture_storage_multisample: return
  glTexStorage2DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexStorage2DMultisample"))
  glTexStorage3DMultisample = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTexStorage3DMultisample"))


proc load_GL_ARB_texture_view(load: proc) =
  if not GLAD_GL_ARB_texture_view: return
  glTextureView = cast[proc (texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) {.stdcall.}](load("glTextureView"))


proc load_GL_ARB_timer_query(load: proc) =
  if not GLAD_GL_ARB_timer_query: return
  glQueryCounter = cast[proc (id: GLuint, target: GLenum) {.stdcall.}](load("glQueryCounter"))
  glGetQueryObjecti64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetQueryObjecti64v"))
  glGetQueryObjectui64v = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}](load("glGetQueryObjectui64v"))


proc load_GL_ARB_transform_feedback2(load: proc) =
  if not GLAD_GL_ARB_transform_feedback2: return
  glBindTransformFeedback = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBindTransformFeedback"))
  glDeleteTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteTransformFeedbacks"))
  glGenTransformFeedbacks = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenTransformFeedbacks"))
  glIsTransformFeedback = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsTransformFeedback"))
  glPauseTransformFeedback = cast[proc () {.stdcall.}](load("glPauseTransformFeedback"))
  glResumeTransformFeedback = cast[proc () {.stdcall.}](load("glResumeTransformFeedback"))
  glDrawTransformFeedback = cast[proc (mode: GLenum, id: GLuint) {.stdcall.}](load("glDrawTransformFeedback"))


proc load_GL_ARB_transform_feedback3(load: proc) =
  if not GLAD_GL_ARB_transform_feedback3: return
  glDrawTransformFeedbackStream = cast[proc (mode: GLenum, id: GLuint, stream: GLuint) {.stdcall.}](load("glDrawTransformFeedbackStream"))
  glBeginQueryIndexed = cast[proc (target: GLenum, index: GLuint, id: GLuint) {.stdcall.}](load("glBeginQueryIndexed"))
  glEndQueryIndexed = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glEndQueryIndexed"))
  glGetQueryIndexediv = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetQueryIndexediv"))


proc load_GL_ARB_transform_feedback_instanced(load: proc) =
  if not GLAD_GL_ARB_transform_feedback_instanced: return
  glDrawTransformFeedbackInstanced = cast[proc (mode: GLenum, id: GLuint, instancecount: GLsizei) {.stdcall.}](load("glDrawTransformFeedbackInstanced"))
  glDrawTransformFeedbackStreamInstanced = cast[proc (mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) {.stdcall.}](load("glDrawTransformFeedbackStreamInstanced"))


proc load_GL_ARB_transpose_matrix(load: proc) =
  if not GLAD_GL_ARB_transpose_matrix: return
  glLoadTransposeMatrixfARB = cast[proc (m: ptr GLfloat) {.stdcall.}](load("glLoadTransposeMatrixfARB"))
  glLoadTransposeMatrixdARB = cast[proc (m: ptr GLdouble) {.stdcall.}](load("glLoadTransposeMatrixdARB"))
  glMultTransposeMatrixfARB = cast[proc (m: ptr GLfloat) {.stdcall.}](load("glMultTransposeMatrixfARB"))
  glMultTransposeMatrixdARB = cast[proc (m: ptr GLdouble) {.stdcall.}](load("glMultTransposeMatrixdARB"))


proc load_GL_ARB_uniform_buffer_object(load: proc) =
  if not GLAD_GL_ARB_uniform_buffer_object: return
  glGetUniformIndices = cast[proc (program: GLuint, uniformCount: GLsizei, uniformNames: cstringArray, uniformIndices: ptr GLuint) {.stdcall.}](load("glGetUniformIndices"))
  glGetActiveUniformsiv = cast[proc (program: GLuint, uniformCount: GLsizei, uniformIndices: ptr GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformsiv"))
  glGetActiveUniformName = cast[proc (program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformName: cstring) {.stdcall.}](load("glGetActiveUniformName"))
  glGetUniformBlockIndex = cast[proc (program: GLuint, uniformBlockName: cstring): GLuint {.stdcall.}](load("glGetUniformBlockIndex"))
  glGetActiveUniformBlockiv = cast[proc (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetActiveUniformBlockiv"))
  glGetActiveUniformBlockName = cast[proc (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ptr GLsizei, uniformBlockName: cstring) {.stdcall.}](load("glGetActiveUniformBlockName"))
  glUniformBlockBinding = cast[proc (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) {.stdcall.}](load("glUniformBlockBinding"))
  glBindBufferRange = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRange"))
  glBindBufferBase = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBase"))
  glGetIntegeri_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegeri_v"))


proc load_GL_ARB_vertex_array_object(load: proc) =
  if not GLAD_GL_ARB_vertex_array_object: return
  glBindVertexArray = cast[proc (array: GLuint) {.stdcall.}](load("glBindVertexArray"))
  glDeleteVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glDeleteVertexArrays"))
  glGenVertexArrays = cast[proc (n: GLsizei, arrays: ptr GLuint) {.stdcall.}](load("glGenVertexArrays"))
  glIsVertexArray = cast[proc (array: GLuint): GLboolean {.stdcall.}](load("glIsVertexArray"))


proc load_GL_ARB_vertex_attrib_64bit(load: proc) =
  if not GLAD_GL_ARB_vertex_attrib_64bit: return
  glVertexAttribL1d = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttribL1d"))
  glVertexAttribL2d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttribL2d"))
  glVertexAttribL3d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttribL3d"))
  glVertexAttribL4d = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttribL4d"))
  glVertexAttribL1dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL1dv"))
  glVertexAttribL2dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL2dv"))
  glVertexAttribL3dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL3dv"))
  glVertexAttribL4dv = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL4dv"))
  glVertexAttribLPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribLPointer"))
  glGetVertexAttribLdv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribLdv"))


proc load_GL_ARB_vertex_attrib_binding(load: proc) =
  if not GLAD_GL_ARB_vertex_attrib_binding: return
  glBindVertexBuffer = cast[proc (bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}](load("glBindVertexBuffer"))
  glVertexAttribFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}](load("glVertexAttribFormat"))
  glVertexAttribIFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexAttribIFormat"))
  glVertexAttribLFormat = cast[proc (attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexAttribLFormat"))
  glVertexAttribBinding = cast[proc (attribindex: GLuint, bindingindex: GLuint) {.stdcall.}](load("glVertexAttribBinding"))
  glVertexBindingDivisor = cast[proc (bindingindex: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexBindingDivisor"))


proc load_GL_ARB_vertex_blend(load: proc) =
  if not GLAD_GL_ARB_vertex_blend: return
  glWeightbvARB = cast[proc (size: GLint, weights: ptr GLbyte) {.stdcall.}](load("glWeightbvARB"))
  glWeightsvARB = cast[proc (size: GLint, weights: ptr GLshort) {.stdcall.}](load("glWeightsvARB"))
  glWeightivARB = cast[proc (size: GLint, weights: ptr GLint) {.stdcall.}](load("glWeightivARB"))
  glWeightfvARB = cast[proc (size: GLint, weights: ptr GLfloat) {.stdcall.}](load("glWeightfvARB"))
  glWeightdvARB = cast[proc (size: GLint, weights: ptr GLdouble) {.stdcall.}](load("glWeightdvARB"))
  glWeightubvARB = cast[proc (size: GLint, weights: ptr GLubyte) {.stdcall.}](load("glWeightubvARB"))
  glWeightusvARB = cast[proc (size: GLint, weights: ptr GLushort) {.stdcall.}](load("glWeightusvARB"))
  glWeightuivARB = cast[proc (size: GLint, weights: ptr GLuint) {.stdcall.}](load("glWeightuivARB"))
  glWeightPointerARB = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glWeightPointerARB"))
  glVertexBlendARB = cast[proc (count: GLint) {.stdcall.}](load("glVertexBlendARB"))


proc load_GL_ARB_vertex_buffer_object(load: proc) =
  if not GLAD_GL_ARB_vertex_buffer_object: return
  glBindBufferARB = cast[proc (target: GLenum, buffer: GLuint) {.stdcall.}](load("glBindBufferARB"))
  glDeleteBuffersARB = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glDeleteBuffersARB"))
  glGenBuffersARB = cast[proc (n: GLsizei, buffers: ptr GLuint) {.stdcall.}](load("glGenBuffersARB"))
  glIsBufferARB = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glIsBufferARB"))
  glBufferDataARB = cast[proc (target: GLenum, size: GLsizeiptrARB, data: pointer, usage: GLenum) {.stdcall.}](load("glBufferDataARB"))
  glBufferSubDataARB = cast[proc (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer) {.stdcall.}](load("glBufferSubDataARB"))
  glGetBufferSubDataARB = cast[proc (target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: pointer) {.stdcall.}](load("glGetBufferSubDataARB"))
  glMapBufferARB = cast[proc (target: GLenum, access: GLenum): pointer {.stdcall.}](load("glMapBufferARB"))
  glUnmapBufferARB = cast[proc (target: GLenum): GLboolean {.stdcall.}](load("glUnmapBufferARB"))
  glGetBufferParameterivARB = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetBufferParameterivARB"))
  glGetBufferPointervARB = cast[proc (target: GLenum, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetBufferPointervARB"))


proc load_GL_ARB_vertex_program(load: proc) =
  if not GLAD_GL_ARB_vertex_program: return
  glVertexAttrib1dARB = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttrib1dARB"))
  glVertexAttrib1dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib1dvARB"))
  glVertexAttrib1fARB = cast[proc (index: GLuint, x: GLfloat) {.stdcall.}](load("glVertexAttrib1fARB"))
  glVertexAttrib1fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib1fvARB"))
  glVertexAttrib1sARB = cast[proc (index: GLuint, x: GLshort) {.stdcall.}](load("glVertexAttrib1sARB"))
  glVertexAttrib1svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib1svARB"))
  glVertexAttrib2dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttrib2dARB"))
  glVertexAttrib2dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib2dvARB"))
  glVertexAttrib2fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}](load("glVertexAttrib2fARB"))
  glVertexAttrib2fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib2fvARB"))
  glVertexAttrib2sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}](load("glVertexAttrib2sARB"))
  glVertexAttrib2svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib2svARB"))
  glVertexAttrib3dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttrib3dARB"))
  glVertexAttrib3dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib3dvARB"))
  glVertexAttrib3fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glVertexAttrib3fARB"))
  glVertexAttrib3fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib3fvARB"))
  glVertexAttrib3sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glVertexAttrib3sARB"))
  glVertexAttrib3svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib3svARB"))
  glVertexAttrib4NbvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4NbvARB"))
  glVertexAttrib4NivARB = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4NivARB"))
  glVertexAttrib4NsvARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4NsvARB"))
  glVertexAttrib4NubARB = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}](load("glVertexAttrib4NubARB"))
  glVertexAttrib4NubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4NubvARB"))
  glVertexAttrib4NuivARB = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4NuivARB"))
  glVertexAttrib4NusvARB = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4NusvARB"))
  glVertexAttrib4bvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4bvARB"))
  glVertexAttrib4dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttrib4dARB"))
  glVertexAttrib4dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib4dvARB"))
  glVertexAttrib4fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glVertexAttrib4fARB"))
  glVertexAttrib4fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib4fvARB"))
  glVertexAttrib4ivARB = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4ivARB"))
  glVertexAttrib4sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}](load("glVertexAttrib4sARB"))
  glVertexAttrib4svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4svARB"))
  glVertexAttrib4ubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4ubvARB"))
  glVertexAttrib4uivARB = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4uivARB"))
  glVertexAttrib4usvARB = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4usvARB"))
  glVertexAttribPointerARB = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribPointerARB"))
  glEnableVertexAttribArrayARB = cast[proc (index: GLuint) {.stdcall.}](load("glEnableVertexAttribArrayARB"))
  glDisableVertexAttribArrayARB = cast[proc (index: GLuint) {.stdcall.}](load("glDisableVertexAttribArrayARB"))
  glProgramStringARB = cast[proc (target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.stdcall.}](load("glProgramStringARB"))
  glBindProgramARB = cast[proc (target: GLenum, program: GLuint) {.stdcall.}](load("glBindProgramARB"))
  glDeleteProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}](load("glDeleteProgramsARB"))
  glGenProgramsARB = cast[proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}](load("glGenProgramsARB"))
  glProgramEnvParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glProgramEnvParameter4dARB"))
  glProgramEnvParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glProgramEnvParameter4dvARB"))
  glProgramEnvParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glProgramEnvParameter4fARB"))
  glProgramEnvParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glProgramEnvParameter4fvARB"))
  glProgramLocalParameter4dARB = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glProgramLocalParameter4dARB"))
  glProgramLocalParameter4dvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glProgramLocalParameter4dvARB"))
  glProgramLocalParameter4fARB = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glProgramLocalParameter4fARB"))
  glProgramLocalParameter4fvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glProgramLocalParameter4fvARB"))
  glGetProgramEnvParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glGetProgramEnvParameterdvARB"))
  glGetProgramEnvParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glGetProgramEnvParameterfvARB"))
  glGetProgramLocalParameterdvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glGetProgramLocalParameterdvARB"))
  glGetProgramLocalParameterfvARB = cast[proc (target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glGetProgramLocalParameterfvARB"))
  glGetProgramivARB = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramivARB"))
  glGetProgramStringARB = cast[proc (target: GLenum, pname: GLenum, string: pointer) {.stdcall.}](load("glGetProgramStringARB"))
  glGetVertexAttribdvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribdvARB"))
  glGetVertexAttribfvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVertexAttribfvARB"))
  glGetVertexAttribivARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribivARB"))
  glGetVertexAttribPointervARB = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}](load("glGetVertexAttribPointervARB"))
  glIsProgramARB = cast[proc (program: GLuint): GLboolean {.stdcall.}](load("glIsProgramARB"))


proc load_GL_ARB_vertex_shader(load: proc) =
  if not GLAD_GL_ARB_vertex_shader: return
  glVertexAttrib1fARB = cast[proc (index: GLuint, x: GLfloat) {.stdcall.}](load("glVertexAttrib1fARB"))
  glVertexAttrib1sARB = cast[proc (index: GLuint, x: GLshort) {.stdcall.}](load("glVertexAttrib1sARB"))
  glVertexAttrib1dARB = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttrib1dARB"))
  glVertexAttrib2fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}](load("glVertexAttrib2fARB"))
  glVertexAttrib2sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}](load("glVertexAttrib2sARB"))
  glVertexAttrib2dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttrib2dARB"))
  glVertexAttrib3fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glVertexAttrib3fARB"))
  glVertexAttrib3sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glVertexAttrib3sARB"))
  glVertexAttrib3dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttrib3dARB"))
  glVertexAttrib4fARB = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glVertexAttrib4fARB"))
  glVertexAttrib4sARB = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}](load("glVertexAttrib4sARB"))
  glVertexAttrib4dARB = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttrib4dARB"))
  glVertexAttrib4NubARB = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}](load("glVertexAttrib4NubARB"))
  glVertexAttrib1fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib1fvARB"))
  glVertexAttrib1svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib1svARB"))
  glVertexAttrib1dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib1dvARB"))
  glVertexAttrib2fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib2fvARB"))
  glVertexAttrib2svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib2svARB"))
  glVertexAttrib2dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib2dvARB"))
  glVertexAttrib3fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib3fvARB"))
  glVertexAttrib3svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib3svARB"))
  glVertexAttrib3dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib3dvARB"))
  glVertexAttrib4fvARB = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib4fvARB"))
  glVertexAttrib4svARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4svARB"))
  glVertexAttrib4dvARB = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib4dvARB"))
  glVertexAttrib4ivARB = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4ivARB"))
  glVertexAttrib4bvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4bvARB"))
  glVertexAttrib4ubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4ubvARB"))
  glVertexAttrib4usvARB = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4usvARB"))
  glVertexAttrib4uivARB = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4uivARB"))
  glVertexAttrib4NbvARB = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttrib4NbvARB"))
  glVertexAttrib4NsvARB = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4NsvARB"))
  glVertexAttrib4NivARB = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttrib4NivARB"))
  glVertexAttrib4NubvARB = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4NubvARB"))
  glVertexAttrib4NusvARB = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttrib4NusvARB"))
  glVertexAttrib4NuivARB = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttrib4NuivARB"))
  glVertexAttribPointerARB = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribPointerARB"))
  glEnableVertexAttribArrayARB = cast[proc (index: GLuint) {.stdcall.}](load("glEnableVertexAttribArrayARB"))
  glDisableVertexAttribArrayARB = cast[proc (index: GLuint) {.stdcall.}](load("glDisableVertexAttribArrayARB"))
  glBindAttribLocationARB = cast[proc (programObj: GLhandleARB, index: GLuint, name: ptr GLcharARB) {.stdcall.}](load("glBindAttribLocationARB"))
  glGetActiveAttribARB = cast[proc (programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: ptr GLcharARB) {.stdcall.}](load("glGetActiveAttribARB"))
  glGetAttribLocationARB = cast[proc (programObj: GLhandleARB, name: ptr GLcharARB): GLint {.stdcall.}](load("glGetAttribLocationARB"))
  glGetVertexAttribdvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribdvARB"))
  glGetVertexAttribfvARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVertexAttribfvARB"))
  glGetVertexAttribivARB = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribivARB"))
  glGetVertexAttribPointervARB = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}](load("glGetVertexAttribPointervARB"))


proc load_GL_ARB_vertex_type_2_10_10_10_rev(load: proc) =
  if not GLAD_GL_ARB_vertex_type_2_10_10_10_rev: return
  glVertexAttribP1ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP1ui"))
  glVertexAttribP1uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP1uiv"))
  glVertexAttribP2ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP2ui"))
  glVertexAttribP2uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP2uiv"))
  glVertexAttribP3ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP3ui"))
  glVertexAttribP3uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP3uiv"))
  glVertexAttribP4ui = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: GLuint) {.stdcall.}](load("glVertexAttribP4ui"))
  glVertexAttribP4uiv = cast[proc (index: GLuint, `type`: GLenum, normalized: GLboolean, value: ptr GLuint) {.stdcall.}](load("glVertexAttribP4uiv"))
  glVertexP2ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP2ui"))
  glVertexP2uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP2uiv"))
  glVertexP3ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP3ui"))
  glVertexP3uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP3uiv"))
  glVertexP4ui = cast[proc (`type`: GLenum, value: GLuint) {.stdcall.}](load("glVertexP4ui"))
  glVertexP4uiv = cast[proc (`type`: GLenum, value: ptr GLuint) {.stdcall.}](load("glVertexP4uiv"))
  glTexCoordP1ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP1ui"))
  glTexCoordP1uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP1uiv"))
  glTexCoordP2ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP2ui"))
  glTexCoordP2uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP2uiv"))
  glTexCoordP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP3ui"))
  glTexCoordP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP3uiv"))
  glTexCoordP4ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glTexCoordP4ui"))
  glTexCoordP4uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glTexCoordP4uiv"))
  glMultiTexCoordP1ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP1ui"))
  glMultiTexCoordP1uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP1uiv"))
  glMultiTexCoordP2ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP2ui"))
  glMultiTexCoordP2uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP2uiv"))
  glMultiTexCoordP3ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP3ui"))
  glMultiTexCoordP3uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP3uiv"))
  glMultiTexCoordP4ui = cast[proc (texture: GLenum, `type`: GLenum, coords: GLuint) {.stdcall.}](load("glMultiTexCoordP4ui"))
  glMultiTexCoordP4uiv = cast[proc (texture: GLenum, `type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glMultiTexCoordP4uiv"))
  glNormalP3ui = cast[proc (`type`: GLenum, coords: GLuint) {.stdcall.}](load("glNormalP3ui"))
  glNormalP3uiv = cast[proc (`type`: GLenum, coords: ptr GLuint) {.stdcall.}](load("glNormalP3uiv"))
  glColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glColorP3ui"))
  glColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glColorP3uiv"))
  glColorP4ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glColorP4ui"))
  glColorP4uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glColorP4uiv"))
  glSecondaryColorP3ui = cast[proc (`type`: GLenum, color: GLuint) {.stdcall.}](load("glSecondaryColorP3ui"))
  glSecondaryColorP3uiv = cast[proc (`type`: GLenum, color: ptr GLuint) {.stdcall.}](load("glSecondaryColorP3uiv"))


proc load_GL_ARB_viewport_array(load: proc) =
  if not GLAD_GL_ARB_viewport_array: return
  glViewportArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glViewportArrayv"))
  glViewportIndexedf = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) {.stdcall.}](load("glViewportIndexedf"))
  glViewportIndexedfv = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glViewportIndexedfv"))
  glScissorArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}](load("glScissorArrayv"))
  glScissorIndexed = cast[proc (index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glScissorIndexed"))
  glScissorIndexedv = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glScissorIndexedv"))
  glDepthRangeArrayv = cast[proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glDepthRangeArrayv"))
  glDepthRangeIndexed = cast[proc (index: GLuint, n: GLdouble, f: GLdouble) {.stdcall.}](load("glDepthRangeIndexed"))
  glGetFloati_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.stdcall.}](load("glGetFloati_v"))
  glGetDoublei_v = cast[proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.stdcall.}](load("glGetDoublei_v"))
  glDepthRangeArraydvNV = cast[proc (first: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glDepthRangeArraydvNV"))
  glDepthRangeIndexeddNV = cast[proc (index: GLuint, n: GLdouble, f: GLdouble) {.stdcall.}](load("glDepthRangeIndexeddNV"))


proc load_GL_ARB_window_pos(load: proc) =
  if not GLAD_GL_ARB_window_pos: return
  glWindowPos2dARB = cast[proc (x: GLdouble, y: GLdouble) {.stdcall.}](load("glWindowPos2dARB"))
  glWindowPos2dvARB = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glWindowPos2dvARB"))
  glWindowPos2fARB = cast[proc (x: GLfloat, y: GLfloat) {.stdcall.}](load("glWindowPos2fARB"))
  glWindowPos2fvARB = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glWindowPos2fvARB"))
  glWindowPos2iARB = cast[proc (x: GLint, y: GLint) {.stdcall.}](load("glWindowPos2iARB"))
  glWindowPos2ivARB = cast[proc (v: ptr GLint) {.stdcall.}](load("glWindowPos2ivARB"))
  glWindowPos2sARB = cast[proc (x: GLshort, y: GLshort) {.stdcall.}](load("glWindowPos2sARB"))
  glWindowPos2svARB = cast[proc (v: ptr GLshort) {.stdcall.}](load("glWindowPos2svARB"))
  glWindowPos3dARB = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glWindowPos3dARB"))
  glWindowPos3dvARB = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glWindowPos3dvARB"))
  glWindowPos3fARB = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glWindowPos3fARB"))
  glWindowPos3fvARB = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glWindowPos3fvARB"))
  glWindowPos3iARB = cast[proc (x: GLint, y: GLint, z: GLint) {.stdcall.}](load("glWindowPos3iARB"))
  glWindowPos3ivARB = cast[proc (v: ptr GLint) {.stdcall.}](load("glWindowPos3ivARB"))
  glWindowPos3sARB = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glWindowPos3sARB"))
  glWindowPos3svARB = cast[proc (v: ptr GLshort) {.stdcall.}](load("glWindowPos3svARB"))


proc load_GL_ATI_draw_buffers(load: proc) =
  if not GLAD_GL_ATI_draw_buffers: return
  glDrawBuffersATI = cast[proc (n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glDrawBuffersATI"))


proc load_GL_ATI_element_array(load: proc) =
  if not GLAD_GL_ATI_element_array: return
  glElementPointerATI = cast[proc (`type`: GLenum, pointer: pointer) {.stdcall.}](load("glElementPointerATI"))
  glDrawElementArrayATI = cast[proc (mode: GLenum, count: GLsizei) {.stdcall.}](load("glDrawElementArrayATI"))
  glDrawRangeElementArrayATI = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei) {.stdcall.}](load("glDrawRangeElementArrayATI"))


proc load_GL_ATI_envmap_bumpmap(load: proc) =
  if not GLAD_GL_ATI_envmap_bumpmap: return
  glTexBumpParameterivATI = cast[proc (pname: GLenum, param: ptr GLint) {.stdcall.}](load("glTexBumpParameterivATI"))
  glTexBumpParameterfvATI = cast[proc (pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glTexBumpParameterfvATI"))
  glGetTexBumpParameterivATI = cast[proc (pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetTexBumpParameterivATI"))
  glGetTexBumpParameterfvATI = cast[proc (pname: GLenum, param: ptr GLfloat) {.stdcall.}](load("glGetTexBumpParameterfvATI"))


proc load_GL_ATI_fragment_shader(load: proc) =
  if not GLAD_GL_ATI_fragment_shader: return
  glGenFragmentShadersATI = cast[proc (range: GLuint): GLuint {.stdcall.}](load("glGenFragmentShadersATI"))
  glBindFragmentShaderATI = cast[proc (id: GLuint) {.stdcall.}](load("glBindFragmentShaderATI"))
  glDeleteFragmentShaderATI = cast[proc (id: GLuint) {.stdcall.}](load("glDeleteFragmentShaderATI"))
  glBeginFragmentShaderATI = cast[proc () {.stdcall.}](load("glBeginFragmentShaderATI"))
  glEndFragmentShaderATI = cast[proc () {.stdcall.}](load("glEndFragmentShaderATI"))
  glPassTexCoordATI = cast[proc (dst: GLuint, coord: GLuint, swizzle: GLenum) {.stdcall.}](load("glPassTexCoordATI"))
  glSampleMapATI = cast[proc (dst: GLuint, interp: GLuint, swizzle: GLenum) {.stdcall.}](load("glSampleMapATI"))
  glColorFragmentOp1ATI = cast[proc (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) {.stdcall.}](load("glColorFragmentOp1ATI"))
  glColorFragmentOp2ATI = cast[proc (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) {.stdcall.}](load("glColorFragmentOp2ATI"))
  glColorFragmentOp3ATI = cast[proc (op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) {.stdcall.}](load("glColorFragmentOp3ATI"))
  glAlphaFragmentOp1ATI = cast[proc (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) {.stdcall.}](load("glAlphaFragmentOp1ATI"))
  glAlphaFragmentOp2ATI = cast[proc (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) {.stdcall.}](load("glAlphaFragmentOp2ATI"))
  glAlphaFragmentOp3ATI = cast[proc (op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) {.stdcall.}](load("glAlphaFragmentOp3ATI"))
  glSetFragmentShaderConstantATI = cast[proc (dst: GLuint, value: ptr GLfloat) {.stdcall.}](load("glSetFragmentShaderConstantATI"))


proc load_GL_ATI_map_object_buffer(load: proc) =
  if not GLAD_GL_ATI_map_object_buffer: return
  glMapObjectBufferATI = cast[proc (buffer: GLuint): pointer {.stdcall.}](load("glMapObjectBufferATI"))
  glUnmapObjectBufferATI = cast[proc (buffer: GLuint) {.stdcall.}](load("glUnmapObjectBufferATI"))


proc load_GL_ATI_pn_triangles(load: proc) =
  if not GLAD_GL_ATI_pn_triangles: return
  glPNTrianglesiATI = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPNTrianglesiATI"))
  glPNTrianglesfATI = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPNTrianglesfATI"))


proc load_GL_ATI_separate_stencil(load: proc) =
  if not GLAD_GL_ATI_separate_stencil: return
  glStencilOpSeparateATI = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.stdcall.}](load("glStencilOpSeparateATI"))
  glStencilFuncSeparateATI = cast[proc (frontfunc: GLenum, backfunc: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glStencilFuncSeparateATI"))


proc load_GL_ATI_vertex_array_object(load: proc) =
  if not GLAD_GL_ATI_vertex_array_object: return
  glNewObjectBufferATI = cast[proc (size: GLsizei, pointer: pointer, usage: GLenum): GLuint {.stdcall.}](load("glNewObjectBufferATI"))
  glIsObjectBufferATI = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glIsObjectBufferATI"))
  glUpdateObjectBufferATI = cast[proc (buffer: GLuint, offset: GLuint, size: GLsizei, pointer: pointer, preserve: GLenum) {.stdcall.}](load("glUpdateObjectBufferATI"))
  glGetObjectBufferfvATI = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetObjectBufferfvATI"))
  glGetObjectBufferivATI = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetObjectBufferivATI"))
  glFreeObjectBufferATI = cast[proc (buffer: GLuint) {.stdcall.}](load("glFreeObjectBufferATI"))
  glArrayObjectATI = cast[proc (array: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) {.stdcall.}](load("glArrayObjectATI"))
  glGetArrayObjectfvATI = cast[proc (array: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetArrayObjectfvATI"))
  glGetArrayObjectivATI = cast[proc (array: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetArrayObjectivATI"))
  glVariantArrayObjectATI = cast[proc (id: GLuint, `type`: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) {.stdcall.}](load("glVariantArrayObjectATI"))
  glGetVariantArrayObjectfvATI = cast[proc (id: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVariantArrayObjectfvATI"))
  glGetVariantArrayObjectivATI = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVariantArrayObjectivATI"))


proc load_GL_ATI_vertex_attrib_array_object(load: proc) =
  if not GLAD_GL_ATI_vertex_attrib_array_object: return
  glVertexAttribArrayObjectATI = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) {.stdcall.}](load("glVertexAttribArrayObjectATI"))
  glGetVertexAttribArrayObjectfvATI = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVertexAttribArrayObjectfvATI"))
  glGetVertexAttribArrayObjectivATI = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribArrayObjectivATI"))


proc load_GL_ATI_vertex_streams(load: proc) =
  if not GLAD_GL_ATI_vertex_streams: return
  glVertexStream1sATI = cast[proc (stream: GLenum, x: GLshort) {.stdcall.}](load("glVertexStream1sATI"))
  glVertexStream1svATI = cast[proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}](load("glVertexStream1svATI"))
  glVertexStream1iATI = cast[proc (stream: GLenum, x: GLint) {.stdcall.}](load("glVertexStream1iATI"))
  glVertexStream1ivATI = cast[proc (stream: GLenum, coords: ptr GLint) {.stdcall.}](load("glVertexStream1ivATI"))
  glVertexStream1fATI = cast[proc (stream: GLenum, x: GLfloat) {.stdcall.}](load("glVertexStream1fATI"))
  glVertexStream1fvATI = cast[proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}](load("glVertexStream1fvATI"))
  glVertexStream1dATI = cast[proc (stream: GLenum, x: GLdouble) {.stdcall.}](load("glVertexStream1dATI"))
  glVertexStream1dvATI = cast[proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}](load("glVertexStream1dvATI"))
  glVertexStream2sATI = cast[proc (stream: GLenum, x: GLshort, y: GLshort) {.stdcall.}](load("glVertexStream2sATI"))
  glVertexStream2svATI = cast[proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}](load("glVertexStream2svATI"))
  glVertexStream2iATI = cast[proc (stream: GLenum, x: GLint, y: GLint) {.stdcall.}](load("glVertexStream2iATI"))
  glVertexStream2ivATI = cast[proc (stream: GLenum, coords: ptr GLint) {.stdcall.}](load("glVertexStream2ivATI"))
  glVertexStream2fATI = cast[proc (stream: GLenum, x: GLfloat, y: GLfloat) {.stdcall.}](load("glVertexStream2fATI"))
  glVertexStream2fvATI = cast[proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}](load("glVertexStream2fvATI"))
  glVertexStream2dATI = cast[proc (stream: GLenum, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexStream2dATI"))
  glVertexStream2dvATI = cast[proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}](load("glVertexStream2dvATI"))
  glVertexStream3sATI = cast[proc (stream: GLenum, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glVertexStream3sATI"))
  glVertexStream3svATI = cast[proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}](load("glVertexStream3svATI"))
  glVertexStream3iATI = cast[proc (stream: GLenum, x: GLint, y: GLint, z: GLint) {.stdcall.}](load("glVertexStream3iATI"))
  glVertexStream3ivATI = cast[proc (stream: GLenum, coords: ptr GLint) {.stdcall.}](load("glVertexStream3ivATI"))
  glVertexStream3fATI = cast[proc (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glVertexStream3fATI"))
  glVertexStream3fvATI = cast[proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}](load("glVertexStream3fvATI"))
  glVertexStream3dATI = cast[proc (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexStream3dATI"))
  glVertexStream3dvATI = cast[proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}](load("glVertexStream3dvATI"))
  glVertexStream4sATI = cast[proc (stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}](load("glVertexStream4sATI"))
  glVertexStream4svATI = cast[proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}](load("glVertexStream4svATI"))
  glVertexStream4iATI = cast[proc (stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glVertexStream4iATI"))
  glVertexStream4ivATI = cast[proc (stream: GLenum, coords: ptr GLint) {.stdcall.}](load("glVertexStream4ivATI"))
  glVertexStream4fATI = cast[proc (stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glVertexStream4fATI"))
  glVertexStream4fvATI = cast[proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}](load("glVertexStream4fvATI"))
  glVertexStream4dATI = cast[proc (stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexStream4dATI"))
  glVertexStream4dvATI = cast[proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}](load("glVertexStream4dvATI"))
  glNormalStream3bATI = cast[proc (stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) {.stdcall.}](load("glNormalStream3bATI"))
  glNormalStream3bvATI = cast[proc (stream: GLenum, coords: ptr GLbyte) {.stdcall.}](load("glNormalStream3bvATI"))
  glNormalStream3sATI = cast[proc (stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) {.stdcall.}](load("glNormalStream3sATI"))
  glNormalStream3svATI = cast[proc (stream: GLenum, coords: ptr GLshort) {.stdcall.}](load("glNormalStream3svATI"))
  glNormalStream3iATI = cast[proc (stream: GLenum, nx: GLint, ny: GLint, nz: GLint) {.stdcall.}](load("glNormalStream3iATI"))
  glNormalStream3ivATI = cast[proc (stream: GLenum, coords: ptr GLint) {.stdcall.}](load("glNormalStream3ivATI"))
  glNormalStream3fATI = cast[proc (stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) {.stdcall.}](load("glNormalStream3fATI"))
  glNormalStream3fvATI = cast[proc (stream: GLenum, coords: ptr GLfloat) {.stdcall.}](load("glNormalStream3fvATI"))
  glNormalStream3dATI = cast[proc (stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) {.stdcall.}](load("glNormalStream3dATI"))
  glNormalStream3dvATI = cast[proc (stream: GLenum, coords: ptr GLdouble) {.stdcall.}](load("glNormalStream3dvATI"))
  glClientActiveVertexStreamATI = cast[proc (stream: GLenum) {.stdcall.}](load("glClientActiveVertexStreamATI"))
  glVertexBlendEnviATI = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glVertexBlendEnviATI"))
  glVertexBlendEnvfATI = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glVertexBlendEnvfATI"))


proc load_GL_EXT_EGL_image_storage(load: proc) =
  if not GLAD_GL_EXT_EGL_image_storage: return
  glEGLImageTargetTexStorageEXT = cast[proc (target: GLenum, image: GLeglImageOES, attrib_list: ptr GLint) {.stdcall.}](load("glEGLImageTargetTexStorageEXT"))
  glEGLImageTargetTextureStorageEXT = cast[proc (texture: GLuint, image: GLeglImageOES, attrib_list: ptr GLint) {.stdcall.}](load("glEGLImageTargetTextureStorageEXT"))


proc load_GL_EXT_bindable_uniform(load: proc) =
  if not GLAD_GL_EXT_bindable_uniform: return
  glUniformBufferEXT = cast[proc (program: GLuint, location: GLint, buffer: GLuint) {.stdcall.}](load("glUniformBufferEXT"))
  glGetUniformBufferSizeEXT = cast[proc (program: GLuint, location: GLint): GLint {.stdcall.}](load("glGetUniformBufferSizeEXT"))
  glGetUniformOffsetEXT = cast[proc (program: GLuint, location: GLint): GLintptr {.stdcall.}](load("glGetUniformOffsetEXT"))


proc load_GL_EXT_blend_color(load: proc) =
  if not GLAD_GL_EXT_blend_color: return
  glBlendColorEXT = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.stdcall.}](load("glBlendColorEXT"))


proc load_GL_EXT_blend_equation_separate(load: proc) =
  if not GLAD_GL_EXT_blend_equation_separate: return
  glBlendEquationSeparateEXT = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.stdcall.}](load("glBlendEquationSeparateEXT"))


proc load_GL_EXT_blend_func_separate(load: proc) =
  if not GLAD_GL_EXT_blend_func_separate: return
  glBlendFuncSeparateEXT = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparateEXT"))


proc load_GL_EXT_blend_minmax(load: proc) =
  if not GLAD_GL_EXT_blend_minmax: return
  glBlendEquationEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glBlendEquationEXT"))


proc load_GL_EXT_color_subtable(load: proc) =
  if not GLAD_GL_EXT_color_subtable: return
  glColorSubTableEXT = cast[proc (target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glColorSubTableEXT"))
  glCopyColorSubTableEXT = cast[proc (target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyColorSubTableEXT"))


proc load_GL_EXT_compiled_vertex_array(load: proc) =
  if not GLAD_GL_EXT_compiled_vertex_array: return
  glLockArraysEXT = cast[proc (first: GLint, count: GLsizei) {.stdcall.}](load("glLockArraysEXT"))
  glUnlockArraysEXT = cast[proc () {.stdcall.}](load("glUnlockArraysEXT"))


proc load_GL_EXT_convolution(load: proc) =
  if not GLAD_GL_EXT_convolution: return
  glConvolutionFilter1DEXT = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}](load("glConvolutionFilter1DEXT"))
  glConvolutionFilter2DEXT = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}](load("glConvolutionFilter2DEXT"))
  glConvolutionParameterfEXT = cast[proc (target: GLenum, pname: GLenum, params: GLfloat) {.stdcall.}](load("glConvolutionParameterfEXT"))
  glConvolutionParameterfvEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glConvolutionParameterfvEXT"))
  glConvolutionParameteriEXT = cast[proc (target: GLenum, pname: GLenum, params: GLint) {.stdcall.}](load("glConvolutionParameteriEXT"))
  glConvolutionParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glConvolutionParameterivEXT"))
  glCopyConvolutionFilter1DEXT = cast[proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyConvolutionFilter1DEXT"))
  glCopyConvolutionFilter2DEXT = cast[proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyConvolutionFilter2DEXT"))
  glGetConvolutionFilterEXT = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, image: pointer) {.stdcall.}](load("glGetConvolutionFilterEXT"))
  glGetConvolutionParameterfvEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetConvolutionParameterfvEXT"))
  glGetConvolutionParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetConvolutionParameterivEXT"))
  glGetSeparableFilterEXT = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, row: pointer, column: pointer, span: pointer) {.stdcall.}](load("glGetSeparableFilterEXT"))
  glSeparableFilter2DEXT = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, row: pointer, column: pointer) {.stdcall.}](load("glSeparableFilter2DEXT"))


proc load_GL_EXT_coordinate_frame(load: proc) =
  if not GLAD_GL_EXT_coordinate_frame: return
  glTangent3bEXT = cast[proc (tx: GLbyte, ty: GLbyte, tz: GLbyte) {.stdcall.}](load("glTangent3bEXT"))
  glTangent3bvEXT = cast[proc (v: ptr GLbyte) {.stdcall.}](load("glTangent3bvEXT"))
  glTangent3dEXT = cast[proc (tx: GLdouble, ty: GLdouble, tz: GLdouble) {.stdcall.}](load("glTangent3dEXT"))
  glTangent3dvEXT = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glTangent3dvEXT"))
  glTangent3fEXT = cast[proc (tx: GLfloat, ty: GLfloat, tz: GLfloat) {.stdcall.}](load("glTangent3fEXT"))
  glTangent3fvEXT = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glTangent3fvEXT"))
  glTangent3iEXT = cast[proc (tx: GLint, ty: GLint, tz: GLint) {.stdcall.}](load("glTangent3iEXT"))
  glTangent3ivEXT = cast[proc (v: ptr GLint) {.stdcall.}](load("glTangent3ivEXT"))
  glTangent3sEXT = cast[proc (tx: GLshort, ty: GLshort, tz: GLshort) {.stdcall.}](load("glTangent3sEXT"))
  glTangent3svEXT = cast[proc (v: ptr GLshort) {.stdcall.}](load("glTangent3svEXT"))
  glBinormal3bEXT = cast[proc (bx: GLbyte, by: GLbyte, bz: GLbyte) {.stdcall.}](load("glBinormal3bEXT"))
  glBinormal3bvEXT = cast[proc (v: ptr GLbyte) {.stdcall.}](load("glBinormal3bvEXT"))
  glBinormal3dEXT = cast[proc (bx: GLdouble, by: GLdouble, bz: GLdouble) {.stdcall.}](load("glBinormal3dEXT"))
  glBinormal3dvEXT = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glBinormal3dvEXT"))
  glBinormal3fEXT = cast[proc (bx: GLfloat, by: GLfloat, bz: GLfloat) {.stdcall.}](load("glBinormal3fEXT"))
  glBinormal3fvEXT = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glBinormal3fvEXT"))
  glBinormal3iEXT = cast[proc (bx: GLint, by: GLint, bz: GLint) {.stdcall.}](load("glBinormal3iEXT"))
  glBinormal3ivEXT = cast[proc (v: ptr GLint) {.stdcall.}](load("glBinormal3ivEXT"))
  glBinormal3sEXT = cast[proc (bx: GLshort, by: GLshort, bz: GLshort) {.stdcall.}](load("glBinormal3sEXT"))
  glBinormal3svEXT = cast[proc (v: ptr GLshort) {.stdcall.}](load("glBinormal3svEXT"))
  glTangentPointerEXT = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glTangentPointerEXT"))
  glBinormalPointerEXT = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glBinormalPointerEXT"))


proc load_GL_EXT_copy_texture(load: proc) =
  if not GLAD_GL_EXT_copy_texture: return
  glCopyTexImage1DEXT = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}](load("glCopyTexImage1DEXT"))
  glCopyTexImage2DEXT = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}](load("glCopyTexImage2DEXT"))
  glCopyTexSubImage1DEXT = cast[proc (target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyTexSubImage1DEXT"))
  glCopyTexSubImage2DEXT = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage2DEXT"))
  glCopyTexSubImage3DEXT = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTexSubImage3DEXT"))


proc load_GL_EXT_cull_vertex(load: proc) =
  if not GLAD_GL_EXT_cull_vertex: return
  glCullParameterdvEXT = cast[proc (pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glCullParameterdvEXT"))
  glCullParameterfvEXT = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glCullParameterfvEXT"))


proc load_GL_EXT_debug_label(load: proc) =
  if not GLAD_GL_EXT_debug_label: return
  glLabelObjectEXT = cast[proc (`type`: GLenum, `object`: GLuint, length: GLsizei, label: cstring) {.stdcall.}](load("glLabelObjectEXT"))
  glGetObjectLabelEXT = cast[proc (`type`: GLenum, `object`: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}](load("glGetObjectLabelEXT"))


proc load_GL_EXT_debug_marker(load: proc) =
  if not GLAD_GL_EXT_debug_marker: return
  glInsertEventMarkerEXT = cast[proc (length: GLsizei, marker: cstring) {.stdcall.}](load("glInsertEventMarkerEXT"))
  glPushGroupMarkerEXT = cast[proc (length: GLsizei, marker: cstring) {.stdcall.}](load("glPushGroupMarkerEXT"))
  glPopGroupMarkerEXT = cast[proc () {.stdcall.}](load("glPopGroupMarkerEXT"))


proc load_GL_EXT_depth_bounds_test(load: proc) =
  if not GLAD_GL_EXT_depth_bounds_test: return
  glDepthBoundsEXT = cast[proc (zmin: GLclampd, zmax: GLclampd) {.stdcall.}](load("glDepthBoundsEXT"))


proc load_GL_EXT_direct_state_access(load: proc) =
  if not GLAD_GL_EXT_direct_state_access: return
  glMatrixLoadfEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixLoadfEXT"))
  glMatrixLoaddEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixLoaddEXT"))
  glMatrixMultfEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixMultfEXT"))
  glMatrixMultdEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixMultdEXT"))
  glMatrixLoadIdentityEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glMatrixLoadIdentityEXT"))
  glMatrixRotatefEXT = cast[proc (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glMatrixRotatefEXT"))
  glMatrixRotatedEXT = cast[proc (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glMatrixRotatedEXT"))
  glMatrixScalefEXT = cast[proc (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glMatrixScalefEXT"))
  glMatrixScaledEXT = cast[proc (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glMatrixScaledEXT"))
  glMatrixTranslatefEXT = cast[proc (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glMatrixTranslatefEXT"))
  glMatrixTranslatedEXT = cast[proc (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glMatrixTranslatedEXT"))
  glMatrixFrustumEXT = cast[proc (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.stdcall.}](load("glMatrixFrustumEXT"))
  glMatrixOrthoEXT = cast[proc (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.stdcall.}](load("glMatrixOrthoEXT"))
  glMatrixPopEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glMatrixPopEXT"))
  glMatrixPushEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glMatrixPushEXT"))
  glClientAttribDefaultEXT = cast[proc (mask: GLbitfield) {.stdcall.}](load("glClientAttribDefaultEXT"))
  glPushClientAttribDefaultEXT = cast[proc (mask: GLbitfield) {.stdcall.}](load("glPushClientAttribDefaultEXT"))
  glTextureParameterfEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glTextureParameterfEXT"))
  glTextureParameterfvEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glTextureParameterfvEXT"))
  glTextureParameteriEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glTextureParameteriEXT"))
  glTextureParameterivEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTextureParameterivEXT"))
  glTextureImage1DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureImage1DEXT"))
  glTextureImage2DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureImage2DEXT"))
  glTextureSubImage1DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage1DEXT"))
  glTextureSubImage2DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage2DEXT"))
  glCopyTextureImage1DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}](load("glCopyTextureImage1DEXT"))
  glCopyTextureImage2DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}](load("glCopyTextureImage2DEXT"))
  glCopyTextureSubImage1DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyTextureSubImage1DEXT"))
  glCopyTextureSubImage2DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTextureSubImage2DEXT"))
  glGetTextureImageEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glGetTextureImageEXT"))
  glGetTextureParameterfvEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTextureParameterfvEXT"))
  glGetTextureParameterivEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureParameterivEXT"))
  glGetTextureLevelParameterfvEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetTextureLevelParameterfvEXT"))
  glGetTextureLevelParameterivEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureLevelParameterivEXT"))
  glTextureImage3DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureImage3DEXT"))
  glTextureSubImage3DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTextureSubImage3DEXT"))
  glCopyTextureSubImage3DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyTextureSubImage3DEXT"))
  glBindMultiTextureEXT = cast[proc (texunit: GLenum, target: GLenum, texture: GLuint) {.stdcall.}](load("glBindMultiTextureEXT"))
  glMultiTexCoordPointerEXT = cast[proc (texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glMultiTexCoordPointerEXT"))
  glMultiTexEnvfEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glMultiTexEnvfEXT"))
  glMultiTexEnvfvEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glMultiTexEnvfvEXT"))
  glMultiTexEnviEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glMultiTexEnviEXT"))
  glMultiTexEnvivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glMultiTexEnvivEXT"))
  glMultiTexGendEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) {.stdcall.}](load("glMultiTexGendEXT"))
  glMultiTexGendvEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glMultiTexGendvEXT"))
  glMultiTexGenfEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glMultiTexGenfEXT"))
  glMultiTexGenfvEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glMultiTexGenfvEXT"))
  glMultiTexGeniEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glMultiTexGeniEXT"))
  glMultiTexGenivEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glMultiTexGenivEXT"))
  glGetMultiTexEnvfvEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMultiTexEnvfvEXT"))
  glGetMultiTexEnvivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMultiTexEnvivEXT"))
  glGetMultiTexGendvEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetMultiTexGendvEXT"))
  glGetMultiTexGenfvEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMultiTexGenfvEXT"))
  glGetMultiTexGenivEXT = cast[proc (texunit: GLenum, coord: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMultiTexGenivEXT"))
  glMultiTexParameteriEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glMultiTexParameteriEXT"))
  glMultiTexParameterivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glMultiTexParameterivEXT"))
  glMultiTexParameterfEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glMultiTexParameterfEXT"))
  glMultiTexParameterfvEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glMultiTexParameterfvEXT"))
  glMultiTexImage1DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glMultiTexImage1DEXT"))
  glMultiTexImage2DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glMultiTexImage2DEXT"))
  glMultiTexSubImage1DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glMultiTexSubImage1DEXT"))
  glMultiTexSubImage2DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glMultiTexSubImage2DEXT"))
  glCopyMultiTexImage1DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) {.stdcall.}](load("glCopyMultiTexImage1DEXT"))
  glCopyMultiTexImage2DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.stdcall.}](load("glCopyMultiTexImage2DEXT"))
  glCopyMultiTexSubImage1DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyMultiTexSubImage1DEXT"))
  glCopyMultiTexSubImage2DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyMultiTexSubImage2DEXT"))
  glGetMultiTexImageEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glGetMultiTexImageEXT"))
  glGetMultiTexParameterfvEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMultiTexParameterfvEXT"))
  glGetMultiTexParameterivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMultiTexParameterivEXT"))
  glGetMultiTexLevelParameterfvEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMultiTexLevelParameterfvEXT"))
  glGetMultiTexLevelParameterivEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMultiTexLevelParameterivEXT"))
  glMultiTexImage3DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glMultiTexImage3DEXT"))
  glMultiTexSubImage3DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glMultiTexSubImage3DEXT"))
  glCopyMultiTexSubImage3DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glCopyMultiTexSubImage3DEXT"))
  glEnableClientStateIndexedEXT = cast[proc (array: GLenum, index: GLuint) {.stdcall.}](load("glEnableClientStateIndexedEXT"))
  glDisableClientStateIndexedEXT = cast[proc (array: GLenum, index: GLuint) {.stdcall.}](load("glDisableClientStateIndexedEXT"))
  glGetFloatIndexedvEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLfloat) {.stdcall.}](load("glGetFloatIndexedvEXT"))
  glGetDoubleIndexedvEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLdouble) {.stdcall.}](load("glGetDoubleIndexedvEXT"))
  glGetPointerIndexedvEXT = cast[proc (target: GLenum, index: GLuint, data: ptr pointer) {.stdcall.}](load("glGetPointerIndexedvEXT"))
  glEnableIndexedEXT = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glEnableIndexedEXT"))
  glDisableIndexedEXT = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glDisableIndexedEXT"))
  glIsEnabledIndexedEXT = cast[proc (target: GLenum, index: GLuint): GLboolean {.stdcall.}](load("glIsEnabledIndexedEXT"))
  glGetIntegerIndexedvEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegerIndexedvEXT"))
  glGetBooleanIndexedvEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.stdcall.}](load("glGetBooleanIndexedvEXT"))
  glCompressedTextureImage3DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedTextureImage3DEXT"))
  glCompressedTextureImage2DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedTextureImage2DEXT"))
  glCompressedTextureImage1DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedTextureImage1DEXT"))
  glCompressedTextureSubImage3DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedTextureSubImage3DEXT"))
  glCompressedTextureSubImage2DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedTextureSubImage2DEXT"))
  glCompressedTextureSubImage1DEXT = cast[proc (texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedTextureSubImage1DEXT"))
  glGetCompressedTextureImageEXT = cast[proc (texture: GLuint, target: GLenum, lod: GLint, img: pointer) {.stdcall.}](load("glGetCompressedTextureImageEXT"))
  glCompressedMultiTexImage3DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedMultiTexImage3DEXT"))
  glCompressedMultiTexImage2DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedMultiTexImage2DEXT"))
  glCompressedMultiTexImage1DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedMultiTexImage1DEXT"))
  glCompressedMultiTexSubImage3DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedMultiTexSubImage3DEXT"))
  glCompressedMultiTexSubImage2DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedMultiTexSubImage2DEXT"))
  glCompressedMultiTexSubImage1DEXT = cast[proc (texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: pointer) {.stdcall.}](load("glCompressedMultiTexSubImage1DEXT"))
  glGetCompressedMultiTexImageEXT = cast[proc (texunit: GLenum, target: GLenum, lod: GLint, img: pointer) {.stdcall.}](load("glGetCompressedMultiTexImageEXT"))
  glMatrixLoadTransposefEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixLoadTransposefEXT"))
  glMatrixLoadTransposedEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixLoadTransposedEXT"))
  glMatrixMultTransposefEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixMultTransposefEXT"))
  glMatrixMultTransposedEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixMultTransposedEXT"))
  glNamedBufferDataEXT = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, usage: GLenum) {.stdcall.}](load("glNamedBufferDataEXT"))
  glNamedBufferSubDataEXT = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glNamedBufferSubDataEXT"))
  glMapNamedBufferEXT = cast[proc (buffer: GLuint, access: GLenum): pointer {.stdcall.}](load("glMapNamedBufferEXT"))
  glUnmapNamedBufferEXT = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glUnmapNamedBufferEXT"))
  glGetNamedBufferParameterivEXT = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedBufferParameterivEXT"))
  glGetNamedBufferPointervEXT = cast[proc (buffer: GLuint, pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetNamedBufferPointervEXT"))
  glGetNamedBufferSubDataEXT = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glGetNamedBufferSubDataEXT"))
  glProgramUniform1fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}](load("glProgramUniform1fEXT"))
  glProgramUniform2fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glProgramUniform2fEXT"))
  glProgramUniform3fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glProgramUniform3fEXT"))
  glProgramUniform4fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glProgramUniform4fEXT"))
  glProgramUniform1iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}](load("glProgramUniform1iEXT"))
  glProgramUniform2iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glProgramUniform2iEXT"))
  glProgramUniform3iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glProgramUniform3iEXT"))
  glProgramUniform4iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glProgramUniform4iEXT"))
  glProgramUniform1fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform1fvEXT"))
  glProgramUniform2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform2fvEXT"))
  glProgramUniform3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform3fvEXT"))
  glProgramUniform4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform4fvEXT"))
  glProgramUniform1ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform1ivEXT"))
  glProgramUniform2ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform2ivEXT"))
  glProgramUniform3ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform3ivEXT"))
  glProgramUniform4ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform4ivEXT"))
  glProgramUniformMatrix2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2fvEXT"))
  glProgramUniformMatrix3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3fvEXT"))
  glProgramUniformMatrix4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4fvEXT"))
  glProgramUniformMatrix2x3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x3fvEXT"))
  glProgramUniformMatrix3x2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x2fvEXT"))
  glProgramUniformMatrix2x4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x4fvEXT"))
  glProgramUniformMatrix4x2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x2fvEXT"))
  glProgramUniformMatrix3x4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x4fvEXT"))
  glProgramUniformMatrix4x3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x3fvEXT"))
  glTextureBufferEXT = cast[proc (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glTextureBufferEXT"))
  glMultiTexBufferEXT = cast[proc (texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glMultiTexBufferEXT"))
  glTextureParameterIivEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTextureParameterIivEXT"))
  glTextureParameterIuivEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glTextureParameterIuivEXT"))
  glGetTextureParameterIivEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTextureParameterIivEXT"))
  glGetTextureParameterIuivEXT = cast[proc (texture: GLuint, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetTextureParameterIuivEXT"))
  glMultiTexParameterIivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glMultiTexParameterIivEXT"))
  glMultiTexParameterIuivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glMultiTexParameterIuivEXT"))
  glGetMultiTexParameterIivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMultiTexParameterIivEXT"))
  glGetMultiTexParameterIuivEXT = cast[proc (texunit: GLenum, target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetMultiTexParameterIuivEXT"))
  glProgramUniform1uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}](load("glProgramUniform1uiEXT"))
  glProgramUniform2uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glProgramUniform2uiEXT"))
  glProgramUniform3uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glProgramUniform3uiEXT"))
  glProgramUniform4uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glProgramUniform4uiEXT"))
  glProgramUniform1uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform1uivEXT"))
  glProgramUniform2uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform2uivEXT"))
  glProgramUniform3uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform3uivEXT"))
  glProgramUniform4uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform4uivEXT"))
  glNamedProgramLocalParameters4fvEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glNamedProgramLocalParameters4fvEXT"))
  glNamedProgramLocalParameterI4iEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glNamedProgramLocalParameterI4iEXT"))
  glNamedProgramLocalParameterI4ivEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}](load("glNamedProgramLocalParameterI4ivEXT"))
  glNamedProgramLocalParametersI4ivEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glNamedProgramLocalParametersI4ivEXT"))
  glNamedProgramLocalParameterI4uiEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glNamedProgramLocalParameterI4uiEXT"))
  glNamedProgramLocalParameterI4uivEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}](load("glNamedProgramLocalParameterI4uivEXT"))
  glNamedProgramLocalParametersI4uivEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}](load("glNamedProgramLocalParametersI4uivEXT"))
  glGetNamedProgramLocalParameterIivEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}](load("glGetNamedProgramLocalParameterIivEXT"))
  glGetNamedProgramLocalParameterIuivEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}](load("glGetNamedProgramLocalParameterIuivEXT"))
  glEnableClientStateiEXT = cast[proc (array: GLenum, index: GLuint) {.stdcall.}](load("glEnableClientStateiEXT"))
  glDisableClientStateiEXT = cast[proc (array: GLenum, index: GLuint) {.stdcall.}](load("glDisableClientStateiEXT"))
  glGetFloati_vEXT = cast[proc (pname: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glGetFloati_vEXT"))
  glGetDoublei_vEXT = cast[proc (pname: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glGetDoublei_vEXT"))
  glGetPointeri_vEXT = cast[proc (pname: GLenum, index: GLuint, params: ptr pointer) {.stdcall.}](load("glGetPointeri_vEXT"))
  glNamedProgramStringEXT = cast[proc (program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: pointer) {.stdcall.}](load("glNamedProgramStringEXT"))
  glNamedProgramLocalParameter4dEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glNamedProgramLocalParameter4dEXT"))
  glNamedProgramLocalParameter4dvEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glNamedProgramLocalParameter4dvEXT"))
  glNamedProgramLocalParameter4fEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glNamedProgramLocalParameter4fEXT"))
  glNamedProgramLocalParameter4fvEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glNamedProgramLocalParameter4fvEXT"))
  glGetNamedProgramLocalParameterdvEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLdouble) {.stdcall.}](load("glGetNamedProgramLocalParameterdvEXT"))
  glGetNamedProgramLocalParameterfvEXT = cast[proc (program: GLuint, target: GLenum, index: GLuint, params: ptr GLfloat) {.stdcall.}](load("glGetNamedProgramLocalParameterfvEXT"))
  glGetNamedProgramivEXT = cast[proc (program: GLuint, target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedProgramivEXT"))
  glGetNamedProgramStringEXT = cast[proc (program: GLuint, target: GLenum, pname: GLenum, string: pointer) {.stdcall.}](load("glGetNamedProgramStringEXT"))
  glNamedRenderbufferStorageEXT = cast[proc (renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorageEXT"))
  glGetNamedRenderbufferParameterivEXT = cast[proc (renderbuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedRenderbufferParameterivEXT"))
  glNamedRenderbufferStorageMultisampleEXT = cast[proc (renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorageMultisampleEXT"))
  glNamedRenderbufferStorageMultisampleCoverageEXT = cast[proc (renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glNamedRenderbufferStorageMultisampleCoverageEXT"))
  glCheckNamedFramebufferStatusEXT = cast[proc (framebuffer: GLuint, target: GLenum): GLenum {.stdcall.}](load("glCheckNamedFramebufferStatusEXT"))
  glNamedFramebufferTexture1DEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glNamedFramebufferTexture1DEXT"))
  glNamedFramebufferTexture2DEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glNamedFramebufferTexture2DEXT"))
  glNamedFramebufferTexture3DEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}](load("glNamedFramebufferTexture3DEXT"))
  glNamedFramebufferRenderbufferEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glNamedFramebufferRenderbufferEXT"))
  glGetNamedFramebufferAttachmentParameterivEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedFramebufferAttachmentParameterivEXT"))
  glGenerateTextureMipmapEXT = cast[proc (texture: GLuint, target: GLenum) {.stdcall.}](load("glGenerateTextureMipmapEXT"))
  glGenerateMultiTexMipmapEXT = cast[proc (texunit: GLenum, target: GLenum) {.stdcall.}](load("glGenerateMultiTexMipmapEXT"))
  glFramebufferDrawBufferEXT = cast[proc (framebuffer: GLuint, mode: GLenum) {.stdcall.}](load("glFramebufferDrawBufferEXT"))
  glFramebufferDrawBuffersEXT = cast[proc (framebuffer: GLuint, n: GLsizei, bufs: ptr GLenum) {.stdcall.}](load("glFramebufferDrawBuffersEXT"))
  glFramebufferReadBufferEXT = cast[proc (framebuffer: GLuint, mode: GLenum) {.stdcall.}](load("glFramebufferReadBufferEXT"))
  glGetFramebufferParameterivEXT = cast[proc (framebuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferParameterivEXT"))
  glNamedCopyBufferSubDataEXT = cast[proc (readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glNamedCopyBufferSubDataEXT"))
  glNamedFramebufferTextureEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glNamedFramebufferTextureEXT"))
  glNamedFramebufferTextureLayerEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glNamedFramebufferTextureLayerEXT"))
  glNamedFramebufferTextureFaceEXT = cast[proc (framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) {.stdcall.}](load("glNamedFramebufferTextureFaceEXT"))
  glTextureRenderbufferEXT = cast[proc (texture: GLuint, target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glTextureRenderbufferEXT"))
  glMultiTexRenderbufferEXT = cast[proc (texunit: GLenum, target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glMultiTexRenderbufferEXT"))
  glVertexArrayVertexOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayVertexOffsetEXT"))
  glVertexArrayColorOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayColorOffsetEXT"))
  glVertexArrayEdgeFlagOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayEdgeFlagOffsetEXT"))
  glVertexArrayIndexOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayIndexOffsetEXT"))
  glVertexArrayNormalOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayNormalOffsetEXT"))
  glVertexArrayTexCoordOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayTexCoordOffsetEXT"))
  glVertexArrayMultiTexCoordOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayMultiTexCoordOffsetEXT"))
  glVertexArrayFogCoordOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayFogCoordOffsetEXT"))
  glVertexArraySecondaryColorOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArraySecondaryColorOffsetEXT"))
  glVertexArrayVertexAttribOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayVertexAttribOffsetEXT"))
  glVertexArrayVertexAttribIOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayVertexAttribIOffsetEXT"))
  glEnableVertexArrayEXT = cast[proc (vaobj: GLuint, array: GLenum) {.stdcall.}](load("glEnableVertexArrayEXT"))
  glDisableVertexArrayEXT = cast[proc (vaobj: GLuint, array: GLenum) {.stdcall.}](load("glDisableVertexArrayEXT"))
  glEnableVertexArrayAttribEXT = cast[proc (vaobj: GLuint, index: GLuint) {.stdcall.}](load("glEnableVertexArrayAttribEXT"))
  glDisableVertexArrayAttribEXT = cast[proc (vaobj: GLuint, index: GLuint) {.stdcall.}](load("glDisableVertexArrayAttribEXT"))
  glGetVertexArrayIntegervEXT = cast[proc (vaobj: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetVertexArrayIntegervEXT"))
  glGetVertexArrayPointervEXT = cast[proc (vaobj: GLuint, pname: GLenum, param: ptr pointer) {.stdcall.}](load("glGetVertexArrayPointervEXT"))
  glGetVertexArrayIntegeri_vEXT = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr GLint) {.stdcall.}](load("glGetVertexArrayIntegeri_vEXT"))
  glGetVertexArrayPointeri_vEXT = cast[proc (vaobj: GLuint, index: GLuint, pname: GLenum, param: ptr pointer) {.stdcall.}](load("glGetVertexArrayPointeri_vEXT"))
  glMapNamedBufferRangeEXT = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield): pointer {.stdcall.}](load("glMapNamedBufferRangeEXT"))
  glFlushMappedNamedBufferRangeEXT = cast[proc (buffer: GLuint, offset: GLintptr, length: GLsizeiptr) {.stdcall.}](load("glFlushMappedNamedBufferRangeEXT"))
  glNamedBufferStorageEXT = cast[proc (buffer: GLuint, size: GLsizeiptr, data: pointer, flags: GLbitfield) {.stdcall.}](load("glNamedBufferStorageEXT"))
  glClearNamedBufferDataEXT = cast[proc (buffer: GLuint, internalformat: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearNamedBufferDataEXT"))
  glClearNamedBufferSubDataEXT = cast[proc (buffer: GLuint, internalformat: GLenum, offset: GLsizeiptr, size: GLsizeiptr, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glClearNamedBufferSubDataEXT"))
  glNamedFramebufferParameteriEXT = cast[proc (framebuffer: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glNamedFramebufferParameteriEXT"))
  glGetNamedFramebufferParameterivEXT = cast[proc (framebuffer: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetNamedFramebufferParameterivEXT"))
  glProgramUniform1dEXT = cast[proc (program: GLuint, location: GLint, x: GLdouble) {.stdcall.}](load("glProgramUniform1dEXT"))
  glProgramUniform2dEXT = cast[proc (program: GLuint, location: GLint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glProgramUniform2dEXT"))
  glProgramUniform3dEXT = cast[proc (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glProgramUniform3dEXT"))
  glProgramUniform4dEXT = cast[proc (program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glProgramUniform4dEXT"))
  glProgramUniform1dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform1dvEXT"))
  glProgramUniform2dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform2dvEXT"))
  glProgramUniform3dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform3dvEXT"))
  glProgramUniform4dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLdouble) {.stdcall.}](load("glProgramUniform4dvEXT"))
  glProgramUniformMatrix2dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2dvEXT"))
  glProgramUniformMatrix3dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3dvEXT"))
  glProgramUniformMatrix4dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4dvEXT"))
  glProgramUniformMatrix2x3dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x3dvEXT"))
  glProgramUniformMatrix2x4dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix2x4dvEXT"))
  glProgramUniformMatrix3x2dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x2dvEXT"))
  glProgramUniformMatrix3x4dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix3x4dvEXT"))
  glProgramUniformMatrix4x2dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x2dvEXT"))
  glProgramUniformMatrix4x3dvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLdouble) {.stdcall.}](load("glProgramUniformMatrix4x3dvEXT"))
  glTextureBufferRangeEXT = cast[proc (texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glTextureBufferRangeEXT"))
  glTextureStorage1DEXT = cast[proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}](load("glTextureStorage1DEXT"))
  glTextureStorage2DEXT = cast[proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTextureStorage2DEXT"))
  glTextureStorage3DEXT = cast[proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTextureStorage3DEXT"))
  glTextureStorage2DMultisampleEXT = cast[proc (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTextureStorage2DMultisampleEXT"))
  glTextureStorage3DMultisampleEXT = cast[proc (texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) {.stdcall.}](load("glTextureStorage3DMultisampleEXT"))
  glVertexArrayBindVertexBufferEXT = cast[proc (vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) {.stdcall.}](load("glVertexArrayBindVertexBufferEXT"))
  glVertexArrayVertexAttribFormatEXT = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayVertexAttribFormatEXT"))
  glVertexArrayVertexAttribIFormatEXT = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayVertexAttribIFormatEXT"))
  glVertexArrayVertexAttribLFormatEXT = cast[proc (vaobj: GLuint, attribindex: GLuint, size: GLint, `type`: GLenum, relativeoffset: GLuint) {.stdcall.}](load("glVertexArrayVertexAttribLFormatEXT"))
  glVertexArrayVertexAttribBindingEXT = cast[proc (vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) {.stdcall.}](load("glVertexArrayVertexAttribBindingEXT"))
  glVertexArrayVertexBindingDivisorEXT = cast[proc (vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexArrayVertexBindingDivisorEXT"))
  glVertexArrayVertexAttribLOffsetEXT = cast[proc (vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, offset: GLintptr) {.stdcall.}](load("glVertexArrayVertexAttribLOffsetEXT"))
  glTexturePageCommitmentEXT = cast[proc (texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, commit: GLboolean) {.stdcall.}](load("glTexturePageCommitmentEXT"))
  glVertexArrayVertexAttribDivisorEXT = cast[proc (vaobj: GLuint, index: GLuint, divisor: GLuint) {.stdcall.}](load("glVertexArrayVertexAttribDivisorEXT"))


proc load_GL_EXT_draw_buffers2(load: proc) =
  if not GLAD_GL_EXT_draw_buffers2: return
  glColorMaskIndexedEXT = cast[proc (index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) {.stdcall.}](load("glColorMaskIndexedEXT"))
  glGetBooleanIndexedvEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLboolean) {.stdcall.}](load("glGetBooleanIndexedvEXT"))
  glGetIntegerIndexedvEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLint) {.stdcall.}](load("glGetIntegerIndexedvEXT"))
  glEnableIndexedEXT = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glEnableIndexedEXT"))
  glDisableIndexedEXT = cast[proc (target: GLenum, index: GLuint) {.stdcall.}](load("glDisableIndexedEXT"))
  glIsEnabledIndexedEXT = cast[proc (target: GLenum, index: GLuint): GLboolean {.stdcall.}](load("glIsEnabledIndexedEXT"))


proc load_GL_EXT_draw_instanced(load: proc) =
  if not GLAD_GL_EXT_draw_instanced: return
  glDrawArraysInstancedEXT = cast[proc (mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) {.stdcall.}](load("glDrawArraysInstancedEXT"))
  glDrawElementsInstancedEXT = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer, primcount: GLsizei) {.stdcall.}](load("glDrawElementsInstancedEXT"))


proc load_GL_EXT_draw_range_elements(load: proc) =
  if not GLAD_GL_EXT_draw_range_elements: return
  glDrawRangeElementsEXT = cast[proc (mode: GLenum, start: GLuint, `end`: GLuint, count: GLsizei, `type`: GLenum, indices: pointer) {.stdcall.}](load("glDrawRangeElementsEXT"))


proc load_GL_EXT_external_buffer(load: proc) =
  if not GLAD_GL_EXT_external_buffer: return
  glBufferStorageExternalEXT = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) {.stdcall.}](load("glBufferStorageExternalEXT"))
  glNamedBufferStorageExternalEXT = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, clientBuffer: GLeglClientBufferEXT, flags: GLbitfield) {.stdcall.}](load("glNamedBufferStorageExternalEXT"))


proc load_GL_EXT_fog_coord(load: proc) =
  if not GLAD_GL_EXT_fog_coord: return
  glFogCoordfEXT = cast[proc (coord: GLfloat) {.stdcall.}](load("glFogCoordfEXT"))
  glFogCoordfvEXT = cast[proc (coord: ptr GLfloat) {.stdcall.}](load("glFogCoordfvEXT"))
  glFogCoorddEXT = cast[proc (coord: GLdouble) {.stdcall.}](load("glFogCoorddEXT"))
  glFogCoorddvEXT = cast[proc (coord: ptr GLdouble) {.stdcall.}](load("glFogCoorddvEXT"))
  glFogCoordPointerEXT = cast[proc (`type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glFogCoordPointerEXT"))


proc load_GL_EXT_framebuffer_blit(load: proc) =
  if not GLAD_GL_EXT_framebuffer_blit: return
  glBlitFramebufferEXT = cast[proc (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glBlitFramebufferEXT"))


proc load_GL_EXT_framebuffer_multisample(load: proc) =
  if not GLAD_GL_EXT_framebuffer_multisample: return
  glRenderbufferStorageMultisampleEXT = cast[proc (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageMultisampleEXT"))


proc load_GL_EXT_framebuffer_object(load: proc) =
  if not GLAD_GL_EXT_framebuffer_object: return
  glIsRenderbufferEXT = cast[proc (renderbuffer: GLuint): GLboolean {.stdcall.}](load("glIsRenderbufferEXT"))
  glBindRenderbufferEXT = cast[proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glBindRenderbufferEXT"))
  glDeleteRenderbuffersEXT = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glDeleteRenderbuffersEXT"))
  glGenRenderbuffersEXT = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.stdcall.}](load("glGenRenderbuffersEXT"))
  glRenderbufferStorageEXT = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageEXT"))
  glGetRenderbufferParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetRenderbufferParameterivEXT"))
  glIsFramebufferEXT = cast[proc (framebuffer: GLuint): GLboolean {.stdcall.}](load("glIsFramebufferEXT"))
  glBindFramebufferEXT = cast[proc (target: GLenum, framebuffer: GLuint) {.stdcall.}](load("glBindFramebufferEXT"))
  glDeleteFramebuffersEXT = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glDeleteFramebuffersEXT"))
  glGenFramebuffersEXT = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.stdcall.}](load("glGenFramebuffersEXT"))
  glCheckFramebufferStatusEXT = cast[proc (target: GLenum): GLenum {.stdcall.}](load("glCheckFramebufferStatusEXT"))
  glFramebufferTexture1DEXT = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture1DEXT"))
  glFramebufferTexture2DEXT = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTexture2DEXT"))
  glFramebufferTexture3DEXT = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) {.stdcall.}](load("glFramebufferTexture3DEXT"))
  glFramebufferRenderbufferEXT = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glFramebufferRenderbufferEXT"))
  glGetFramebufferAttachmentParameterivEXT = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferAttachmentParameterivEXT"))
  glGenerateMipmapEXT = cast[proc (target: GLenum) {.stdcall.}](load("glGenerateMipmapEXT"))


proc load_GL_EXT_geometry_shader4(load: proc) =
  if not GLAD_GL_EXT_geometry_shader4: return
  glProgramParameteriEXT = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteriEXT"))


proc load_GL_EXT_gpu_program_parameters(load: proc) =
  if not GLAD_GL_EXT_gpu_program_parameters: return
  glProgramEnvParameters4fvEXT = cast[proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glProgramEnvParameters4fvEXT"))
  glProgramLocalParameters4fvEXT = cast[proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glProgramLocalParameters4fvEXT"))


proc load_GL_EXT_gpu_shader4(load: proc) =
  if not GLAD_GL_EXT_gpu_shader4: return
  glGetUniformuivEXT = cast[proc (program: GLuint, location: GLint, params: ptr GLuint) {.stdcall.}](load("glGetUniformuivEXT"))
  glBindFragDataLocationEXT = cast[proc (program: GLuint, color: GLuint, name: cstring) {.stdcall.}](load("glBindFragDataLocationEXT"))
  glGetFragDataLocationEXT = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetFragDataLocationEXT"))
  glUniform1uiEXT = cast[proc (location: GLint, v0: GLuint) {.stdcall.}](load("glUniform1uiEXT"))
  glUniform2uiEXT = cast[proc (location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glUniform2uiEXT"))
  glUniform3uiEXT = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glUniform3uiEXT"))
  glUniform4uiEXT = cast[proc (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glUniform4uiEXT"))
  glUniform1uivEXT = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform1uivEXT"))
  glUniform2uivEXT = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform2uivEXT"))
  glUniform3uivEXT = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform3uivEXT"))
  glUniform4uivEXT = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glUniform4uivEXT"))
  glVertexAttribI1iEXT = cast[proc (index: GLuint, x: GLint) {.stdcall.}](load("glVertexAttribI1iEXT"))
  glVertexAttribI2iEXT = cast[proc (index: GLuint, x: GLint, y: GLint) {.stdcall.}](load("glVertexAttribI2iEXT"))
  glVertexAttribI3iEXT = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.stdcall.}](load("glVertexAttribI3iEXT"))
  glVertexAttribI4iEXT = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glVertexAttribI4iEXT"))
  glVertexAttribI1uiEXT = cast[proc (index: GLuint, x: GLuint) {.stdcall.}](load("glVertexAttribI1uiEXT"))
  glVertexAttribI2uiEXT = cast[proc (index: GLuint, x: GLuint, y: GLuint) {.stdcall.}](load("glVertexAttribI2uiEXT"))
  glVertexAttribI3uiEXT = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.stdcall.}](load("glVertexAttribI3uiEXT"))
  glVertexAttribI4uiEXT = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glVertexAttribI4uiEXT"))
  glVertexAttribI1ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI1ivEXT"))
  glVertexAttribI2ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI2ivEXT"))
  glVertexAttribI3ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI3ivEXT"))
  glVertexAttribI4ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI4ivEXT"))
  glVertexAttribI1uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI1uivEXT"))
  glVertexAttribI2uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI2uivEXT"))
  glVertexAttribI3uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI3uivEXT"))
  glVertexAttribI4uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI4uivEXT"))
  glVertexAttribI4bvEXT = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttribI4bvEXT"))
  glVertexAttribI4svEXT = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttribI4svEXT"))
  glVertexAttribI4ubvEXT = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttribI4ubvEXT"))
  glVertexAttribI4usvEXT = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttribI4usvEXT"))
  glVertexAttribIPointerEXT = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribIPointerEXT"))
  glGetVertexAttribIivEXT = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribIivEXT"))
  glGetVertexAttribIuivEXT = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetVertexAttribIuivEXT"))


proc load_GL_EXT_histogram(load: proc) =
  if not GLAD_GL_EXT_histogram: return
  glGetHistogramEXT = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}](load("glGetHistogramEXT"))
  glGetHistogramParameterfvEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetHistogramParameterfvEXT"))
  glGetHistogramParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetHistogramParameterivEXT"))
  glGetMinmaxEXT = cast[proc (target: GLenum, reset: GLboolean, format: GLenum, `type`: GLenum, values: pointer) {.stdcall.}](load("glGetMinmaxEXT"))
  glGetMinmaxParameterfvEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMinmaxParameterfvEXT"))
  glGetMinmaxParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMinmaxParameterivEXT"))
  glHistogramEXT = cast[proc (target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) {.stdcall.}](load("glHistogramEXT"))
  glMinmaxEXT = cast[proc (target: GLenum, internalformat: GLenum, sink: GLboolean) {.stdcall.}](load("glMinmaxEXT"))
  glResetHistogramEXT = cast[proc (target: GLenum) {.stdcall.}](load("glResetHistogramEXT"))
  glResetMinmaxEXT = cast[proc (target: GLenum) {.stdcall.}](load("glResetMinmaxEXT"))


proc load_GL_EXT_index_func(load: proc) =
  if not GLAD_GL_EXT_index_func: return
  glIndexFuncEXT = cast[proc (`func`: GLenum, `ref`: GLclampf) {.stdcall.}](load("glIndexFuncEXT"))


proc load_GL_EXT_index_material(load: proc) =
  if not GLAD_GL_EXT_index_material: return
  glIndexMaterialEXT = cast[proc (face: GLenum, mode: GLenum) {.stdcall.}](load("glIndexMaterialEXT"))


proc load_GL_EXT_light_texture(load: proc) =
  if not GLAD_GL_EXT_light_texture: return
  glApplyTextureEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glApplyTextureEXT"))
  glTextureLightEXT = cast[proc (pname: GLenum) {.stdcall.}](load("glTextureLightEXT"))
  glTextureMaterialEXT = cast[proc (face: GLenum, mode: GLenum) {.stdcall.}](load("glTextureMaterialEXT"))


proc load_GL_EXT_memory_object(load: proc) =
  if not GLAD_GL_EXT_memory_object: return
  glGetUnsignedBytevEXT = cast[proc (pname: GLenum, data: ptr GLubyte) {.stdcall.}](load("glGetUnsignedBytevEXT"))
  glGetUnsignedBytei_vEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLubyte) {.stdcall.}](load("glGetUnsignedBytei_vEXT"))
  glDeleteMemoryObjectsEXT = cast[proc (n: GLsizei, memoryObjects: ptr GLuint) {.stdcall.}](load("glDeleteMemoryObjectsEXT"))
  glIsMemoryObjectEXT = cast[proc (memoryObject: GLuint): GLboolean {.stdcall.}](load("glIsMemoryObjectEXT"))
  glCreateMemoryObjectsEXT = cast[proc (n: GLsizei, memoryObjects: ptr GLuint) {.stdcall.}](load("glCreateMemoryObjectsEXT"))
  glMemoryObjectParameterivEXT = cast[proc (memoryObject: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glMemoryObjectParameterivEXT"))
  glGetMemoryObjectParameterivEXT = cast[proc (memoryObject: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMemoryObjectParameterivEXT"))
  glTexStorageMem2DEXT = cast[proc (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTexStorageMem2DEXT"))
  glTexStorageMem2DMultisampleEXT = cast[proc (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTexStorageMem2DMultisampleEXT"))
  glTexStorageMem3DEXT = cast[proc (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTexStorageMem3DEXT"))
  glTexStorageMem3DMultisampleEXT = cast[proc (target: GLenum, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTexStorageMem3DMultisampleEXT"))
  glBufferStorageMemEXT = cast[proc (target: GLenum, size: GLsizeiptr, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glBufferStorageMemEXT"))
  glTextureStorageMem2DEXT = cast[proc (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTextureStorageMem2DEXT"))
  glTextureStorageMem2DMultisampleEXT = cast[proc (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTextureStorageMem2DMultisampleEXT"))
  glTextureStorageMem3DEXT = cast[proc (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTextureStorageMem3DEXT"))
  glTextureStorageMem3DMultisampleEXT = cast[proc (texture: GLuint, samples: GLsizei, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTextureStorageMem3DMultisampleEXT"))
  glNamedBufferStorageMemEXT = cast[proc (buffer: GLuint, size: GLsizeiptr, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glNamedBufferStorageMemEXT"))
  glTexStorageMem1DEXT = cast[proc (target: GLenum, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTexStorageMem1DEXT"))
  glTextureStorageMem1DEXT = cast[proc (texture: GLuint, levels: GLsizei, internalFormat: GLenum, width: GLsizei, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTextureStorageMem1DEXT"))


proc load_GL_EXT_memory_object_fd(load: proc) =
  if not GLAD_GL_EXT_memory_object_fd: return
  glImportMemoryFdEXT = cast[proc (memory: GLuint, size: GLuint64, handleType: GLenum, fd: GLint) {.stdcall.}](load("glImportMemoryFdEXT"))


proc load_GL_EXT_memory_object_win32(load: proc) =
  if not GLAD_GL_EXT_memory_object_win32: return
  glImportMemoryWin32HandleEXT = cast[proc (memory: GLuint, size: GLuint64, handleType: GLenum, handle: pointer) {.stdcall.}](load("glImportMemoryWin32HandleEXT"))
  glImportMemoryWin32NameEXT = cast[proc (memory: GLuint, size: GLuint64, handleType: GLenum, name: pointer) {.stdcall.}](load("glImportMemoryWin32NameEXT"))


proc load_GL_EXT_multi_draw_arrays(load: proc) =
  if not GLAD_GL_EXT_multi_draw_arrays: return
  glMultiDrawArraysEXT = cast[proc (mode: GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei) {.stdcall.}](load("glMultiDrawArraysEXT"))
  glMultiDrawElementsEXT = cast[proc (mode: GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei) {.stdcall.}](load("glMultiDrawElementsEXT"))


proc load_GL_EXT_multisample(load: proc) =
  if not GLAD_GL_EXT_multisample: return
  glSampleMaskEXT = cast[proc (value: GLclampf, invert: GLboolean) {.stdcall.}](load("glSampleMaskEXT"))
  glSamplePatternEXT = cast[proc (pattern: GLenum) {.stdcall.}](load("glSamplePatternEXT"))


proc load_GL_EXT_paletted_texture(load: proc) =
  if not GLAD_GL_EXT_paletted_texture: return
  glColorTableEXT = cast[proc (target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}](load("glColorTableEXT"))
  glGetColorTableEXT = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, data: pointer) {.stdcall.}](load("glGetColorTableEXT"))
  glGetColorTableParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetColorTableParameterivEXT"))
  glGetColorTableParameterfvEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetColorTableParameterfvEXT"))


proc load_GL_EXT_pixel_transform(load: proc) =
  if not GLAD_GL_EXT_pixel_transform: return
  glPixelTransformParameteriEXT = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glPixelTransformParameteriEXT"))
  glPixelTransformParameterfEXT = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glPixelTransformParameterfEXT"))
  glPixelTransformParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glPixelTransformParameterivEXT"))
  glPixelTransformParameterfvEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glPixelTransformParameterfvEXT"))
  glGetPixelTransformParameterivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetPixelTransformParameterivEXT"))
  glGetPixelTransformParameterfvEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetPixelTransformParameterfvEXT"))


proc load_GL_EXT_point_parameters(load: proc) =
  if not GLAD_GL_EXT_point_parameters: return
  glPointParameterfEXT = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPointParameterfEXT"))
  glPointParameterfvEXT = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glPointParameterfvEXT"))


proc load_GL_EXT_polygon_offset(load: proc) =
  if not GLAD_GL_EXT_polygon_offset: return
  glPolygonOffsetEXT = cast[proc (factor: GLfloat, bias: GLfloat) {.stdcall.}](load("glPolygonOffsetEXT"))


proc load_GL_EXT_polygon_offset_clamp(load: proc) =
  if not GLAD_GL_EXT_polygon_offset_clamp: return
  glPolygonOffsetClampEXT = cast[proc (factor: GLfloat, units: GLfloat, clamp: GLfloat) {.stdcall.}](load("glPolygonOffsetClampEXT"))


proc load_GL_EXT_provoking_vertex(load: proc) =
  if not GLAD_GL_EXT_provoking_vertex: return
  glProvokingVertexEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glProvokingVertexEXT"))


proc load_GL_EXT_raster_multisample(load: proc) =
  if not GLAD_GL_EXT_raster_multisample: return
  glRasterSamplesEXT = cast[proc (samples: GLuint, fixedsamplelocations: GLboolean) {.stdcall.}](load("glRasterSamplesEXT"))


proc load_GL_EXT_secondary_color(load: proc) =
  if not GLAD_GL_EXT_secondary_color: return
  glSecondaryColor3bEXT = cast[proc (red: GLbyte, green: GLbyte, blue: GLbyte) {.stdcall.}](load("glSecondaryColor3bEXT"))
  glSecondaryColor3bvEXT = cast[proc (v: ptr GLbyte) {.stdcall.}](load("glSecondaryColor3bvEXT"))
  glSecondaryColor3dEXT = cast[proc (red: GLdouble, green: GLdouble, blue: GLdouble) {.stdcall.}](load("glSecondaryColor3dEXT"))
  glSecondaryColor3dvEXT = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glSecondaryColor3dvEXT"))
  glSecondaryColor3fEXT = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat) {.stdcall.}](load("glSecondaryColor3fEXT"))
  glSecondaryColor3fvEXT = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glSecondaryColor3fvEXT"))
  glSecondaryColor3iEXT = cast[proc (red: GLint, green: GLint, blue: GLint) {.stdcall.}](load("glSecondaryColor3iEXT"))
  glSecondaryColor3ivEXT = cast[proc (v: ptr GLint) {.stdcall.}](load("glSecondaryColor3ivEXT"))
  glSecondaryColor3sEXT = cast[proc (red: GLshort, green: GLshort, blue: GLshort) {.stdcall.}](load("glSecondaryColor3sEXT"))
  glSecondaryColor3svEXT = cast[proc (v: ptr GLshort) {.stdcall.}](load("glSecondaryColor3svEXT"))
  glSecondaryColor3ubEXT = cast[proc (red: GLubyte, green: GLubyte, blue: GLubyte) {.stdcall.}](load("glSecondaryColor3ubEXT"))
  glSecondaryColor3ubvEXT = cast[proc (v: ptr GLubyte) {.stdcall.}](load("glSecondaryColor3ubvEXT"))
  glSecondaryColor3uiEXT = cast[proc (red: GLuint, green: GLuint, blue: GLuint) {.stdcall.}](load("glSecondaryColor3uiEXT"))
  glSecondaryColor3uivEXT = cast[proc (v: ptr GLuint) {.stdcall.}](load("glSecondaryColor3uivEXT"))
  glSecondaryColor3usEXT = cast[proc (red: GLushort, green: GLushort, blue: GLushort) {.stdcall.}](load("glSecondaryColor3usEXT"))
  glSecondaryColor3usvEXT = cast[proc (v: ptr GLushort) {.stdcall.}](load("glSecondaryColor3usvEXT"))
  glSecondaryColorPointerEXT = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glSecondaryColorPointerEXT"))


proc load_GL_EXT_semaphore(load: proc) =
  if not GLAD_GL_EXT_semaphore: return
  glGetUnsignedBytevEXT = cast[proc (pname: GLenum, data: ptr GLubyte) {.stdcall.}](load("glGetUnsignedBytevEXT"))
  glGetUnsignedBytei_vEXT = cast[proc (target: GLenum, index: GLuint, data: ptr GLubyte) {.stdcall.}](load("glGetUnsignedBytei_vEXT"))
  glGenSemaphoresEXT = cast[proc (n: GLsizei, semaphores: ptr GLuint) {.stdcall.}](load("glGenSemaphoresEXT"))
  glDeleteSemaphoresEXT = cast[proc (n: GLsizei, semaphores: ptr GLuint) {.stdcall.}](load("glDeleteSemaphoresEXT"))
  glIsSemaphoreEXT = cast[proc (semaphore: GLuint): GLboolean {.stdcall.}](load("glIsSemaphoreEXT"))
  glSemaphoreParameterui64vEXT = cast[proc (semaphore: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}](load("glSemaphoreParameterui64vEXT"))
  glGetSemaphoreParameterui64vEXT = cast[proc (semaphore: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}](load("glGetSemaphoreParameterui64vEXT"))
  glWaitSemaphoreEXT = cast[proc (semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, srcLayouts: ptr GLenum) {.stdcall.}](load("glWaitSemaphoreEXT"))
  glSignalSemaphoreEXT = cast[proc (semaphore: GLuint, numBufferBarriers: GLuint, buffers: ptr GLuint, numTextureBarriers: GLuint, textures: ptr GLuint, dstLayouts: ptr GLenum) {.stdcall.}](load("glSignalSemaphoreEXT"))


proc load_GL_EXT_semaphore_fd(load: proc) =
  if not GLAD_GL_EXT_semaphore_fd: return
  glImportSemaphoreFdEXT = cast[proc (semaphore: GLuint, handleType: GLenum, fd: GLint) {.stdcall.}](load("glImportSemaphoreFdEXT"))


proc load_GL_EXT_semaphore_win32(load: proc) =
  if not GLAD_GL_EXT_semaphore_win32: return
  glImportSemaphoreWin32HandleEXT = cast[proc (semaphore: GLuint, handleType: GLenum, handle: pointer) {.stdcall.}](load("glImportSemaphoreWin32HandleEXT"))
  glImportSemaphoreWin32NameEXT = cast[proc (semaphore: GLuint, handleType: GLenum, name: pointer) {.stdcall.}](load("glImportSemaphoreWin32NameEXT"))


proc load_GL_EXT_separate_shader_objects(load: proc) =
  if not GLAD_GL_EXT_separate_shader_objects: return
  glUseShaderProgramEXT = cast[proc (`type`: GLenum, program: GLuint) {.stdcall.}](load("glUseShaderProgramEXT"))
  glActiveProgramEXT = cast[proc (program: GLuint) {.stdcall.}](load("glActiveProgramEXT"))
  glCreateShaderProgramEXT = cast[proc (`type`: GLenum, string: cstring): GLuint {.stdcall.}](load("glCreateShaderProgramEXT"))
  glActiveShaderProgramEXT = cast[proc (pipeline: GLuint, program: GLuint) {.stdcall.}](load("glActiveShaderProgramEXT"))
  glBindProgramPipelineEXT = cast[proc (pipeline: GLuint) {.stdcall.}](load("glBindProgramPipelineEXT"))
  glCreateShaderProgramvEXT = cast[proc (`type`: GLenum, count: GLsizei, strings: cstringArray): GLuint {.stdcall.}](load("glCreateShaderProgramvEXT"))
  glDeleteProgramPipelinesEXT = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glDeleteProgramPipelinesEXT"))
  glGenProgramPipelinesEXT = cast[proc (n: GLsizei, pipelines: ptr GLuint) {.stdcall.}](load("glGenProgramPipelinesEXT"))
  glGetProgramPipelineInfoLogEXT = cast[proc (pipeline: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.stdcall.}](load("glGetProgramPipelineInfoLogEXT"))
  glGetProgramPipelineivEXT = cast[proc (pipeline: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramPipelineivEXT"))
  glIsProgramPipelineEXT = cast[proc (pipeline: GLuint): GLboolean {.stdcall.}](load("glIsProgramPipelineEXT"))
  glProgramParameteriEXT = cast[proc (program: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glProgramParameteriEXT"))
  glProgramUniform1fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat) {.stdcall.}](load("glProgramUniform1fEXT"))
  glProgramUniform1fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform1fvEXT"))
  glProgramUniform1iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint) {.stdcall.}](load("glProgramUniform1iEXT"))
  glProgramUniform1ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform1ivEXT"))
  glProgramUniform2fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) {.stdcall.}](load("glProgramUniform2fEXT"))
  glProgramUniform2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform2fvEXT"))
  glProgramUniform2iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint) {.stdcall.}](load("glProgramUniform2iEXT"))
  glProgramUniform2ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform2ivEXT"))
  glProgramUniform3fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.stdcall.}](load("glProgramUniform3fEXT"))
  glProgramUniform3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform3fvEXT"))
  glProgramUniform3iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) {.stdcall.}](load("glProgramUniform3iEXT"))
  glProgramUniform3ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform3ivEXT"))
  glProgramUniform4fEXT = cast[proc (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.stdcall.}](load("glProgramUniform4fEXT"))
  glProgramUniform4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLfloat) {.stdcall.}](load("glProgramUniform4fvEXT"))
  glProgramUniform4iEXT = cast[proc (program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.stdcall.}](load("glProgramUniform4iEXT"))
  glProgramUniform4ivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint) {.stdcall.}](load("glProgramUniform4ivEXT"))
  glProgramUniformMatrix2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2fvEXT"))
  glProgramUniformMatrix3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3fvEXT"))
  glProgramUniformMatrix4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4fvEXT"))
  glUseProgramStagesEXT = cast[proc (pipeline: GLuint, stages: GLbitfield, program: GLuint) {.stdcall.}](load("glUseProgramStagesEXT"))
  glValidateProgramPipelineEXT = cast[proc (pipeline: GLuint) {.stdcall.}](load("glValidateProgramPipelineEXT"))
  glProgramUniform1uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint) {.stdcall.}](load("glProgramUniform1uiEXT"))
  glProgramUniform2uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) {.stdcall.}](load("glProgramUniform2uiEXT"))
  glProgramUniform3uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) {.stdcall.}](load("glProgramUniform3uiEXT"))
  glProgramUniform4uiEXT = cast[proc (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) {.stdcall.}](load("glProgramUniform4uiEXT"))
  glProgramUniform1uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform1uivEXT"))
  glProgramUniform2uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform2uivEXT"))
  glProgramUniform3uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform3uivEXT"))
  glProgramUniform4uivEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint) {.stdcall.}](load("glProgramUniform4uivEXT"))
  glProgramUniformMatrix2x3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x3fvEXT"))
  glProgramUniformMatrix3x2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x2fvEXT"))
  glProgramUniformMatrix2x4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix2x4fvEXT"))
  glProgramUniformMatrix4x2fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x2fvEXT"))
  glProgramUniformMatrix3x4fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix3x4fvEXT"))
  glProgramUniformMatrix4x3fvEXT = cast[proc (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.stdcall.}](load("glProgramUniformMatrix4x3fvEXT"))


proc load_GL_EXT_shader_framebuffer_fetch_non_coherent(load: proc) =
  if not GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent: return
  glFramebufferFetchBarrierEXT = cast[proc () {.stdcall.}](load("glFramebufferFetchBarrierEXT"))


proc load_GL_EXT_shader_image_load_store(load: proc) =
  if not GLAD_GL_EXT_shader_image_load_store: return
  glBindImageTextureEXT = cast[proc (index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) {.stdcall.}](load("glBindImageTextureEXT"))
  glMemoryBarrierEXT = cast[proc (barriers: GLbitfield) {.stdcall.}](load("glMemoryBarrierEXT"))


proc load_GL_EXT_stencil_clear_tag(load: proc) =
  if not GLAD_GL_EXT_stencil_clear_tag: return
  glStencilClearTagEXT = cast[proc (stencilTagBits: GLsizei, stencilClearTag: GLuint) {.stdcall.}](load("glStencilClearTagEXT"))


proc load_GL_EXT_stencil_two_side(load: proc) =
  if not GLAD_GL_EXT_stencil_two_side: return
  glActiveStencilFaceEXT = cast[proc (face: GLenum) {.stdcall.}](load("glActiveStencilFaceEXT"))


proc load_GL_EXT_subtexture(load: proc) =
  if not GLAD_GL_EXT_subtexture: return
  glTexSubImage1DEXT = cast[proc (target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage1DEXT"))
  glTexSubImage2DEXT = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage2DEXT"))


proc load_GL_EXT_texture3D(load: proc) =
  if not GLAD_GL_EXT_texture3D: return
  glTexImage3DEXT = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage3DEXT"))
  glTexSubImage3DEXT = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage3DEXT"))


proc load_GL_EXT_texture_array(load: proc) =
  if not GLAD_GL_EXT_texture_array: return
  glFramebufferTextureLayerEXT = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glFramebufferTextureLayerEXT"))


proc load_GL_EXT_texture_buffer_object(load: proc) =
  if not GLAD_GL_EXT_texture_buffer_object: return
  glTexBufferEXT = cast[proc (target: GLenum, internalformat: GLenum, buffer: GLuint) {.stdcall.}](load("glTexBufferEXT"))


proc load_GL_EXT_texture_integer(load: proc) =
  if not GLAD_GL_EXT_texture_integer: return
  glTexParameterIivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glTexParameterIivEXT"))
  glTexParameterIuivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glTexParameterIuivEXT"))
  glGetTexParameterIivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTexParameterIivEXT"))
  glGetTexParameterIuivEXT = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetTexParameterIuivEXT"))
  glClearColorIiEXT = cast[proc (red: GLint, green: GLint, blue: GLint, alpha: GLint) {.stdcall.}](load("glClearColorIiEXT"))
  glClearColorIuiEXT = cast[proc (red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) {.stdcall.}](load("glClearColorIuiEXT"))


proc load_GL_EXT_texture_object(load: proc) =
  if not GLAD_GL_EXT_texture_object: return
  glAreTexturesResidentEXT = cast[proc (n: GLsizei, textures: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}](load("glAreTexturesResidentEXT"))
  glBindTextureEXT = cast[proc (target: GLenum, texture: GLuint) {.stdcall.}](load("glBindTextureEXT"))
  glDeleteTexturesEXT = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glDeleteTexturesEXT"))
  glGenTexturesEXT = cast[proc (n: GLsizei, textures: ptr GLuint) {.stdcall.}](load("glGenTexturesEXT"))
  glIsTextureEXT = cast[proc (texture: GLuint): GLboolean {.stdcall.}](load("glIsTextureEXT"))
  glPrioritizeTexturesEXT = cast[proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLclampf) {.stdcall.}](load("glPrioritizeTexturesEXT"))


proc load_GL_EXT_texture_perturb_normal(load: proc) =
  if not GLAD_GL_EXT_texture_perturb_normal: return
  glTextureNormalEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glTextureNormalEXT"))


proc load_GL_EXT_texture_storage(load: proc) =
  if not GLAD_GL_EXT_texture_storage: return
  glTexStorage1DEXT = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}](load("glTexStorage1DEXT"))
  glTexStorage2DEXT = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTexStorage2DEXT"))
  glTexStorage3DEXT = cast[proc (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTexStorage3DEXT"))
  glTextureStorage1DEXT = cast[proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) {.stdcall.}](load("glTextureStorage1DEXT"))
  glTextureStorage2DEXT = cast[proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glTextureStorage2DEXT"))
  glTextureStorage3DEXT = cast[proc (texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glTextureStorage3DEXT"))


proc load_GL_EXT_timer_query(load: proc) =
  if not GLAD_GL_EXT_timer_query: return
  glGetQueryObjecti64vEXT = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glGetQueryObjecti64vEXT"))
  glGetQueryObjectui64vEXT = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}](load("glGetQueryObjectui64vEXT"))


proc load_GL_EXT_transform_feedback(load: proc) =
  if not GLAD_GL_EXT_transform_feedback: return
  glBeginTransformFeedbackEXT = cast[proc (primitiveMode: GLenum) {.stdcall.}](load("glBeginTransformFeedbackEXT"))
  glEndTransformFeedbackEXT = cast[proc () {.stdcall.}](load("glEndTransformFeedbackEXT"))
  glBindBufferRangeEXT = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRangeEXT"))
  glBindBufferOffsetEXT = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) {.stdcall.}](load("glBindBufferOffsetEXT"))
  glBindBufferBaseEXT = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBaseEXT"))
  glTransformFeedbackVaryingsEXT = cast[proc (program: GLuint, count: GLsizei, varyings: cstringArray, bufferMode: GLenum) {.stdcall.}](load("glTransformFeedbackVaryingsEXT"))
  glGetTransformFeedbackVaryingEXT = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetTransformFeedbackVaryingEXT"))


proc load_GL_EXT_vertex_array(load: proc) =
  if not GLAD_GL_EXT_vertex_array: return
  glArrayElementEXT = cast[proc (i: GLint) {.stdcall.}](load("glArrayElementEXT"))
  glColorPointerEXT = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}](load("glColorPointerEXT"))
  glDrawArraysEXT = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.stdcall.}](load("glDrawArraysEXT"))
  glEdgeFlagPointerEXT = cast[proc (stride: GLsizei, count: GLsizei, pointer: ptr GLboolean) {.stdcall.}](load("glEdgeFlagPointerEXT"))
  glGetPointervEXT = cast[proc (pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetPointervEXT"))
  glIndexPointerEXT = cast[proc (`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}](load("glIndexPointerEXT"))
  glNormalPointerEXT = cast[proc (`type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}](load("glNormalPointerEXT"))
  glTexCoordPointerEXT = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}](load("glTexCoordPointerEXT"))
  glVertexPointerEXT = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, count: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexPointerEXT"))


proc load_GL_EXT_vertex_attrib_64bit(load: proc) =
  if not GLAD_GL_EXT_vertex_attrib_64bit: return
  glVertexAttribL1dEXT = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttribL1dEXT"))
  glVertexAttribL2dEXT = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttribL2dEXT"))
  glVertexAttribL3dEXT = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttribL3dEXT"))
  glVertexAttribL4dEXT = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttribL4dEXT"))
  glVertexAttribL1dvEXT = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL1dvEXT"))
  glVertexAttribL2dvEXT = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL2dvEXT"))
  glVertexAttribL3dvEXT = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL3dvEXT"))
  glVertexAttribL4dvEXT = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribL4dvEXT"))
  glVertexAttribLPointerEXT = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribLPointerEXT"))
  glGetVertexAttribLdvEXT = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribLdvEXT"))


proc load_GL_EXT_vertex_shader(load: proc) =
  if not GLAD_GL_EXT_vertex_shader: return
  glBeginVertexShaderEXT = cast[proc () {.stdcall.}](load("glBeginVertexShaderEXT"))
  glEndVertexShaderEXT = cast[proc () {.stdcall.}](load("glEndVertexShaderEXT"))
  glBindVertexShaderEXT = cast[proc (id: GLuint) {.stdcall.}](load("glBindVertexShaderEXT"))
  glGenVertexShadersEXT = cast[proc (range: GLuint): GLuint {.stdcall.}](load("glGenVertexShadersEXT"))
  glDeleteVertexShaderEXT = cast[proc (id: GLuint) {.stdcall.}](load("glDeleteVertexShaderEXT"))
  glShaderOp1EXT = cast[proc (op: GLenum, res: GLuint, arg1: GLuint) {.stdcall.}](load("glShaderOp1EXT"))
  glShaderOp2EXT = cast[proc (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) {.stdcall.}](load("glShaderOp2EXT"))
  glShaderOp3EXT = cast[proc (op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) {.stdcall.}](load("glShaderOp3EXT"))
  glSwizzleEXT = cast[proc (res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) {.stdcall.}](load("glSwizzleEXT"))
  glWriteMaskEXT = cast[proc (res: GLuint, `in`: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) {.stdcall.}](load("glWriteMaskEXT"))
  glInsertComponentEXT = cast[proc (res: GLuint, src: GLuint, num: GLuint) {.stdcall.}](load("glInsertComponentEXT"))
  glExtractComponentEXT = cast[proc (res: GLuint, src: GLuint, num: GLuint) {.stdcall.}](load("glExtractComponentEXT"))
  glGenSymbolsEXT = cast[proc (datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint): GLuint {.stdcall.}](load("glGenSymbolsEXT"))
  glSetInvariantEXT = cast[proc (id: GLuint, `type`: GLenum, `addr`: pointer) {.stdcall.}](load("glSetInvariantEXT"))
  glSetLocalConstantEXT = cast[proc (id: GLuint, `type`: GLenum, `addr`: pointer) {.stdcall.}](load("glSetLocalConstantEXT"))
  glVariantbvEXT = cast[proc (id: GLuint, `addr`: ptr GLbyte) {.stdcall.}](load("glVariantbvEXT"))
  glVariantsvEXT = cast[proc (id: GLuint, `addr`: ptr GLshort) {.stdcall.}](load("glVariantsvEXT"))
  glVariantivEXT = cast[proc (id: GLuint, `addr`: ptr GLint) {.stdcall.}](load("glVariantivEXT"))
  glVariantfvEXT = cast[proc (id: GLuint, `addr`: ptr GLfloat) {.stdcall.}](load("glVariantfvEXT"))
  glVariantdvEXT = cast[proc (id: GLuint, `addr`: ptr GLdouble) {.stdcall.}](load("glVariantdvEXT"))
  glVariantubvEXT = cast[proc (id: GLuint, `addr`: ptr GLubyte) {.stdcall.}](load("glVariantubvEXT"))
  glVariantusvEXT = cast[proc (id: GLuint, `addr`: ptr GLushort) {.stdcall.}](load("glVariantusvEXT"))
  glVariantuivEXT = cast[proc (id: GLuint, `addr`: ptr GLuint) {.stdcall.}](load("glVariantuivEXT"))
  glVariantPointerEXT = cast[proc (id: GLuint, `type`: GLenum, stride: GLuint, `addr`: pointer) {.stdcall.}](load("glVariantPointerEXT"))
  glEnableVariantClientStateEXT = cast[proc (id: GLuint) {.stdcall.}](load("glEnableVariantClientStateEXT"))
  glDisableVariantClientStateEXT = cast[proc (id: GLuint) {.stdcall.}](load("glDisableVariantClientStateEXT"))
  glBindLightParameterEXT = cast[proc (light: GLenum, value: GLenum): GLuint {.stdcall.}](load("glBindLightParameterEXT"))
  glBindMaterialParameterEXT = cast[proc (face: GLenum, value: GLenum): GLuint {.stdcall.}](load("glBindMaterialParameterEXT"))
  glBindTexGenParameterEXT = cast[proc (unit: GLenum, coord: GLenum, value: GLenum): GLuint {.stdcall.}](load("glBindTexGenParameterEXT"))
  glBindTextureUnitParameterEXT = cast[proc (unit: GLenum, value: GLenum): GLuint {.stdcall.}](load("glBindTextureUnitParameterEXT"))
  glBindParameterEXT = cast[proc (value: GLenum): GLuint {.stdcall.}](load("glBindParameterEXT"))
  glIsVariantEnabledEXT = cast[proc (id: GLuint, cap: GLenum): GLboolean {.stdcall.}](load("glIsVariantEnabledEXT"))
  glGetVariantBooleanvEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLboolean) {.stdcall.}](load("glGetVariantBooleanvEXT"))
  glGetVariantIntegervEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLint) {.stdcall.}](load("glGetVariantIntegervEXT"))
  glGetVariantFloatvEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLfloat) {.stdcall.}](load("glGetVariantFloatvEXT"))
  glGetVariantPointervEXT = cast[proc (id: GLuint, value: GLenum, data: ptr pointer) {.stdcall.}](load("glGetVariantPointervEXT"))
  glGetInvariantBooleanvEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLboolean) {.stdcall.}](load("glGetInvariantBooleanvEXT"))
  glGetInvariantIntegervEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLint) {.stdcall.}](load("glGetInvariantIntegervEXT"))
  glGetInvariantFloatvEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLfloat) {.stdcall.}](load("glGetInvariantFloatvEXT"))
  glGetLocalConstantBooleanvEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLboolean) {.stdcall.}](load("glGetLocalConstantBooleanvEXT"))
  glGetLocalConstantIntegervEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLint) {.stdcall.}](load("glGetLocalConstantIntegervEXT"))
  glGetLocalConstantFloatvEXT = cast[proc (id: GLuint, value: GLenum, data: ptr GLfloat) {.stdcall.}](load("glGetLocalConstantFloatvEXT"))


proc load_GL_EXT_vertex_weighting(load: proc) =
  if not GLAD_GL_EXT_vertex_weighting: return
  glVertexWeightfEXT = cast[proc (weight: GLfloat) {.stdcall.}](load("glVertexWeightfEXT"))
  glVertexWeightfvEXT = cast[proc (weight: ptr GLfloat) {.stdcall.}](load("glVertexWeightfvEXT"))
  glVertexWeightPointerEXT = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexWeightPointerEXT"))


proc load_GL_EXT_win32_keyed_mutex(load: proc) =
  if not GLAD_GL_EXT_win32_keyed_mutex: return
  glAcquireKeyedMutexWin32EXT = cast[proc (memory: GLuint, key: GLuint64, timeout: GLuint): GLboolean {.stdcall.}](load("glAcquireKeyedMutexWin32EXT"))
  glReleaseKeyedMutexWin32EXT = cast[proc (memory: GLuint, key: GLuint64): GLboolean {.stdcall.}](load("glReleaseKeyedMutexWin32EXT"))


proc load_GL_EXT_window_rectangles(load: proc) =
  if not GLAD_GL_EXT_window_rectangles: return
  glWindowRectanglesEXT = cast[proc (mode: GLenum, count: GLsizei, box: ptr GLint) {.stdcall.}](load("glWindowRectanglesEXT"))


proc load_GL_EXT_x11_sync_object(load: proc) =
  if not GLAD_GL_EXT_x11_sync_object: return
  glImportSyncEXT = cast[proc (external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield): GLsync {.stdcall.}](load("glImportSyncEXT"))


proc load_GL_GREMEDY_frame_terminator(load: proc) =
  if not GLAD_GL_GREMEDY_frame_terminator: return
  glFrameTerminatorGREMEDY = cast[proc () {.stdcall.}](load("glFrameTerminatorGREMEDY"))


proc load_GL_GREMEDY_string_marker(load: proc) =
  if not GLAD_GL_GREMEDY_string_marker: return
  glStringMarkerGREMEDY = cast[proc (len: GLsizei, string: pointer) {.stdcall.}](load("glStringMarkerGREMEDY"))


proc load_GL_HP_image_transform(load: proc) =
  if not GLAD_GL_HP_image_transform: return
  glImageTransformParameteriHP = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glImageTransformParameteriHP"))
  glImageTransformParameterfHP = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glImageTransformParameterfHP"))
  glImageTransformParameterivHP = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glImageTransformParameterivHP"))
  glImageTransformParameterfvHP = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glImageTransformParameterfvHP"))
  glGetImageTransformParameterivHP = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetImageTransformParameterivHP"))
  glGetImageTransformParameterfvHP = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetImageTransformParameterfvHP"))


proc load_GL_IBM_multimode_draw_arrays(load: proc) =
  if not GLAD_GL_IBM_multimode_draw_arrays: return
  glMultiModeDrawArraysIBM = cast[proc (mode: ptr GLenum, first: ptr GLint, count: ptr GLsizei, primcount: GLsizei, modestride: GLint) {.stdcall.}](load("glMultiModeDrawArraysIBM"))
  glMultiModeDrawElementsIBM = cast[proc (mode: ptr GLenum, count: ptr GLsizei, `type`: GLenum, indices: ptr pointer, primcount: GLsizei, modestride: GLint) {.stdcall.}](load("glMultiModeDrawElementsIBM"))


proc load_GL_IBM_static_data(load: proc) =
  if not GLAD_GL_IBM_static_data: return
  glFlushStaticDataIBM = cast[proc (target: GLenum) {.stdcall.}](load("glFlushStaticDataIBM"))


proc load_GL_IBM_vertex_array_lists(load: proc) =
  if not GLAD_GL_IBM_vertex_array_lists: return
  glColorPointerListIBM = cast[proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glColorPointerListIBM"))
  glSecondaryColorPointerListIBM = cast[proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glSecondaryColorPointerListIBM"))
  glEdgeFlagPointerListIBM = cast[proc (stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glEdgeFlagPointerListIBM"))
  glFogCoordPointerListIBM = cast[proc (`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glFogCoordPointerListIBM"))
  glIndexPointerListIBM = cast[proc (`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glIndexPointerListIBM"))
  glNormalPointerListIBM = cast[proc (`type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glNormalPointerListIBM"))
  glTexCoordPointerListIBM = cast[proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glTexCoordPointerListIBM"))
  glVertexPointerListIBM = cast[proc (size: GLint, `type`: GLenum, stride: GLint, pointer: ptr pointer, ptrstride: GLint) {.stdcall.}](load("glVertexPointerListIBM"))


proc load_GL_INGR_blend_func_separate(load: proc) =
  if not GLAD_GL_INGR_blend_func_separate: return
  glBlendFuncSeparateINGR = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.stdcall.}](load("glBlendFuncSeparateINGR"))


proc load_GL_INTEL_framebuffer_CMAA(load: proc) =
  if not GLAD_GL_INTEL_framebuffer_CMAA: return
  glApplyFramebufferAttachmentCMAAINTEL = cast[proc () {.stdcall.}](load("glApplyFramebufferAttachmentCMAAINTEL"))


proc load_GL_INTEL_map_texture(load: proc) =
  if not GLAD_GL_INTEL_map_texture: return
  glSyncTextureINTEL = cast[proc (texture: GLuint) {.stdcall.}](load("glSyncTextureINTEL"))
  glUnmapTexture2DINTEL = cast[proc (texture: GLuint, level: GLint) {.stdcall.}](load("glUnmapTexture2DINTEL"))
  glMapTexture2DINTEL = cast[proc (texture: GLuint, level: GLint, access: GLbitfield, stride: ptr GLint, layout: ptr GLenum): pointer {.stdcall.}](load("glMapTexture2DINTEL"))


proc load_GL_INTEL_parallel_arrays(load: proc) =
  if not GLAD_GL_INTEL_parallel_arrays: return
  glVertexPointervINTEL = cast[proc (size: GLint, `type`: GLenum, pointer: ptr pointer) {.stdcall.}](load("glVertexPointervINTEL"))
  glNormalPointervINTEL = cast[proc (`type`: GLenum, pointer: ptr pointer) {.stdcall.}](load("glNormalPointervINTEL"))
  glColorPointervINTEL = cast[proc (size: GLint, `type`: GLenum, pointer: ptr pointer) {.stdcall.}](load("glColorPointervINTEL"))
  glTexCoordPointervINTEL = cast[proc (size: GLint, `type`: GLenum, pointer: ptr pointer) {.stdcall.}](load("glTexCoordPointervINTEL"))


proc load_GL_INTEL_performance_query(load: proc) =
  if not GLAD_GL_INTEL_performance_query: return
  glBeginPerfQueryINTEL = cast[proc (queryHandle: GLuint) {.stdcall.}](load("glBeginPerfQueryINTEL"))
  glCreatePerfQueryINTEL = cast[proc (queryId: GLuint, queryHandle: ptr GLuint) {.stdcall.}](load("glCreatePerfQueryINTEL"))
  glDeletePerfQueryINTEL = cast[proc (queryHandle: GLuint) {.stdcall.}](load("glDeletePerfQueryINTEL"))
  glEndPerfQueryINTEL = cast[proc (queryHandle: GLuint) {.stdcall.}](load("glEndPerfQueryINTEL"))
  glGetFirstPerfQueryIdINTEL = cast[proc (queryId: ptr GLuint) {.stdcall.}](load("glGetFirstPerfQueryIdINTEL"))
  glGetNextPerfQueryIdINTEL = cast[proc (queryId: GLuint, nextQueryId: ptr GLuint) {.stdcall.}](load("glGetNextPerfQueryIdINTEL"))
  glGetPerfCounterInfoINTEL = cast[proc (queryId: GLuint, counterId: GLuint, counterNameLength: GLuint, counterName: cstring, counterDescLength: GLuint, counterDesc: cstring, counterOffset: ptr GLuint, counterDataSize: ptr GLuint, counterTypeEnum: ptr GLuint, counterDataTypeEnum: ptr GLuint, rawCounterMaxValue: ptr GLuint64) {.stdcall.}](load("glGetPerfCounterInfoINTEL"))
  glGetPerfQueryDataINTEL = cast[proc (queryHandle: GLuint, flags: GLuint, dataSize: GLsizei, data: pointer, bytesWritten: ptr GLuint) {.stdcall.}](load("glGetPerfQueryDataINTEL"))
  glGetPerfQueryIdByNameINTEL = cast[proc (queryName: cstring, queryId: ptr GLuint) {.stdcall.}](load("glGetPerfQueryIdByNameINTEL"))
  glGetPerfQueryInfoINTEL = cast[proc (queryId: GLuint, queryNameLength: GLuint, queryName: cstring, dataSize: ptr GLuint, noCounters: ptr GLuint, noInstances: ptr GLuint, capsMask: ptr GLuint) {.stdcall.}](load("glGetPerfQueryInfoINTEL"))


proc load_GL_KHR_blend_equation_advanced(load: proc) =
  if not GLAD_GL_KHR_blend_equation_advanced: return
  glBlendBarrierKHR = cast[proc () {.stdcall.}](load("glBlendBarrierKHR"))


proc load_GL_KHR_debug(load: proc) =
  if not GLAD_GL_KHR_debug: return
  glDebugMessageControl = cast[proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}](load("glDebugMessageControl"))
  glDebugMessageInsert = cast[proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.stdcall.}](load("glDebugMessageInsert"))
  glDebugMessageCallback = cast[proc (callback: GLDEBUGPROC, userParam: pointer) {.stdcall.}](load("glDebugMessageCallback"))
  glGetDebugMessageLog = cast[proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](load("glGetDebugMessageLog"))
  glPushDebugGroup = cast[proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.stdcall.}](load("glPushDebugGroup"))
  glPopDebugGroup = cast[proc () {.stdcall.}](load("glPopDebugGroup"))
  glObjectLabel = cast[proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.stdcall.}](load("glObjectLabel"))
  glGetObjectLabel = cast[proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}](load("glGetObjectLabel"))
  glObjectPtrLabel = cast[proc (`ptr`: pointer, length: GLsizei, label: cstring) {.stdcall.}](load("glObjectPtrLabel"))
  glGetObjectPtrLabel = cast[proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}](load("glGetObjectPtrLabel"))
  glGetPointerv = cast[proc (pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetPointerv"))
  glDebugMessageControlKHR = cast[proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.stdcall.}](load("glDebugMessageControlKHR"))
  glDebugMessageInsertKHR = cast[proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.stdcall.}](load("glDebugMessageInsertKHR"))
  glDebugMessageCallbackKHR = cast[proc (callback: GLDEBUGPROCKHR, userParam: pointer) {.stdcall.}](load("glDebugMessageCallbackKHR"))
  glGetDebugMessageLogKHR = cast[proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.stdcall.}](load("glGetDebugMessageLogKHR"))
  glPushDebugGroupKHR = cast[proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.stdcall.}](load("glPushDebugGroupKHR"))
  glPopDebugGroupKHR = cast[proc () {.stdcall.}](load("glPopDebugGroupKHR"))
  glObjectLabelKHR = cast[proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.stdcall.}](load("glObjectLabelKHR"))
  glGetObjectLabelKHR = cast[proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}](load("glGetObjectLabelKHR"))
  glObjectPtrLabelKHR = cast[proc (`ptr`: pointer, length: GLsizei, label: cstring) {.stdcall.}](load("glObjectPtrLabelKHR"))
  glGetObjectPtrLabelKHR = cast[proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.stdcall.}](load("glGetObjectPtrLabelKHR"))
  glGetPointervKHR = cast[proc (pname: GLenum, params: ptr pointer) {.stdcall.}](load("glGetPointervKHR"))


proc load_GL_KHR_parallel_shader_compile(load: proc) =
  if not GLAD_GL_KHR_parallel_shader_compile: return
  glMaxShaderCompilerThreadsKHR = cast[proc (count: GLuint) {.stdcall.}](load("glMaxShaderCompilerThreadsKHR"))


proc load_GL_KHR_robustness(load: proc) =
  if not GLAD_GL_KHR_robustness: return
  glGetGraphicsResetStatus = cast[proc (): GLenum {.stdcall.}](load("glGetGraphicsResetStatus"))
  glReadnPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.stdcall.}](load("glReadnPixels"))
  glGetnUniformfv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glGetnUniformfv"))
  glGetnUniformiv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetnUniformiv"))
  glGetnUniformuiv = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.stdcall.}](load("glGetnUniformuiv"))
  glGetGraphicsResetStatusKHR = cast[proc (): GLenum {.stdcall.}](load("glGetGraphicsResetStatusKHR"))
  glReadnPixelsKHR = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, bufSize: GLsizei, data: pointer) {.stdcall.}](load("glReadnPixelsKHR"))
  glGetnUniformfvKHR = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glGetnUniformfvKHR"))
  glGetnUniformivKHR = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetnUniformivKHR"))
  glGetnUniformuivKHR = cast[proc (program: GLuint, location: GLint, bufSize: GLsizei, params: ptr GLuint) {.stdcall.}](load("glGetnUniformuivKHR"))


proc load_GL_MESA_framebuffer_flip_y(load: proc) =
  if not GLAD_GL_MESA_framebuffer_flip_y: return
  glFramebufferParameteriMESA = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glFramebufferParameteriMESA"))
  glGetFramebufferParameterivMESA = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFramebufferParameterivMESA"))


proc load_GL_MESA_resize_buffers(load: proc) =
  if not GLAD_GL_MESA_resize_buffers: return
  glResizeBuffersMESA = cast[proc () {.stdcall.}](load("glResizeBuffersMESA"))


proc load_GL_MESA_window_pos(load: proc) =
  if not GLAD_GL_MESA_window_pos: return
  glWindowPos2dMESA = cast[proc (x: GLdouble, y: GLdouble) {.stdcall.}](load("glWindowPos2dMESA"))
  glWindowPos2dvMESA = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glWindowPos2dvMESA"))
  glWindowPos2fMESA = cast[proc (x: GLfloat, y: GLfloat) {.stdcall.}](load("glWindowPos2fMESA"))
  glWindowPos2fvMESA = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glWindowPos2fvMESA"))
  glWindowPos2iMESA = cast[proc (x: GLint, y: GLint) {.stdcall.}](load("glWindowPos2iMESA"))
  glWindowPos2ivMESA = cast[proc (v: ptr GLint) {.stdcall.}](load("glWindowPos2ivMESA"))
  glWindowPos2sMESA = cast[proc (x: GLshort, y: GLshort) {.stdcall.}](load("glWindowPos2sMESA"))
  glWindowPos2svMESA = cast[proc (v: ptr GLshort) {.stdcall.}](load("glWindowPos2svMESA"))
  glWindowPos3dMESA = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glWindowPos3dMESA"))
  glWindowPos3dvMESA = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glWindowPos3dvMESA"))
  glWindowPos3fMESA = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glWindowPos3fMESA"))
  glWindowPos3fvMESA = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glWindowPos3fvMESA"))
  glWindowPos3iMESA = cast[proc (x: GLint, y: GLint, z: GLint) {.stdcall.}](load("glWindowPos3iMESA"))
  glWindowPos3ivMESA = cast[proc (v: ptr GLint) {.stdcall.}](load("glWindowPos3ivMESA"))
  glWindowPos3sMESA = cast[proc (x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glWindowPos3sMESA"))
  glWindowPos3svMESA = cast[proc (v: ptr GLshort) {.stdcall.}](load("glWindowPos3svMESA"))
  glWindowPos4dMESA = cast[proc (x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glWindowPos4dMESA"))
  glWindowPos4dvMESA = cast[proc (v: ptr GLdouble) {.stdcall.}](load("glWindowPos4dvMESA"))
  glWindowPos4fMESA = cast[proc (x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glWindowPos4fMESA"))
  glWindowPos4fvMESA = cast[proc (v: ptr GLfloat) {.stdcall.}](load("glWindowPos4fvMESA"))
  glWindowPos4iMESA = cast[proc (x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glWindowPos4iMESA"))
  glWindowPos4ivMESA = cast[proc (v: ptr GLint) {.stdcall.}](load("glWindowPos4ivMESA"))
  glWindowPos4sMESA = cast[proc (x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}](load("glWindowPos4sMESA"))
  glWindowPos4svMESA = cast[proc (v: ptr GLshort) {.stdcall.}](load("glWindowPos4svMESA"))


proc load_GL_NVX_conditional_render(load: proc) =
  if not GLAD_GL_NVX_conditional_render: return
  glBeginConditionalRenderNVX = cast[proc (id: GLuint) {.stdcall.}](load("glBeginConditionalRenderNVX"))
  glEndConditionalRenderNVX = cast[proc () {.stdcall.}](load("glEndConditionalRenderNVX"))


proc load_GL_NVX_gpu_multicast2(load: proc) =
  if not GLAD_GL_NVX_gpu_multicast2: return
  glUploadGpuMaskNVX = cast[proc (mask: GLbitfield) {.stdcall.}](load("glUploadGpuMaskNVX"))
  glMulticastViewportArrayvNVX = cast[proc (gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glMulticastViewportArrayvNVX"))
  glMulticastViewportPositionWScaleNVX = cast[proc (gpu: GLuint, index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) {.stdcall.}](load("glMulticastViewportPositionWScaleNVX"))
  glMulticastScissorArrayvNVX = cast[proc (gpu: GLuint, first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}](load("glMulticastScissorArrayvNVX"))
  glAsyncCopyBufferSubDataNVX = cast[proc (waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64, readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}](load("glAsyncCopyBufferSubDataNVX"))
  glAsyncCopyImageSubDataNVX = cast[proc (waitSemaphoreCount: GLsizei, waitSemaphoreArray: ptr GLuint, waitValueArray: ptr GLuint64, srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei, signalSemaphoreCount: GLsizei, signalSemaphoreArray: ptr GLuint, signalValueArray: ptr GLuint64): GLuint {.stdcall.}](load("glAsyncCopyImageSubDataNVX"))


proc load_GL_NVX_linked_gpu_multicast(load: proc) =
  if not GLAD_GL_NVX_linked_gpu_multicast: return
  glLGPUNamedBufferSubDataNVX = cast[proc (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glLGPUNamedBufferSubDataNVX"))
  glLGPUCopyImageSubDataNVX = cast[proc (sourceGpu: GLuint, destinationGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srxY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glLGPUCopyImageSubDataNVX"))
  glLGPUInterlockNVX = cast[proc () {.stdcall.}](load("glLGPUInterlockNVX"))


proc load_GL_NVX_progress_fence(load: proc) =
  if not GLAD_GL_NVX_progress_fence: return
  glCreateProgressFenceNVX = cast[proc (): GLuint {.stdcall.}](load("glCreateProgressFenceNVX"))
  glSignalSemaphoreui64NVX = cast[proc (signalGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64) {.stdcall.}](load("glSignalSemaphoreui64NVX"))
  glWaitSemaphoreui64NVX = cast[proc (waitGpu: GLuint, fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64) {.stdcall.}](load("glWaitSemaphoreui64NVX"))
  glClientWaitSemaphoreui64NVX = cast[proc (fenceObjectCount: GLsizei, semaphoreArray: ptr GLuint, fenceValueArray: ptr GLuint64) {.stdcall.}](load("glClientWaitSemaphoreui64NVX"))


proc load_GL_NV_alpha_to_coverage_dither_control(load: proc) =
  if not GLAD_GL_NV_alpha_to_coverage_dither_control: return
  glAlphaToCoverageDitherControlNV = cast[proc (mode: GLenum) {.stdcall.}](load("glAlphaToCoverageDitherControlNV"))


proc load_GL_NV_bindless_multi_draw_indirect(load: proc) =
  if not GLAD_GL_NV_bindless_multi_draw_indirect: return
  glMultiDrawArraysIndirectBindlessNV = cast[proc (mode: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}](load("glMultiDrawArraysIndirectBindlessNV"))
  glMultiDrawElementsIndirectBindlessNV = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}](load("glMultiDrawElementsIndirectBindlessNV"))


proc load_GL_NV_bindless_multi_draw_indirect_count(load: proc) =
  if not GLAD_GL_NV_bindless_multi_draw_indirect_count: return
  glMultiDrawArraysIndirectBindlessCountNV = cast[proc (mode: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}](load("glMultiDrawArraysIndirectBindlessCountNV"))
  glMultiDrawElementsIndirectBindlessCountNV = cast[proc (mode: GLenum, `type`: GLenum, indirect: pointer, drawCount: GLsizei, maxDrawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) {.stdcall.}](load("glMultiDrawElementsIndirectBindlessCountNV"))


proc load_GL_NV_bindless_texture(load: proc) =
  if not GLAD_GL_NV_bindless_texture: return
  glGetTextureHandleNV = cast[proc (texture: GLuint): GLuint64 {.stdcall.}](load("glGetTextureHandleNV"))
  glGetTextureSamplerHandleNV = cast[proc (texture: GLuint, sampler: GLuint): GLuint64 {.stdcall.}](load("glGetTextureSamplerHandleNV"))
  glMakeTextureHandleResidentNV = cast[proc (handle: GLuint64) {.stdcall.}](load("glMakeTextureHandleResidentNV"))
  glMakeTextureHandleNonResidentNV = cast[proc (handle: GLuint64) {.stdcall.}](load("glMakeTextureHandleNonResidentNV"))
  glGetImageHandleNV = cast[proc (texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum): GLuint64 {.stdcall.}](load("glGetImageHandleNV"))
  glMakeImageHandleResidentNV = cast[proc (handle: GLuint64, access: GLenum) {.stdcall.}](load("glMakeImageHandleResidentNV"))
  glMakeImageHandleNonResidentNV = cast[proc (handle: GLuint64) {.stdcall.}](load("glMakeImageHandleNonResidentNV"))
  glUniformHandleui64NV = cast[proc (location: GLint, value: GLuint64) {.stdcall.}](load("glUniformHandleui64NV"))
  glUniformHandleui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64) {.stdcall.}](load("glUniformHandleui64vNV"))
  glProgramUniformHandleui64NV = cast[proc (program: GLuint, location: GLint, value: GLuint64) {.stdcall.}](load("glProgramUniformHandleui64NV"))
  glProgramUniformHandleui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, values: ptr GLuint64) {.stdcall.}](load("glProgramUniformHandleui64vNV"))
  glIsTextureHandleResidentNV = cast[proc (handle: GLuint64): GLboolean {.stdcall.}](load("glIsTextureHandleResidentNV"))
  glIsImageHandleResidentNV = cast[proc (handle: GLuint64): GLboolean {.stdcall.}](load("glIsImageHandleResidentNV"))


proc load_GL_NV_blend_equation_advanced(load: proc) =
  if not GLAD_GL_NV_blend_equation_advanced: return
  glBlendParameteriNV = cast[proc (pname: GLenum, value: GLint) {.stdcall.}](load("glBlendParameteriNV"))
  glBlendBarrierNV = cast[proc () {.stdcall.}](load("glBlendBarrierNV"))


proc load_GL_NV_clip_space_w_scaling(load: proc) =
  if not GLAD_GL_NV_clip_space_w_scaling: return
  glViewportPositionWScaleNV = cast[proc (index: GLuint, xcoeff: GLfloat, ycoeff: GLfloat) {.stdcall.}](load("glViewportPositionWScaleNV"))


proc load_GL_NV_command_list(load: proc) =
  if not GLAD_GL_NV_command_list: return
  glCreateStatesNV = cast[proc (n: GLsizei, states: ptr GLuint) {.stdcall.}](load("glCreateStatesNV"))
  glDeleteStatesNV = cast[proc (n: GLsizei, states: ptr GLuint) {.stdcall.}](load("glDeleteStatesNV"))
  glIsStateNV = cast[proc (state: GLuint): GLboolean {.stdcall.}](load("glIsStateNV"))
  glStateCaptureNV = cast[proc (state: GLuint, mode: GLenum) {.stdcall.}](load("glStateCaptureNV"))
  glGetCommandHeaderNV = cast[proc (tokenID: GLenum, size: GLuint): GLuint {.stdcall.}](load("glGetCommandHeaderNV"))
  glGetStageIndexNV = cast[proc (shadertype: GLenum): GLushort {.stdcall.}](load("glGetStageIndexNV"))
  glDrawCommandsNV = cast[proc (primitiveMode: GLenum, buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, count: GLuint) {.stdcall.}](load("glDrawCommandsNV"))
  glDrawCommandsAddressNV = cast[proc (primitiveMode: GLenum, indirects: ptr GLuint64, sizes: ptr GLsizei, count: GLuint) {.stdcall.}](load("glDrawCommandsAddressNV"))
  glDrawCommandsStatesNV = cast[proc (buffer: GLuint, indirects: ptr GLintptr, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint) {.stdcall.}](load("glDrawCommandsStatesNV"))
  glDrawCommandsStatesAddressNV = cast[proc (indirects: ptr GLuint64, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint) {.stdcall.}](load("glDrawCommandsStatesAddressNV"))
  glCreateCommandListsNV = cast[proc (n: GLsizei, lists: ptr GLuint) {.stdcall.}](load("glCreateCommandListsNV"))
  glDeleteCommandListsNV = cast[proc (n: GLsizei, lists: ptr GLuint) {.stdcall.}](load("glDeleteCommandListsNV"))
  glIsCommandListNV = cast[proc (list: GLuint): GLboolean {.stdcall.}](load("glIsCommandListNV"))
  glListDrawCommandsStatesClientNV = cast[proc (list: GLuint, segment: GLuint, indirects: ptr pointer, sizes: ptr GLsizei, states: ptr GLuint, fbos: ptr GLuint, count: GLuint) {.stdcall.}](load("glListDrawCommandsStatesClientNV"))
  glCommandListSegmentsNV = cast[proc (list: GLuint, segments: GLuint) {.stdcall.}](load("glCommandListSegmentsNV"))
  glCompileCommandListNV = cast[proc (list: GLuint) {.stdcall.}](load("glCompileCommandListNV"))
  glCallCommandListNV = cast[proc (list: GLuint) {.stdcall.}](load("glCallCommandListNV"))


proc load_GL_NV_conditional_render(load: proc) =
  if not GLAD_GL_NV_conditional_render: return
  glBeginConditionalRenderNV = cast[proc (id: GLuint, mode: GLenum) {.stdcall.}](load("glBeginConditionalRenderNV"))
  glEndConditionalRenderNV = cast[proc () {.stdcall.}](load("glEndConditionalRenderNV"))


proc load_GL_NV_conservative_raster(load: proc) =
  if not GLAD_GL_NV_conservative_raster: return
  glSubpixelPrecisionBiasNV = cast[proc (xbits: GLuint, ybits: GLuint) {.stdcall.}](load("glSubpixelPrecisionBiasNV"))


proc load_GL_NV_conservative_raster_dilate(load: proc) =
  if not GLAD_GL_NV_conservative_raster_dilate: return
  glConservativeRasterParameterfNV = cast[proc (pname: GLenum, value: GLfloat) {.stdcall.}](load("glConservativeRasterParameterfNV"))


proc load_GL_NV_conservative_raster_pre_snap_triangles(load: proc) =
  if not GLAD_GL_NV_conservative_raster_pre_snap_triangles: return
  glConservativeRasterParameteriNV = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glConservativeRasterParameteriNV"))


proc load_GL_NV_copy_image(load: proc) =
  if not GLAD_GL_NV_copy_image: return
  glCopyImageSubDataNV = cast[proc (srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) {.stdcall.}](load("glCopyImageSubDataNV"))


proc load_GL_NV_depth_buffer_float(load: proc) =
  if not GLAD_GL_NV_depth_buffer_float: return
  glDepthRangedNV = cast[proc (zNear: GLdouble, zFar: GLdouble) {.stdcall.}](load("glDepthRangedNV"))
  glClearDepthdNV = cast[proc (depth: GLdouble) {.stdcall.}](load("glClearDepthdNV"))
  glDepthBoundsdNV = cast[proc (zmin: GLdouble, zmax: GLdouble) {.stdcall.}](load("glDepthBoundsdNV"))


proc load_GL_NV_draw_texture(load: proc) =
  if not GLAD_GL_NV_draw_texture: return
  glDrawTextureNV = cast[proc (texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) {.stdcall.}](load("glDrawTextureNV"))


proc load_GL_NV_draw_vulkan_image(load: proc) =
  if not GLAD_GL_NV_draw_vulkan_image: return
  glDrawVkImageNV = cast[proc (vkImage: GLuint64, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) {.stdcall.}](load("glDrawVkImageNV"))
  glGetVkProcAddrNV = cast[proc (name: cstring): GLVULKANPROCNV {.stdcall.}](load("glGetVkProcAddrNV"))
  glWaitVkSemaphoreNV = cast[proc (vkSemaphore: GLuint64) {.stdcall.}](load("glWaitVkSemaphoreNV"))
  glSignalVkSemaphoreNV = cast[proc (vkSemaphore: GLuint64) {.stdcall.}](load("glSignalVkSemaphoreNV"))
  glSignalVkFenceNV = cast[proc (vkFence: GLuint64) {.stdcall.}](load("glSignalVkFenceNV"))


proc load_GL_NV_evaluators(load: proc) =
  if not GLAD_GL_NV_evaluators: return
  glMapControlPointsNV = cast[proc (target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: pointer) {.stdcall.}](load("glMapControlPointsNV"))
  glMapParameterivNV = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glMapParameterivNV"))
  glMapParameterfvNV = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glMapParameterfvNV"))
  glGetMapControlPointsNV = cast[proc (target: GLenum, index: GLuint, `type`: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: pointer) {.stdcall.}](load("glGetMapControlPointsNV"))
  glGetMapParameterivNV = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMapParameterivNV"))
  glGetMapParameterfvNV = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMapParameterfvNV"))
  glGetMapAttribParameterivNV = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetMapAttribParameterivNV"))
  glGetMapAttribParameterfvNV = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetMapAttribParameterfvNV"))
  glEvalMapsNV = cast[proc (target: GLenum, mode: GLenum) {.stdcall.}](load("glEvalMapsNV"))


proc load_GL_NV_explicit_multisample(load: proc) =
  if not GLAD_GL_NV_explicit_multisample: return
  glGetMultisamplefvNV = cast[proc (pname: GLenum, index: GLuint, val: ptr GLfloat) {.stdcall.}](load("glGetMultisamplefvNV"))
  glSampleMaskIndexedNV = cast[proc (index: GLuint, mask: GLbitfield) {.stdcall.}](load("glSampleMaskIndexedNV"))
  glTexRenderbufferNV = cast[proc (target: GLenum, renderbuffer: GLuint) {.stdcall.}](load("glTexRenderbufferNV"))


proc load_GL_NV_fence(load: proc) =
  if not GLAD_GL_NV_fence: return
  glDeleteFencesNV = cast[proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}](load("glDeleteFencesNV"))
  glGenFencesNV = cast[proc (n: GLsizei, fences: ptr GLuint) {.stdcall.}](load("glGenFencesNV"))
  glIsFenceNV = cast[proc (fence: GLuint): GLboolean {.stdcall.}](load("glIsFenceNV"))
  glTestFenceNV = cast[proc (fence: GLuint): GLboolean {.stdcall.}](load("glTestFenceNV"))
  glGetFenceivNV = cast[proc (fence: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFenceivNV"))
  glFinishFenceNV = cast[proc (fence: GLuint) {.stdcall.}](load("glFinishFenceNV"))
  glSetFenceNV = cast[proc (fence: GLuint, condition: GLenum) {.stdcall.}](load("glSetFenceNV"))


proc load_GL_NV_fragment_coverage_to_color(load: proc) =
  if not GLAD_GL_NV_fragment_coverage_to_color: return
  glFragmentCoverageColorNV = cast[proc (color: GLuint) {.stdcall.}](load("glFragmentCoverageColorNV"))


proc load_GL_NV_fragment_program(load: proc) =
  if not GLAD_GL_NV_fragment_program: return
  glProgramNamedParameter4fNV = cast[proc (id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glProgramNamedParameter4fNV"))
  glProgramNamedParameter4fvNV = cast[proc (id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLfloat) {.stdcall.}](load("glProgramNamedParameter4fvNV"))
  glProgramNamedParameter4dNV = cast[proc (id: GLuint, len: GLsizei, name: ptr GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glProgramNamedParameter4dNV"))
  glProgramNamedParameter4dvNV = cast[proc (id: GLuint, len: GLsizei, name: ptr GLubyte, v: ptr GLdouble) {.stdcall.}](load("glProgramNamedParameter4dvNV"))
  glGetProgramNamedParameterfvNV = cast[proc (id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLfloat) {.stdcall.}](load("glGetProgramNamedParameterfvNV"))
  glGetProgramNamedParameterdvNV = cast[proc (id: GLuint, len: GLsizei, name: ptr GLubyte, params: ptr GLdouble) {.stdcall.}](load("glGetProgramNamedParameterdvNV"))


proc load_GL_NV_framebuffer_mixed_samples(load: proc) =
  if not GLAD_GL_NV_framebuffer_mixed_samples: return
  glRasterSamplesEXT = cast[proc (samples: GLuint, fixedsamplelocations: GLboolean) {.stdcall.}](load("glRasterSamplesEXT"))
  glCoverageModulationTableNV = cast[proc (n: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glCoverageModulationTableNV"))
  glGetCoverageModulationTableNV = cast[proc (bufSize: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glGetCoverageModulationTableNV"))
  glCoverageModulationNV = cast[proc (components: GLenum) {.stdcall.}](load("glCoverageModulationNV"))


proc load_GL_NV_framebuffer_multisample_coverage(load: proc) =
  if not GLAD_GL_NV_framebuffer_multisample_coverage: return
  glRenderbufferStorageMultisampleCoverageNV = cast[proc (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) {.stdcall.}](load("glRenderbufferStorageMultisampleCoverageNV"))


proc load_GL_NV_geometry_program4(load: proc) =
  if not GLAD_GL_NV_geometry_program4: return
  glProgramVertexLimitNV = cast[proc (target: GLenum, limit: GLint) {.stdcall.}](load("glProgramVertexLimitNV"))
  glFramebufferTextureEXT = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) {.stdcall.}](load("glFramebufferTextureEXT"))
  glFramebufferTextureLayerEXT = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) {.stdcall.}](load("glFramebufferTextureLayerEXT"))
  glFramebufferTextureFaceEXT = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) {.stdcall.}](load("glFramebufferTextureFaceEXT"))


proc load_GL_NV_gpu_multicast(load: proc) =
  if not GLAD_GL_NV_gpu_multicast: return
  glRenderGpuMaskNV = cast[proc (mask: GLbitfield) {.stdcall.}](load("glRenderGpuMaskNV"))
  glMulticastBufferSubDataNV = cast[proc (gpuMask: GLbitfield, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: pointer) {.stdcall.}](load("glMulticastBufferSubDataNV"))
  glMulticastCopyBufferSubDataNV = cast[proc (readGpu: GLuint, writeGpuMask: GLbitfield, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glMulticastCopyBufferSubDataNV"))
  glMulticastCopyImageSubDataNV = cast[proc (srcGpu: GLuint, dstGpuMask: GLbitfield, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) {.stdcall.}](load("glMulticastCopyImageSubDataNV"))
  glMulticastBlitFramebufferNV = cast[proc (srcGpu: GLuint, dstGpu: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) {.stdcall.}](load("glMulticastBlitFramebufferNV"))
  glMulticastFramebufferSampleLocationsfvNV = cast[proc (gpu: GLuint, framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glMulticastFramebufferSampleLocationsfvNV"))
  glMulticastBarrierNV = cast[proc () {.stdcall.}](load("glMulticastBarrierNV"))
  glMulticastWaitSyncNV = cast[proc (signalGpu: GLuint, waitGpuMask: GLbitfield) {.stdcall.}](load("glMulticastWaitSyncNV"))
  glMulticastGetQueryObjectivNV = cast[proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glMulticastGetQueryObjectivNV"))
  glMulticastGetQueryObjectuivNV = cast[proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glMulticastGetQueryObjectuivNV"))
  glMulticastGetQueryObjecti64vNV = cast[proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLint64) {.stdcall.}](load("glMulticastGetQueryObjecti64vNV"))
  glMulticastGetQueryObjectui64vNV = cast[proc (gpu: GLuint, id: GLuint, pname: GLenum, params: ptr GLuint64) {.stdcall.}](load("glMulticastGetQueryObjectui64vNV"))


proc load_GL_NV_gpu_program4(load: proc) =
  if not GLAD_GL_NV_gpu_program4: return
  glProgramLocalParameterI4iNV = cast[proc (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glProgramLocalParameterI4iNV"))
  glProgramLocalParameterI4ivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}](load("glProgramLocalParameterI4ivNV"))
  glProgramLocalParametersI4ivNV = cast[proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glProgramLocalParametersI4ivNV"))
  glProgramLocalParameterI4uiNV = cast[proc (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glProgramLocalParameterI4uiNV"))
  glProgramLocalParameterI4uivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}](load("glProgramLocalParameterI4uivNV"))
  glProgramLocalParametersI4uivNV = cast[proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}](load("glProgramLocalParametersI4uivNV"))
  glProgramEnvParameterI4iNV = cast[proc (target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glProgramEnvParameterI4iNV"))
  glProgramEnvParameterI4ivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}](load("glProgramEnvParameterI4ivNV"))
  glProgramEnvParametersI4ivNV = cast[proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glProgramEnvParametersI4ivNV"))
  glProgramEnvParameterI4uiNV = cast[proc (target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glProgramEnvParameterI4uiNV"))
  glProgramEnvParameterI4uivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}](load("glProgramEnvParameterI4uivNV"))
  glProgramEnvParametersI4uivNV = cast[proc (target: GLenum, index: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}](load("glProgramEnvParametersI4uivNV"))
  glGetProgramLocalParameterIivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}](load("glGetProgramLocalParameterIivNV"))
  glGetProgramLocalParameterIuivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}](load("glGetProgramLocalParameterIuivNV"))
  glGetProgramEnvParameterIivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLint) {.stdcall.}](load("glGetProgramEnvParameterIivNV"))
  glGetProgramEnvParameterIuivNV = cast[proc (target: GLenum, index: GLuint, params: ptr GLuint) {.stdcall.}](load("glGetProgramEnvParameterIuivNV"))


proc load_GL_NV_gpu_program5(load: proc) =
  if not GLAD_GL_NV_gpu_program5: return
  glProgramSubroutineParametersuivNV = cast[proc (target: GLenum, count: GLsizei, params: ptr GLuint) {.stdcall.}](load("glProgramSubroutineParametersuivNV"))
  glGetProgramSubroutineParameteruivNV = cast[proc (target: GLenum, index: GLuint, param: ptr GLuint) {.stdcall.}](load("glGetProgramSubroutineParameteruivNV"))


proc load_GL_NV_gpu_shader5(load: proc) =
  if not GLAD_GL_NV_gpu_shader5: return
  glUniform1i64NV = cast[proc (location: GLint, x: GLint64EXT) {.stdcall.}](load("glUniform1i64NV"))
  glUniform2i64NV = cast[proc (location: GLint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}](load("glUniform2i64NV"))
  glUniform3i64NV = cast[proc (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}](load("glUniform3i64NV"))
  glUniform4i64NV = cast[proc (location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}](load("glUniform4i64NV"))
  glUniform1i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform1i64vNV"))
  glUniform2i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform2i64vNV"))
  glUniform3i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform3i64vNV"))
  glUniform4i64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glUniform4i64vNV"))
  glUniform1ui64NV = cast[proc (location: GLint, x: GLuint64EXT) {.stdcall.}](load("glUniform1ui64NV"))
  glUniform2ui64NV = cast[proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}](load("glUniform2ui64NV"))
  glUniform3ui64NV = cast[proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}](load("glUniform3ui64NV"))
  glUniform4ui64NV = cast[proc (location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}](load("glUniform4ui64NV"))
  glUniform1ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform1ui64vNV"))
  glUniform2ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform2ui64vNV"))
  glUniform3ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform3ui64vNV"))
  glUniform4ui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniform4ui64vNV"))
  glGetUniformi64vNV = cast[proc (program: GLuint, location: GLint, params: ptr GLint64EXT) {.stdcall.}](load("glGetUniformi64vNV"))
  glProgramUniform1i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT) {.stdcall.}](load("glProgramUniform1i64NV"))
  glProgramUniform2i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}](load("glProgramUniform2i64NV"))
  glProgramUniform3i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}](load("glProgramUniform3i64NV"))
  glProgramUniform4i64NV = cast[proc (program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}](load("glProgramUniform4i64NV"))
  glProgramUniform1i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform1i64vNV"))
  glProgramUniform2i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform2i64vNV"))
  glProgramUniform3i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform3i64vNV"))
  glProgramUniform4i64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLint64EXT) {.stdcall.}](load("glProgramUniform4i64vNV"))
  glProgramUniform1ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT) {.stdcall.}](load("glProgramUniform1ui64NV"))
  glProgramUniform2ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}](load("glProgramUniform2ui64NV"))
  glProgramUniform3ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}](load("glProgramUniform3ui64NV"))
  glProgramUniform4ui64NV = cast[proc (program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}](load("glProgramUniform4ui64NV"))
  glProgramUniform1ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform1ui64vNV"))
  glProgramUniform2ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform2ui64vNV"))
  glProgramUniform3ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform3ui64vNV"))
  glProgramUniform4ui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniform4ui64vNV"))


proc load_GL_NV_half_float(load: proc) =
  if not GLAD_GL_NV_half_float: return
  glVertex2hNV = cast[proc (x: GLhalfNV, y: GLhalfNV) {.stdcall.}](load("glVertex2hNV"))
  glVertex2hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glVertex2hvNV"))
  glVertex3hNV = cast[proc (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) {.stdcall.}](load("glVertex3hNV"))
  glVertex3hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glVertex3hvNV"))
  glVertex4hNV = cast[proc (x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) {.stdcall.}](load("glVertex4hNV"))
  glVertex4hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glVertex4hvNV"))
  glNormal3hNV = cast[proc (nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) {.stdcall.}](load("glNormal3hNV"))
  glNormal3hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glNormal3hvNV"))
  glColor3hNV = cast[proc (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) {.stdcall.}](load("glColor3hNV"))
  glColor3hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glColor3hvNV"))
  glColor4hNV = cast[proc (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) {.stdcall.}](load("glColor4hNV"))
  glColor4hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glColor4hvNV"))
  glTexCoord1hNV = cast[proc (s: GLhalfNV) {.stdcall.}](load("glTexCoord1hNV"))
  glTexCoord1hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glTexCoord1hvNV"))
  glTexCoord2hNV = cast[proc (s: GLhalfNV, t: GLhalfNV) {.stdcall.}](load("glTexCoord2hNV"))
  glTexCoord2hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glTexCoord2hvNV"))
  glTexCoord3hNV = cast[proc (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) {.stdcall.}](load("glTexCoord3hNV"))
  glTexCoord3hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glTexCoord3hvNV"))
  glTexCoord4hNV = cast[proc (s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) {.stdcall.}](load("glTexCoord4hNV"))
  glTexCoord4hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glTexCoord4hvNV"))
  glMultiTexCoord1hNV = cast[proc (target: GLenum, s: GLhalfNV) {.stdcall.}](load("glMultiTexCoord1hNV"))
  glMultiTexCoord1hvNV = cast[proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}](load("glMultiTexCoord1hvNV"))
  glMultiTexCoord2hNV = cast[proc (target: GLenum, s: GLhalfNV, t: GLhalfNV) {.stdcall.}](load("glMultiTexCoord2hNV"))
  glMultiTexCoord2hvNV = cast[proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}](load("glMultiTexCoord2hvNV"))
  glMultiTexCoord3hNV = cast[proc (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) {.stdcall.}](load("glMultiTexCoord3hNV"))
  glMultiTexCoord3hvNV = cast[proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}](load("glMultiTexCoord3hvNV"))
  glMultiTexCoord4hNV = cast[proc (target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) {.stdcall.}](load("glMultiTexCoord4hNV"))
  glMultiTexCoord4hvNV = cast[proc (target: GLenum, v: ptr GLhalfNV) {.stdcall.}](load("glMultiTexCoord4hvNV"))
  glFogCoordhNV = cast[proc (fog: GLhalfNV) {.stdcall.}](load("glFogCoordhNV"))
  glFogCoordhvNV = cast[proc (fog: ptr GLhalfNV) {.stdcall.}](load("glFogCoordhvNV"))
  glSecondaryColor3hNV = cast[proc (red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) {.stdcall.}](load("glSecondaryColor3hNV"))
  glSecondaryColor3hvNV = cast[proc (v: ptr GLhalfNV) {.stdcall.}](load("glSecondaryColor3hvNV"))
  glVertexWeighthNV = cast[proc (weight: GLhalfNV) {.stdcall.}](load("glVertexWeighthNV"))
  glVertexWeighthvNV = cast[proc (weight: ptr GLhalfNV) {.stdcall.}](load("glVertexWeighthvNV"))
  glVertexAttrib1hNV = cast[proc (index: GLuint, x: GLhalfNV) {.stdcall.}](load("glVertexAttrib1hNV"))
  glVertexAttrib1hvNV = cast[proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttrib1hvNV"))
  glVertexAttrib2hNV = cast[proc (index: GLuint, x: GLhalfNV, y: GLhalfNV) {.stdcall.}](load("glVertexAttrib2hNV"))
  glVertexAttrib2hvNV = cast[proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttrib2hvNV"))
  glVertexAttrib3hNV = cast[proc (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) {.stdcall.}](load("glVertexAttrib3hNV"))
  glVertexAttrib3hvNV = cast[proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttrib3hvNV"))
  glVertexAttrib4hNV = cast[proc (index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) {.stdcall.}](load("glVertexAttrib4hNV"))
  glVertexAttrib4hvNV = cast[proc (index: GLuint, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttrib4hvNV"))
  glVertexAttribs1hvNV = cast[proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttribs1hvNV"))
  glVertexAttribs2hvNV = cast[proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttribs2hvNV"))
  glVertexAttribs3hvNV = cast[proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttribs3hvNV"))
  glVertexAttribs4hvNV = cast[proc (index: GLuint, n: GLsizei, v: ptr GLhalfNV) {.stdcall.}](load("glVertexAttribs4hvNV"))


proc load_GL_NV_internalformat_sample_query(load: proc) =
  if not GLAD_GL_NV_internalformat_sample_query: return
  glGetInternalformatSampleivNV = cast[proc (target: GLenum, internalformat: GLenum, samples: GLsizei, pname: GLenum, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glGetInternalformatSampleivNV"))


proc load_GL_NV_memory_attachment(load: proc) =
  if not GLAD_GL_NV_memory_attachment: return
  glGetMemoryObjectDetachedResourcesuivNV = cast[proc (memory: GLuint, pname: GLenum, first: GLint, count: GLsizei, params: ptr GLuint) {.stdcall.}](load("glGetMemoryObjectDetachedResourcesuivNV"))
  glResetMemoryObjectParameterNV = cast[proc (memory: GLuint, pname: GLenum) {.stdcall.}](load("glResetMemoryObjectParameterNV"))
  glTexAttachMemoryNV = cast[proc (target: GLenum, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTexAttachMemoryNV"))
  glBufferAttachMemoryNV = cast[proc (target: GLenum, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glBufferAttachMemoryNV"))
  glTextureAttachMemoryNV = cast[proc (texture: GLuint, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glTextureAttachMemoryNV"))
  glNamedBufferAttachMemoryNV = cast[proc (buffer: GLuint, memory: GLuint, offset: GLuint64) {.stdcall.}](load("glNamedBufferAttachMemoryNV"))


proc load_GL_NV_memory_object_sparse(load: proc) =
  if not GLAD_GL_NV_memory_object_sparse: return
  glBufferPageCommitmentMemNV = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) {.stdcall.}](load("glBufferPageCommitmentMemNV"))
  glTexPageCommitmentMemNV = cast[proc (target: GLenum, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) {.stdcall.}](load("glTexPageCommitmentMemNV"))
  glNamedBufferPageCommitmentMemNV = cast[proc (buffer: GLuint, offset: GLintptr, size: GLsizeiptr, memory: GLuint, memOffset: GLuint64, commit: GLboolean) {.stdcall.}](load("glNamedBufferPageCommitmentMemNV"))
  glTexturePageCommitmentMemNV = cast[proc (texture: GLuint, layer: GLint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, memory: GLuint, offset: GLuint64, commit: GLboolean) {.stdcall.}](load("glTexturePageCommitmentMemNV"))


proc load_GL_NV_mesh_shader(load: proc) =
  if not GLAD_GL_NV_mesh_shader: return
  glDrawMeshTasksNV = cast[proc (first: GLuint, count: GLuint) {.stdcall.}](load("glDrawMeshTasksNV"))
  glDrawMeshTasksIndirectNV = cast[proc (indirect: GLintptr) {.stdcall.}](load("glDrawMeshTasksIndirectNV"))
  glMultiDrawMeshTasksIndirectNV = cast[proc (indirect: GLintptr, drawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawMeshTasksIndirectNV"))
  glMultiDrawMeshTasksIndirectCountNV = cast[proc (indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) {.stdcall.}](load("glMultiDrawMeshTasksIndirectCountNV"))


proc load_GL_NV_occlusion_query(load: proc) =
  if not GLAD_GL_NV_occlusion_query: return
  glGenOcclusionQueriesNV = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenOcclusionQueriesNV"))
  glDeleteOcclusionQueriesNV = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteOcclusionQueriesNV"))
  glIsOcclusionQueryNV = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsOcclusionQueryNV"))
  glBeginOcclusionQueryNV = cast[proc (id: GLuint) {.stdcall.}](load("glBeginOcclusionQueryNV"))
  glEndOcclusionQueryNV = cast[proc () {.stdcall.}](load("glEndOcclusionQueryNV"))
  glGetOcclusionQueryivNV = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetOcclusionQueryivNV"))
  glGetOcclusionQueryuivNV = cast[proc (id: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetOcclusionQueryuivNV"))


proc load_GL_NV_parameter_buffer_object(load: proc) =
  if not GLAD_GL_NV_parameter_buffer_object: return
  glProgramBufferParametersfvNV = cast[proc (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLfloat) {.stdcall.}](load("glProgramBufferParametersfvNV"))
  glProgramBufferParametersIivNV = cast[proc (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLint) {.stdcall.}](load("glProgramBufferParametersIivNV"))
  glProgramBufferParametersIuivNV = cast[proc (target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: ptr GLuint) {.stdcall.}](load("glProgramBufferParametersIuivNV"))


proc load_GL_NV_path_rendering(load: proc) =
  if not GLAD_GL_NV_path_rendering: return
  glGenPathsNV = cast[proc (range: GLsizei): GLuint {.stdcall.}](load("glGenPathsNV"))
  glDeletePathsNV = cast[proc (path: GLuint, range: GLsizei) {.stdcall.}](load("glDeletePathsNV"))
  glIsPathNV = cast[proc (path: GLuint): GLboolean {.stdcall.}](load("glIsPathNV"))
  glPathCommandsNV = cast[proc (path: GLuint, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}](load("glPathCommandsNV"))
  glPathCoordsNV = cast[proc (path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}](load("glPathCoordsNV"))
  glPathSubCommandsNV = cast[proc (path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: ptr GLubyte, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}](load("glPathSubCommandsNV"))
  glPathSubCoordsNV = cast[proc (path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: pointer) {.stdcall.}](load("glPathSubCoordsNV"))
  glPathStringNV = cast[proc (path: GLuint, format: GLenum, length: GLsizei, pathString: pointer) {.stdcall.}](load("glPathStringNV"))
  glPathGlyphsNV = cast[proc (firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, numGlyphs: GLsizei, `type`: GLenum, charcodes: pointer, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) {.stdcall.}](load("glPathGlyphsNV"))
  glPathGlyphRangeNV = cast[proc (firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) {.stdcall.}](load("glPathGlyphRangeNV"))
  glWeightPathsNV = cast[proc (resultPath: GLuint, numPaths: GLsizei, paths: ptr GLuint, weights: ptr GLfloat) {.stdcall.}](load("glWeightPathsNV"))
  glCopyPathNV = cast[proc (resultPath: GLuint, srcPath: GLuint) {.stdcall.}](load("glCopyPathNV"))
  glInterpolatePathsNV = cast[proc (resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) {.stdcall.}](load("glInterpolatePathsNV"))
  glTransformPathNV = cast[proc (resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}](load("glTransformPathNV"))
  glPathParameterivNV = cast[proc (path: GLuint, pname: GLenum, value: ptr GLint) {.stdcall.}](load("glPathParameterivNV"))
  glPathParameteriNV = cast[proc (path: GLuint, pname: GLenum, value: GLint) {.stdcall.}](load("glPathParameteriNV"))
  glPathParameterfvNV = cast[proc (path: GLuint, pname: GLenum, value: ptr GLfloat) {.stdcall.}](load("glPathParameterfvNV"))
  glPathParameterfNV = cast[proc (path: GLuint, pname: GLenum, value: GLfloat) {.stdcall.}](load("glPathParameterfNV"))
  glPathDashArrayNV = cast[proc (path: GLuint, dashCount: GLsizei, dashArray: ptr GLfloat) {.stdcall.}](load("glPathDashArrayNV"))
  glPathStencilFuncNV = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.stdcall.}](load("glPathStencilFuncNV"))
  glPathStencilDepthOffsetNV = cast[proc (factor: GLfloat, units: GLfloat) {.stdcall.}](load("glPathStencilDepthOffsetNV"))
  glStencilFillPathNV = cast[proc (path: GLuint, fillMode: GLenum, mask: GLuint) {.stdcall.}](load("glStencilFillPathNV"))
  glStencilStrokePathNV = cast[proc (path: GLuint, reference: GLint, mask: GLuint) {.stdcall.}](load("glStencilStrokePathNV"))
  glStencilFillPathInstancedNV = cast[proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}](load("glStencilFillPathInstancedNV"))
  glStencilStrokePathInstancedNV = cast[proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}](load("glStencilStrokePathInstancedNV"))
  glPathCoverDepthFuncNV = cast[proc (`func`: GLenum) {.stdcall.}](load("glPathCoverDepthFuncNV"))
  glCoverFillPathNV = cast[proc (path: GLuint, coverMode: GLenum) {.stdcall.}](load("glCoverFillPathNV"))
  glCoverStrokePathNV = cast[proc (path: GLuint, coverMode: GLenum) {.stdcall.}](load("glCoverStrokePathNV"))
  glCoverFillPathInstancedNV = cast[proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}](load("glCoverFillPathInstancedNV"))
  glCoverStrokePathInstancedNV = cast[proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}](load("glCoverStrokePathInstancedNV"))
  glGetPathParameterivNV = cast[proc (path: GLuint, pname: GLenum, value: ptr GLint) {.stdcall.}](load("glGetPathParameterivNV"))
  glGetPathParameterfvNV = cast[proc (path: GLuint, pname: GLenum, value: ptr GLfloat) {.stdcall.}](load("glGetPathParameterfvNV"))
  glGetPathCommandsNV = cast[proc (path: GLuint, commands: ptr GLubyte) {.stdcall.}](load("glGetPathCommandsNV"))
  glGetPathCoordsNV = cast[proc (path: GLuint, coords: ptr GLfloat) {.stdcall.}](load("glGetPathCoordsNV"))
  glGetPathDashArrayNV = cast[proc (path: GLuint, dashArray: ptr GLfloat) {.stdcall.}](load("glGetPathDashArrayNV"))
  glGetPathMetricsNV = cast[proc (metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, stride: GLsizei, metrics: ptr GLfloat) {.stdcall.}](load("glGetPathMetricsNV"))
  glGetPathMetricRangeNV = cast[proc (metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: ptr GLfloat) {.stdcall.}](load("glGetPathMetricRangeNV"))
  glGetPathSpacingNV = cast[proc (pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: ptr GLfloat) {.stdcall.}](load("glGetPathSpacingNV"))
  glIsPointInFillPathNV = cast[proc (path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}](load("glIsPointInFillPathNV"))
  glIsPointInStrokePathNV = cast[proc (path: GLuint, x: GLfloat, y: GLfloat): GLboolean {.stdcall.}](load("glIsPointInStrokePathNV"))
  glGetPathLengthNV = cast[proc (path: GLuint, startSegment: GLsizei, numSegments: GLsizei): GLfloat {.stdcall.}](load("glGetPathLengthNV"))
  glPointAlongPathNV = cast[proc (path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: ptr GLfloat, y: ptr GLfloat, tangentX: ptr GLfloat, tangentY: ptr GLfloat): GLboolean {.stdcall.}](load("glPointAlongPathNV"))
  glMatrixLoad3x2fNV = cast[proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixLoad3x2fNV"))
  glMatrixLoad3x3fNV = cast[proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixLoad3x3fNV"))
  glMatrixLoadTranspose3x3fNV = cast[proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixLoadTranspose3x3fNV"))
  glMatrixMult3x2fNV = cast[proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixMult3x2fNV"))
  glMatrixMult3x3fNV = cast[proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixMult3x3fNV"))
  glMatrixMultTranspose3x3fNV = cast[proc (matrixMode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixMultTranspose3x3fNV"))
  glStencilThenCoverFillPathNV = cast[proc (path: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum) {.stdcall.}](load("glStencilThenCoverFillPathNV"))
  glStencilThenCoverStrokePathNV = cast[proc (path: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum) {.stdcall.}](load("glStencilThenCoverStrokePathNV"))
  glStencilThenCoverFillPathInstancedNV = cast[proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, fillMode: GLenum, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}](load("glStencilThenCoverFillPathInstancedNV"))
  glStencilThenCoverStrokePathInstancedNV = cast[proc (numPaths: GLsizei, pathNameType: GLenum, paths: pointer, pathBase: GLuint, reference: GLint, mask: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: ptr GLfloat) {.stdcall.}](load("glStencilThenCoverStrokePathInstancedNV"))
  glPathGlyphIndexRangeNV = cast[proc (fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, pathParameterTemplate: GLuint, emScale: GLfloat, baseAndCount: ptr GLuint): GLenum {.stdcall.}](load("glPathGlyphIndexRangeNV"))
  glPathGlyphIndexArrayNV = cast[proc (firstPathName: GLuint, fontTarget: GLenum, fontName: pointer, fontStyle: GLbitfield, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}](load("glPathGlyphIndexArrayNV"))
  glPathMemoryGlyphIndexArrayNV = cast[proc (firstPathName: GLuint, fontTarget: GLenum, fontSize: GLsizeiptr, fontData: pointer, faceIndex: GLsizei, firstGlyphIndex: GLuint, numGlyphs: GLsizei, pathParameterTemplate: GLuint, emScale: GLfloat): GLenum {.stdcall.}](load("glPathMemoryGlyphIndexArrayNV"))
  glProgramPathFragmentInputGenNV = cast[proc (program: GLuint, location: GLint, genMode: GLenum, components: GLint, coeffs: ptr GLfloat) {.stdcall.}](load("glProgramPathFragmentInputGenNV"))
  glGetProgramResourcefvNV = cast[proc (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ptr GLenum, count: GLsizei, length: ptr GLsizei, params: ptr GLfloat) {.stdcall.}](load("glGetProgramResourcefvNV"))
  glPathColorGenNV = cast[proc (color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: ptr GLfloat) {.stdcall.}](load("glPathColorGenNV"))
  glPathTexGenNV = cast[proc (texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: ptr GLfloat) {.stdcall.}](load("glPathTexGenNV"))
  glPathFogGenNV = cast[proc (genMode: GLenum) {.stdcall.}](load("glPathFogGenNV"))
  glGetPathColorGenivNV = cast[proc (color: GLenum, pname: GLenum, value: ptr GLint) {.stdcall.}](load("glGetPathColorGenivNV"))
  glGetPathColorGenfvNV = cast[proc (color: GLenum, pname: GLenum, value: ptr GLfloat) {.stdcall.}](load("glGetPathColorGenfvNV"))
  glGetPathTexGenivNV = cast[proc (texCoordSet: GLenum, pname: GLenum, value: ptr GLint) {.stdcall.}](load("glGetPathTexGenivNV"))
  glGetPathTexGenfvNV = cast[proc (texCoordSet: GLenum, pname: GLenum, value: ptr GLfloat) {.stdcall.}](load("glGetPathTexGenfvNV"))
  glMatrixFrustumEXT = cast[proc (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.stdcall.}](load("glMatrixFrustumEXT"))
  glMatrixLoadIdentityEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glMatrixLoadIdentityEXT"))
  glMatrixLoadTransposefEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixLoadTransposefEXT"))
  glMatrixLoadTransposedEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixLoadTransposedEXT"))
  glMatrixLoadfEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixLoadfEXT"))
  glMatrixLoaddEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixLoaddEXT"))
  glMatrixMultTransposefEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixMultTransposefEXT"))
  glMatrixMultTransposedEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixMultTransposedEXT"))
  glMatrixMultfEXT = cast[proc (mode: GLenum, m: ptr GLfloat) {.stdcall.}](load("glMatrixMultfEXT"))
  glMatrixMultdEXT = cast[proc (mode: GLenum, m: ptr GLdouble) {.stdcall.}](load("glMatrixMultdEXT"))
  glMatrixOrthoEXT = cast[proc (mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) {.stdcall.}](load("glMatrixOrthoEXT"))
  glMatrixPopEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glMatrixPopEXT"))
  glMatrixPushEXT = cast[proc (mode: GLenum) {.stdcall.}](load("glMatrixPushEXT"))
  glMatrixRotatefEXT = cast[proc (mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glMatrixRotatefEXT"))
  glMatrixRotatedEXT = cast[proc (mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glMatrixRotatedEXT"))
  glMatrixScalefEXT = cast[proc (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glMatrixScalefEXT"))
  glMatrixScaledEXT = cast[proc (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glMatrixScaledEXT"))
  glMatrixTranslatefEXT = cast[proc (mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glMatrixTranslatefEXT"))
  glMatrixTranslatedEXT = cast[proc (mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glMatrixTranslatedEXT"))


proc load_GL_NV_pixel_data_range(load: proc) =
  if not GLAD_GL_NV_pixel_data_range: return
  glPixelDataRangeNV = cast[proc (target: GLenum, length: GLsizei, pointer: pointer) {.stdcall.}](load("glPixelDataRangeNV"))
  glFlushPixelDataRangeNV = cast[proc (target: GLenum) {.stdcall.}](load("glFlushPixelDataRangeNV"))


proc load_GL_NV_point_sprite(load: proc) =
  if not GLAD_GL_NV_point_sprite: return
  glPointParameteriNV = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPointParameteriNV"))
  glPointParameterivNV = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glPointParameterivNV"))


proc load_GL_NV_present_video(load: proc) =
  if not GLAD_GL_NV_present_video: return
  glPresentFrameKeyedNV = cast[proc (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) {.stdcall.}](load("glPresentFrameKeyedNV"))
  glPresentFrameDualFillNV = cast[proc (video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, `type`: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) {.stdcall.}](load("glPresentFrameDualFillNV"))
  glGetVideoivNV = cast[proc (video_slot: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVideoivNV"))
  glGetVideouivNV = cast[proc (video_slot: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetVideouivNV"))
  glGetVideoi64vNV = cast[proc (video_slot: GLuint, pname: GLenum, params: ptr GLint64EXT) {.stdcall.}](load("glGetVideoi64vNV"))
  glGetVideoui64vNV = cast[proc (video_slot: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}](load("glGetVideoui64vNV"))


proc load_GL_NV_primitive_restart(load: proc) =
  if not GLAD_GL_NV_primitive_restart: return
  glPrimitiveRestartNV = cast[proc () {.stdcall.}](load("glPrimitiveRestartNV"))
  glPrimitiveRestartIndexNV = cast[proc (index: GLuint) {.stdcall.}](load("glPrimitiveRestartIndexNV"))


proc load_GL_NV_query_resource(load: proc) =
  if not GLAD_GL_NV_query_resource: return
  glQueryResourceNV = cast[proc (queryType: GLenum, tagId: GLint, count: GLuint, buffer: ptr GLint): GLint {.stdcall.}](load("glQueryResourceNV"))


proc load_GL_NV_query_resource_tag(load: proc) =
  if not GLAD_GL_NV_query_resource_tag: return
  glGenQueryResourceTagNV = cast[proc (n: GLsizei, tagIds: ptr GLint) {.stdcall.}](load("glGenQueryResourceTagNV"))
  glDeleteQueryResourceTagNV = cast[proc (n: GLsizei, tagIds: ptr GLint) {.stdcall.}](load("glDeleteQueryResourceTagNV"))
  glQueryResourceTagNV = cast[proc (tagId: GLint, tagString: cstring) {.stdcall.}](load("glQueryResourceTagNV"))


proc load_GL_NV_register_combiners(load: proc) =
  if not GLAD_GL_NV_register_combiners: return
  glCombinerParameterfvNV = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glCombinerParameterfvNV"))
  glCombinerParameterfNV = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glCombinerParameterfNV"))
  glCombinerParameterivNV = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glCombinerParameterivNV"))
  glCombinerParameteriNV = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glCombinerParameteriNV"))
  glCombinerInputNV = cast[proc (stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) {.stdcall.}](load("glCombinerInputNV"))
  glCombinerOutputNV = cast[proc (stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) {.stdcall.}](load("glCombinerOutputNV"))
  glFinalCombinerInputNV = cast[proc (variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) {.stdcall.}](load("glFinalCombinerInputNV"))
  glGetCombinerInputParameterfvNV = cast[proc (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetCombinerInputParameterfvNV"))
  glGetCombinerInputParameterivNV = cast[proc (stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetCombinerInputParameterivNV"))
  glGetCombinerOutputParameterfvNV = cast[proc (stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetCombinerOutputParameterfvNV"))
  glGetCombinerOutputParameterivNV = cast[proc (stage: GLenum, portion: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetCombinerOutputParameterivNV"))
  glGetFinalCombinerInputParameterfvNV = cast[proc (variable: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetFinalCombinerInputParameterfvNV"))
  glGetFinalCombinerInputParameterivNV = cast[proc (variable: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFinalCombinerInputParameterivNV"))


proc load_GL_NV_register_combiners2(load: proc) =
  if not GLAD_GL_NV_register_combiners2: return
  glCombinerStageParameterfvNV = cast[proc (stage: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glCombinerStageParameterfvNV"))
  glGetCombinerStageParameterfvNV = cast[proc (stage: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetCombinerStageParameterfvNV"))


proc load_GL_NV_sample_locations(load: proc) =
  if not GLAD_GL_NV_sample_locations: return
  glFramebufferSampleLocationsfvNV = cast[proc (target: GLenum, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glFramebufferSampleLocationsfvNV"))
  glNamedFramebufferSampleLocationsfvNV = cast[proc (framebuffer: GLuint, start: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glNamedFramebufferSampleLocationsfvNV"))
  glResolveDepthValuesNV = cast[proc () {.stdcall.}](load("glResolveDepthValuesNV"))


proc load_GL_NV_scissor_exclusive(load: proc) =
  if not GLAD_GL_NV_scissor_exclusive: return
  glScissorExclusiveNV = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.stdcall.}](load("glScissorExclusiveNV"))
  glScissorExclusiveArrayvNV = cast[proc (first: GLuint, count: GLsizei, v: ptr GLint) {.stdcall.}](load("glScissorExclusiveArrayvNV"))


proc load_GL_NV_shader_buffer_load(load: proc) =
  if not GLAD_GL_NV_shader_buffer_load: return
  glMakeBufferResidentNV = cast[proc (target: GLenum, access: GLenum) {.stdcall.}](load("glMakeBufferResidentNV"))
  glMakeBufferNonResidentNV = cast[proc (target: GLenum) {.stdcall.}](load("glMakeBufferNonResidentNV"))
  glIsBufferResidentNV = cast[proc (target: GLenum): GLboolean {.stdcall.}](load("glIsBufferResidentNV"))
  glMakeNamedBufferResidentNV = cast[proc (buffer: GLuint, access: GLenum) {.stdcall.}](load("glMakeNamedBufferResidentNV"))
  glMakeNamedBufferNonResidentNV = cast[proc (buffer: GLuint) {.stdcall.}](load("glMakeNamedBufferNonResidentNV"))
  glIsNamedBufferResidentNV = cast[proc (buffer: GLuint): GLboolean {.stdcall.}](load("glIsNamedBufferResidentNV"))
  glGetBufferParameterui64vNV = cast[proc (target: GLenum, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}](load("glGetBufferParameterui64vNV"))
  glGetNamedBufferParameterui64vNV = cast[proc (buffer: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}](load("glGetNamedBufferParameterui64vNV"))
  glGetIntegerui64vNV = cast[proc (value: GLenum, result: ptr GLuint64EXT) {.stdcall.}](load("glGetIntegerui64vNV"))
  glUniformui64NV = cast[proc (location: GLint, value: GLuint64EXT) {.stdcall.}](load("glUniformui64NV"))
  glUniformui64vNV = cast[proc (location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glUniformui64vNV"))
  glGetUniformui64vNV = cast[proc (program: GLuint, location: GLint, params: ptr GLuint64EXT) {.stdcall.}](load("glGetUniformui64vNV"))
  glProgramUniformui64NV = cast[proc (program: GLuint, location: GLint, value: GLuint64EXT) {.stdcall.}](load("glProgramUniformui64NV"))
  glProgramUniformui64vNV = cast[proc (program: GLuint, location: GLint, count: GLsizei, value: ptr GLuint64EXT) {.stdcall.}](load("glProgramUniformui64vNV"))


proc load_GL_NV_shading_rate_image(load: proc) =
  if not GLAD_GL_NV_shading_rate_image: return
  glBindShadingRateImageNV = cast[proc (texture: GLuint) {.stdcall.}](load("glBindShadingRateImageNV"))
  glGetShadingRateImagePaletteNV = cast[proc (viewport: GLuint, entry: GLuint, rate: ptr GLenum) {.stdcall.}](load("glGetShadingRateImagePaletteNV"))
  glGetShadingRateSampleLocationivNV = cast[proc (rate: GLenum, samples: GLuint, index: GLuint, location: ptr GLint) {.stdcall.}](load("glGetShadingRateSampleLocationivNV"))
  glShadingRateImageBarrierNV = cast[proc (synchronize: GLboolean) {.stdcall.}](load("glShadingRateImageBarrierNV"))
  glShadingRateImagePaletteNV = cast[proc (viewport: GLuint, first: GLuint, count: GLsizei, rates: ptr GLenum) {.stdcall.}](load("glShadingRateImagePaletteNV"))
  glShadingRateSampleOrderNV = cast[proc (order: GLenum) {.stdcall.}](load("glShadingRateSampleOrderNV"))
  glShadingRateSampleOrderCustomNV = cast[proc (rate: GLenum, samples: GLuint, locations: ptr GLint) {.stdcall.}](load("glShadingRateSampleOrderCustomNV"))


proc load_GL_NV_texture_barrier(load: proc) =
  if not GLAD_GL_NV_texture_barrier: return
  glTextureBarrierNV = cast[proc () {.stdcall.}](load("glTextureBarrierNV"))


proc load_GL_NV_texture_multisample(load: proc) =
  if not GLAD_GL_NV_texture_multisample: return
  glTexImage2DMultisampleCoverageNV = cast[proc (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}](load("glTexImage2DMultisampleCoverageNV"))
  glTexImage3DMultisampleCoverageNV = cast[proc (target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}](load("glTexImage3DMultisampleCoverageNV"))
  glTextureImage2DMultisampleNV = cast[proc (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}](load("glTextureImage2DMultisampleNV"))
  glTextureImage3DMultisampleNV = cast[proc (texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}](load("glTextureImage3DMultisampleNV"))
  glTextureImage2DMultisampleCoverageNV = cast[proc (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}](load("glTextureImage2DMultisampleCoverageNV"))
  glTextureImage3DMultisampleCoverageNV = cast[proc (texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) {.stdcall.}](load("glTextureImage3DMultisampleCoverageNV"))


proc load_GL_NV_timeline_semaphore(load: proc) =
  if not GLAD_GL_NV_timeline_semaphore: return
  glCreateSemaphoresNV = cast[proc (n: GLsizei, semaphores: ptr GLuint) {.stdcall.}](load("glCreateSemaphoresNV"))
  glSemaphoreParameterivNV = cast[proc (semaphore: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glSemaphoreParameterivNV"))
  glGetSemaphoreParameterivNV = cast[proc (semaphore: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetSemaphoreParameterivNV"))


proc load_GL_NV_transform_feedback(load: proc) =
  if not GLAD_GL_NV_transform_feedback: return
  glBeginTransformFeedbackNV = cast[proc (primitiveMode: GLenum) {.stdcall.}](load("glBeginTransformFeedbackNV"))
  glEndTransformFeedbackNV = cast[proc () {.stdcall.}](load("glEndTransformFeedbackNV"))
  glTransformFeedbackAttribsNV = cast[proc (count: GLsizei, attribs: ptr GLint, bufferMode: GLenum) {.stdcall.}](load("glTransformFeedbackAttribsNV"))
  glBindBufferRangeNV = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) {.stdcall.}](load("glBindBufferRangeNV"))
  glBindBufferOffsetNV = cast[proc (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) {.stdcall.}](load("glBindBufferOffsetNV"))
  glBindBufferBaseNV = cast[proc (target: GLenum, index: GLuint, buffer: GLuint) {.stdcall.}](load("glBindBufferBaseNV"))
  glTransformFeedbackVaryingsNV = cast[proc (program: GLuint, count: GLsizei, locations: ptr GLint, bufferMode: GLenum) {.stdcall.}](load("glTransformFeedbackVaryingsNV"))
  glActiveVaryingNV = cast[proc (program: GLuint, name: cstring) {.stdcall.}](load("glActiveVaryingNV"))
  glGetVaryingLocationNV = cast[proc (program: GLuint, name: cstring): GLint {.stdcall.}](load("glGetVaryingLocationNV"))
  glGetActiveVaryingNV = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLsizei, `type`: ptr GLenum, name: cstring) {.stdcall.}](load("glGetActiveVaryingNV"))
  glGetTransformFeedbackVaryingNV = cast[proc (program: GLuint, index: GLuint, location: ptr GLint) {.stdcall.}](load("glGetTransformFeedbackVaryingNV"))
  glTransformFeedbackStreamAttribsNV = cast[proc (count: GLsizei, attribs: ptr GLint, nbuffers: GLsizei, bufstreams: ptr GLint, bufferMode: GLenum) {.stdcall.}](load("glTransformFeedbackStreamAttribsNV"))


proc load_GL_NV_transform_feedback2(load: proc) =
  if not GLAD_GL_NV_transform_feedback2: return
  glBindTransformFeedbackNV = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBindTransformFeedbackNV"))
  glDeleteTransformFeedbacksNV = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glDeleteTransformFeedbacksNV"))
  glGenTransformFeedbacksNV = cast[proc (n: GLsizei, ids: ptr GLuint) {.stdcall.}](load("glGenTransformFeedbacksNV"))
  glIsTransformFeedbackNV = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsTransformFeedbackNV"))
  glPauseTransformFeedbackNV = cast[proc () {.stdcall.}](load("glPauseTransformFeedbackNV"))
  glResumeTransformFeedbackNV = cast[proc () {.stdcall.}](load("glResumeTransformFeedbackNV"))
  glDrawTransformFeedbackNV = cast[proc (mode: GLenum, id: GLuint) {.stdcall.}](load("glDrawTransformFeedbackNV"))


proc load_GL_NV_vdpau_interop(load: proc) =
  if not GLAD_GL_NV_vdpau_interop: return
  glVDPAUInitNV = cast[proc (vdpDevice: pointer, getProcAddress: pointer) {.stdcall.}](load("glVDPAUInitNV"))
  glVDPAUFiniNV = cast[proc () {.stdcall.}](load("glVDPAUFiniNV"))
  glVDPAURegisterVideoSurfaceNV = cast[proc (vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}](load("glVDPAURegisterVideoSurfaceNV"))
  glVDPAURegisterOutputSurfaceNV = cast[proc (vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint): GLvdpauSurfaceNV {.stdcall.}](load("glVDPAURegisterOutputSurfaceNV"))
  glVDPAUIsSurfaceNV = cast[proc (surface: GLvdpauSurfaceNV): GLboolean {.stdcall.}](load("glVDPAUIsSurfaceNV"))
  glVDPAUUnregisterSurfaceNV = cast[proc (surface: GLvdpauSurfaceNV) {.stdcall.}](load("glVDPAUUnregisterSurfaceNV"))
  glVDPAUGetSurfaceivNV = cast[proc (surface: GLvdpauSurfaceNV, pname: GLenum, count: GLsizei, length: ptr GLsizei, values: ptr GLint) {.stdcall.}](load("glVDPAUGetSurfaceivNV"))
  glVDPAUSurfaceAccessNV = cast[proc (surface: GLvdpauSurfaceNV, access: GLenum) {.stdcall.}](load("glVDPAUSurfaceAccessNV"))
  glVDPAUMapSurfacesNV = cast[proc (numSurfaces: GLsizei, surfaces: ptr GLvdpauSurfaceNV) {.stdcall.}](load("glVDPAUMapSurfacesNV"))
  glVDPAUUnmapSurfacesNV = cast[proc (numSurface: GLsizei, surfaces: ptr GLvdpauSurfaceNV) {.stdcall.}](load("glVDPAUUnmapSurfacesNV"))


proc load_GL_NV_vdpau_interop2(load: proc) =
  if not GLAD_GL_NV_vdpau_interop2: return
  glVDPAURegisterVideoSurfaceWithPictureStructureNV = cast[proc (vdpSurface: pointer, target: GLenum, numTextureNames: GLsizei, textureNames: ptr GLuint, isFrameStructure: GLboolean): GLvdpauSurfaceNV {.stdcall.}](load("glVDPAURegisterVideoSurfaceWithPictureStructureNV"))


proc load_GL_NV_vertex_array_range(load: proc) =
  if not GLAD_GL_NV_vertex_array_range: return
  glFlushVertexArrayRangeNV = cast[proc () {.stdcall.}](load("glFlushVertexArrayRangeNV"))
  glVertexArrayRangeNV = cast[proc (length: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexArrayRangeNV"))


proc load_GL_NV_vertex_attrib_integer_64bit(load: proc) =
  if not GLAD_GL_NV_vertex_attrib_integer_64bit: return
  glVertexAttribL1i64NV = cast[proc (index: GLuint, x: GLint64EXT) {.stdcall.}](load("glVertexAttribL1i64NV"))
  glVertexAttribL2i64NV = cast[proc (index: GLuint, x: GLint64EXT, y: GLint64EXT) {.stdcall.}](load("glVertexAttribL2i64NV"))
  glVertexAttribL3i64NV = cast[proc (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) {.stdcall.}](load("glVertexAttribL3i64NV"))
  glVertexAttribL4i64NV = cast[proc (index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) {.stdcall.}](load("glVertexAttribL4i64NV"))
  glVertexAttribL1i64vNV = cast[proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}](load("glVertexAttribL1i64vNV"))
  glVertexAttribL2i64vNV = cast[proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}](load("glVertexAttribL2i64vNV"))
  glVertexAttribL3i64vNV = cast[proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}](load("glVertexAttribL3i64vNV"))
  glVertexAttribL4i64vNV = cast[proc (index: GLuint, v: ptr GLint64EXT) {.stdcall.}](load("glVertexAttribL4i64vNV"))
  glVertexAttribL1ui64NV = cast[proc (index: GLuint, x: GLuint64EXT) {.stdcall.}](load("glVertexAttribL1ui64NV"))
  glVertexAttribL2ui64NV = cast[proc (index: GLuint, x: GLuint64EXT, y: GLuint64EXT) {.stdcall.}](load("glVertexAttribL2ui64NV"))
  glVertexAttribL3ui64NV = cast[proc (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) {.stdcall.}](load("glVertexAttribL3ui64NV"))
  glVertexAttribL4ui64NV = cast[proc (index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) {.stdcall.}](load("glVertexAttribL4ui64NV"))
  glVertexAttribL1ui64vNV = cast[proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}](load("glVertexAttribL1ui64vNV"))
  glVertexAttribL2ui64vNV = cast[proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}](load("glVertexAttribL2ui64vNV"))
  glVertexAttribL3ui64vNV = cast[proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}](load("glVertexAttribL3ui64vNV"))
  glVertexAttribL4ui64vNV = cast[proc (index: GLuint, v: ptr GLuint64EXT) {.stdcall.}](load("glVertexAttribL4ui64vNV"))
  glGetVertexAttribLi64vNV = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint64EXT) {.stdcall.}](load("glGetVertexAttribLi64vNV"))
  glGetVertexAttribLui64vNV = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint64EXT) {.stdcall.}](load("glGetVertexAttribLui64vNV"))
  glVertexAttribLFormatNV = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}](load("glVertexAttribLFormatNV"))


proc load_GL_NV_vertex_buffer_unified_memory(load: proc) =
  if not GLAD_GL_NV_vertex_buffer_unified_memory: return
  glBufferAddressRangeNV = cast[proc (pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) {.stdcall.}](load("glBufferAddressRangeNV"))
  glVertexFormatNV = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}](load("glVertexFormatNV"))
  glNormalFormatNV = cast[proc (`type`: GLenum, stride: GLsizei) {.stdcall.}](load("glNormalFormatNV"))
  glColorFormatNV = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}](load("glColorFormatNV"))
  glIndexFormatNV = cast[proc (`type`: GLenum, stride: GLsizei) {.stdcall.}](load("glIndexFormatNV"))
  glTexCoordFormatNV = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}](load("glTexCoordFormatNV"))
  glEdgeFlagFormatNV = cast[proc (stride: GLsizei) {.stdcall.}](load("glEdgeFlagFormatNV"))
  glSecondaryColorFormatNV = cast[proc (size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}](load("glSecondaryColorFormatNV"))
  glFogCoordFormatNV = cast[proc (`type`: GLenum, stride: GLsizei) {.stdcall.}](load("glFogCoordFormatNV"))
  glVertexAttribFormatNV = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei) {.stdcall.}](load("glVertexAttribFormatNV"))
  glVertexAttribIFormatNV = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei) {.stdcall.}](load("glVertexAttribIFormatNV"))
  glGetIntegerui64i_vNV = cast[proc (value: GLenum, index: GLuint, result: ptr GLuint64EXT) {.stdcall.}](load("glGetIntegerui64i_vNV"))


proc load_GL_NV_vertex_program(load: proc) =
  if not GLAD_GL_NV_vertex_program: return
  glAreProgramsResidentNV = cast[proc (n: GLsizei, programs: ptr GLuint, residences: ptr GLboolean): GLboolean {.stdcall.}](load("glAreProgramsResidentNV"))
  glBindProgramNV = cast[proc (target: GLenum, id: GLuint) {.stdcall.}](load("glBindProgramNV"))
  glDeleteProgramsNV = cast[proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}](load("glDeleteProgramsNV"))
  glExecuteProgramNV = cast[proc (target: GLenum, id: GLuint, params: ptr GLfloat) {.stdcall.}](load("glExecuteProgramNV"))
  glGenProgramsNV = cast[proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}](load("glGenProgramsNV"))
  glGetProgramParameterdvNV = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetProgramParameterdvNV"))
  glGetProgramParameterfvNV = cast[proc (target: GLenum, index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetProgramParameterfvNV"))
  glGetProgramivNV = cast[proc (id: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetProgramivNV"))
  glGetProgramStringNV = cast[proc (id: GLuint, pname: GLenum, program: ptr GLubyte) {.stdcall.}](load("glGetProgramStringNV"))
  glGetTrackMatrixivNV = cast[proc (target: GLenum, address: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetTrackMatrixivNV"))
  glGetVertexAttribdvNV = cast[proc (index: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVertexAttribdvNV"))
  glGetVertexAttribfvNV = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVertexAttribfvNV"))
  glGetVertexAttribivNV = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribivNV"))
  glGetVertexAttribPointervNV = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.stdcall.}](load("glGetVertexAttribPointervNV"))
  glIsProgramNV = cast[proc (id: GLuint): GLboolean {.stdcall.}](load("glIsProgramNV"))
  glLoadProgramNV = cast[proc (target: GLenum, id: GLuint, len: GLsizei, program: ptr GLubyte) {.stdcall.}](load("glLoadProgramNV"))
  glProgramParameter4dNV = cast[proc (target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glProgramParameter4dNV"))
  glProgramParameter4dvNV = cast[proc (target: GLenum, index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glProgramParameter4dvNV"))
  glProgramParameter4fNV = cast[proc (target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glProgramParameter4fNV"))
  glProgramParameter4fvNV = cast[proc (target: GLenum, index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glProgramParameter4fvNV"))
  glProgramParameters4dvNV = cast[proc (target: GLenum, index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glProgramParameters4dvNV"))
  glProgramParameters4fvNV = cast[proc (target: GLenum, index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glProgramParameters4fvNV"))
  glRequestResidentProgramsNV = cast[proc (n: GLsizei, programs: ptr GLuint) {.stdcall.}](load("glRequestResidentProgramsNV"))
  glTrackMatrixNV = cast[proc (target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) {.stdcall.}](load("glTrackMatrixNV"))
  glVertexAttribPointerNV = cast[proc (index: GLuint, fsize: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribPointerNV"))
  glVertexAttrib1dNV = cast[proc (index: GLuint, x: GLdouble) {.stdcall.}](load("glVertexAttrib1dNV"))
  glVertexAttrib1dvNV = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib1dvNV"))
  glVertexAttrib1fNV = cast[proc (index: GLuint, x: GLfloat) {.stdcall.}](load("glVertexAttrib1fNV"))
  glVertexAttrib1fvNV = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib1fvNV"))
  glVertexAttrib1sNV = cast[proc (index: GLuint, x: GLshort) {.stdcall.}](load("glVertexAttrib1sNV"))
  glVertexAttrib1svNV = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib1svNV"))
  glVertexAttrib2dNV = cast[proc (index: GLuint, x: GLdouble, y: GLdouble) {.stdcall.}](load("glVertexAttrib2dNV"))
  glVertexAttrib2dvNV = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib2dvNV"))
  glVertexAttrib2fNV = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.stdcall.}](load("glVertexAttrib2fNV"))
  glVertexAttrib2fvNV = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib2fvNV"))
  glVertexAttrib2sNV = cast[proc (index: GLuint, x: GLshort, y: GLshort) {.stdcall.}](load("glVertexAttrib2sNV"))
  glVertexAttrib2svNV = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib2svNV"))
  glVertexAttrib3dNV = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) {.stdcall.}](load("glVertexAttrib3dNV"))
  glVertexAttrib3dvNV = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib3dvNV"))
  glVertexAttrib3fNV = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glVertexAttrib3fNV"))
  glVertexAttrib3fvNV = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib3fvNV"))
  glVertexAttrib3sNV = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort) {.stdcall.}](load("glVertexAttrib3sNV"))
  glVertexAttrib3svNV = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib3svNV"))
  glVertexAttrib4dNV = cast[proc (index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) {.stdcall.}](load("glVertexAttrib4dNV"))
  glVertexAttrib4dvNV = cast[proc (index: GLuint, v: ptr GLdouble) {.stdcall.}](load("glVertexAttrib4dvNV"))
  glVertexAttrib4fNV = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glVertexAttrib4fNV"))
  glVertexAttrib4fvNV = cast[proc (index: GLuint, v: ptr GLfloat) {.stdcall.}](load("glVertexAttrib4fvNV"))
  glVertexAttrib4sNV = cast[proc (index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) {.stdcall.}](load("glVertexAttrib4sNV"))
  glVertexAttrib4svNV = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttrib4svNV"))
  glVertexAttrib4ubNV = cast[proc (index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) {.stdcall.}](load("glVertexAttrib4ubNV"))
  glVertexAttrib4ubvNV = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttrib4ubvNV"))
  glVertexAttribs1dvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribs1dvNV"))
  glVertexAttribs1fvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glVertexAttribs1fvNV"))
  glVertexAttribs1svNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}](load("glVertexAttribs1svNV"))
  glVertexAttribs2dvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribs2dvNV"))
  glVertexAttribs2fvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glVertexAttribs2fvNV"))
  glVertexAttribs2svNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}](load("glVertexAttribs2svNV"))
  glVertexAttribs3dvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribs3dvNV"))
  glVertexAttribs3fvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glVertexAttribs3fvNV"))
  glVertexAttribs3svNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}](load("glVertexAttribs3svNV"))
  glVertexAttribs4dvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLdouble) {.stdcall.}](load("glVertexAttribs4dvNV"))
  glVertexAttribs4fvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLfloat) {.stdcall.}](load("glVertexAttribs4fvNV"))
  glVertexAttribs4svNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLshort) {.stdcall.}](load("glVertexAttribs4svNV"))
  glVertexAttribs4ubvNV = cast[proc (index: GLuint, count: GLsizei, v: ptr GLubyte) {.stdcall.}](load("glVertexAttribs4ubvNV"))


proc load_GL_NV_vertex_program4(load: proc) =
  if not GLAD_GL_NV_vertex_program4: return
  glVertexAttribI1iEXT = cast[proc (index: GLuint, x: GLint) {.stdcall.}](load("glVertexAttribI1iEXT"))
  glVertexAttribI2iEXT = cast[proc (index: GLuint, x: GLint, y: GLint) {.stdcall.}](load("glVertexAttribI2iEXT"))
  glVertexAttribI3iEXT = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint) {.stdcall.}](load("glVertexAttribI3iEXT"))
  glVertexAttribI4iEXT = cast[proc (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) {.stdcall.}](load("glVertexAttribI4iEXT"))
  glVertexAttribI1uiEXT = cast[proc (index: GLuint, x: GLuint) {.stdcall.}](load("glVertexAttribI1uiEXT"))
  glVertexAttribI2uiEXT = cast[proc (index: GLuint, x: GLuint, y: GLuint) {.stdcall.}](load("glVertexAttribI2uiEXT"))
  glVertexAttribI3uiEXT = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint) {.stdcall.}](load("glVertexAttribI3uiEXT"))
  glVertexAttribI4uiEXT = cast[proc (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) {.stdcall.}](load("glVertexAttribI4uiEXT"))
  glVertexAttribI1ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI1ivEXT"))
  glVertexAttribI2ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI2ivEXT"))
  glVertexAttribI3ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI3ivEXT"))
  glVertexAttribI4ivEXT = cast[proc (index: GLuint, v: ptr GLint) {.stdcall.}](load("glVertexAttribI4ivEXT"))
  glVertexAttribI1uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI1uivEXT"))
  glVertexAttribI2uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI2uivEXT"))
  glVertexAttribI3uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI3uivEXT"))
  glVertexAttribI4uivEXT = cast[proc (index: GLuint, v: ptr GLuint) {.stdcall.}](load("glVertexAttribI4uivEXT"))
  glVertexAttribI4bvEXT = cast[proc (index: GLuint, v: ptr GLbyte) {.stdcall.}](load("glVertexAttribI4bvEXT"))
  glVertexAttribI4svEXT = cast[proc (index: GLuint, v: ptr GLshort) {.stdcall.}](load("glVertexAttribI4svEXT"))
  glVertexAttribI4ubvEXT = cast[proc (index: GLuint, v: ptr GLubyte) {.stdcall.}](load("glVertexAttribI4ubvEXT"))
  glVertexAttribI4usvEXT = cast[proc (index: GLuint, v: ptr GLushort) {.stdcall.}](load("glVertexAttribI4usvEXT"))
  glVertexAttribIPointerEXT = cast[proc (index: GLuint, size: GLint, `type`: GLenum, stride: GLsizei, pointer: pointer) {.stdcall.}](load("glVertexAttribIPointerEXT"))
  glGetVertexAttribIivEXT = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVertexAttribIivEXT"))
  glGetVertexAttribIuivEXT = cast[proc (index: GLuint, pname: GLenum, params: ptr GLuint) {.stdcall.}](load("glGetVertexAttribIuivEXT"))


proc load_GL_NV_video_capture(load: proc) =
  if not GLAD_GL_NV_video_capture: return
  glBeginVideoCaptureNV = cast[proc (video_capture_slot: GLuint) {.stdcall.}](load("glBeginVideoCaptureNV"))
  glBindVideoCaptureStreamBufferNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) {.stdcall.}](load("glBindVideoCaptureStreamBufferNV"))
  glBindVideoCaptureStreamTextureNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) {.stdcall.}](load("glBindVideoCaptureStreamTextureNV"))
  glEndVideoCaptureNV = cast[proc (video_capture_slot: GLuint) {.stdcall.}](load("glEndVideoCaptureNV"))
  glGetVideoCaptureivNV = cast[proc (video_capture_slot: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVideoCaptureivNV"))
  glGetVideoCaptureStreamivNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetVideoCaptureStreamivNV"))
  glGetVideoCaptureStreamfvNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetVideoCaptureStreamfvNV"))
  glGetVideoCaptureStreamdvNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glGetVideoCaptureStreamdvNV"))
  glVideoCaptureNV = cast[proc (video_capture_slot: GLuint, sequence_num: ptr GLuint, capture_time: ptr GLuint64EXT): GLenum {.stdcall.}](load("glVideoCaptureNV"))
  glVideoCaptureStreamParameterivNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glVideoCaptureStreamParameterivNV"))
  glVideoCaptureStreamParameterfvNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glVideoCaptureStreamParameterfvNV"))
  glVideoCaptureStreamParameterdvNV = cast[proc (video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: ptr GLdouble) {.stdcall.}](load("glVideoCaptureStreamParameterdvNV"))


proc load_GL_NV_viewport_swizzle(load: proc) =
  if not GLAD_GL_NV_viewport_swizzle: return
  glViewportSwizzleNV = cast[proc (index: GLuint, swizzlex: GLenum, swizzley: GLenum, swizzlez: GLenum, swizzlew: GLenum) {.stdcall.}](load("glViewportSwizzleNV"))


proc load_GL_OES_byte_coordinates(load: proc) =
  if not GLAD_GL_OES_byte_coordinates: return
  glMultiTexCoord1bOES = cast[proc (texture: GLenum, s: GLbyte) {.stdcall.}](load("glMultiTexCoord1bOES"))
  glMultiTexCoord1bvOES = cast[proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}](load("glMultiTexCoord1bvOES"))
  glMultiTexCoord2bOES = cast[proc (texture: GLenum, s: GLbyte, t: GLbyte) {.stdcall.}](load("glMultiTexCoord2bOES"))
  glMultiTexCoord2bvOES = cast[proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}](load("glMultiTexCoord2bvOES"))
  glMultiTexCoord3bOES = cast[proc (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) {.stdcall.}](load("glMultiTexCoord3bOES"))
  glMultiTexCoord3bvOES = cast[proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}](load("glMultiTexCoord3bvOES"))
  glMultiTexCoord4bOES = cast[proc (texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) {.stdcall.}](load("glMultiTexCoord4bOES"))
  glMultiTexCoord4bvOES = cast[proc (texture: GLenum, coords: ptr GLbyte) {.stdcall.}](load("glMultiTexCoord4bvOES"))
  glTexCoord1bOES = cast[proc (s: GLbyte) {.stdcall.}](load("glTexCoord1bOES"))
  glTexCoord1bvOES = cast[proc (coords: ptr GLbyte) {.stdcall.}](load("glTexCoord1bvOES"))
  glTexCoord2bOES = cast[proc (s: GLbyte, t: GLbyte) {.stdcall.}](load("glTexCoord2bOES"))
  glTexCoord2bvOES = cast[proc (coords: ptr GLbyte) {.stdcall.}](load("glTexCoord2bvOES"))
  glTexCoord3bOES = cast[proc (s: GLbyte, t: GLbyte, r: GLbyte) {.stdcall.}](load("glTexCoord3bOES"))
  glTexCoord3bvOES = cast[proc (coords: ptr GLbyte) {.stdcall.}](load("glTexCoord3bvOES"))
  glTexCoord4bOES = cast[proc (s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) {.stdcall.}](load("glTexCoord4bOES"))
  glTexCoord4bvOES = cast[proc (coords: ptr GLbyte) {.stdcall.}](load("glTexCoord4bvOES"))
  glVertex2bOES = cast[proc (x: GLbyte, y: GLbyte) {.stdcall.}](load("glVertex2bOES"))
  glVertex2bvOES = cast[proc (coords: ptr GLbyte) {.stdcall.}](load("glVertex2bvOES"))
  glVertex3bOES = cast[proc (x: GLbyte, y: GLbyte, z: GLbyte) {.stdcall.}](load("glVertex3bOES"))
  glVertex3bvOES = cast[proc (coords: ptr GLbyte) {.stdcall.}](load("glVertex3bvOES"))
  glVertex4bOES = cast[proc (x: GLbyte, y: GLbyte, z: GLbyte, w: GLbyte) {.stdcall.}](load("glVertex4bOES"))
  glVertex4bvOES = cast[proc (coords: ptr GLbyte) {.stdcall.}](load("glVertex4bvOES"))


proc load_GL_OES_fixed_point(load: proc) =
  if not GLAD_GL_OES_fixed_point: return
  glAlphaFuncxOES = cast[proc (`func`: GLenum, `ref`: GLfixed) {.stdcall.}](load("glAlphaFuncxOES"))
  glClearColorxOES = cast[proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}](load("glClearColorxOES"))
  glClearDepthxOES = cast[proc (depth: GLfixed) {.stdcall.}](load("glClearDepthxOES"))
  glClipPlanexOES = cast[proc (plane: GLenum, equation: ptr GLfixed) {.stdcall.}](load("glClipPlanexOES"))
  glColor4xOES = cast[proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}](load("glColor4xOES"))
  glDepthRangexOES = cast[proc (n: GLfixed, f: GLfixed) {.stdcall.}](load("glDepthRangexOES"))
  glFogxOES = cast[proc (pname: GLenum, param: GLfixed) {.stdcall.}](load("glFogxOES"))
  glFogxvOES = cast[proc (pname: GLenum, param: ptr GLfixed) {.stdcall.}](load("glFogxvOES"))
  glFrustumxOES = cast[proc (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) {.stdcall.}](load("glFrustumxOES"))
  glGetClipPlanexOES = cast[proc (plane: GLenum, equation: ptr GLfixed) {.stdcall.}](load("glGetClipPlanexOES"))
  glGetFixedvOES = cast[proc (pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetFixedvOES"))
  glGetTexEnvxvOES = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetTexEnvxvOES"))
  glGetTexParameterxvOES = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetTexParameterxvOES"))
  glLightModelxOES = cast[proc (pname: GLenum, param: GLfixed) {.stdcall.}](load("glLightModelxOES"))
  glLightModelxvOES = cast[proc (pname: GLenum, param: ptr GLfixed) {.stdcall.}](load("glLightModelxvOES"))
  glLightxOES = cast[proc (light: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}](load("glLightxOES"))
  glLightxvOES = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glLightxvOES"))
  glLineWidthxOES = cast[proc (width: GLfixed) {.stdcall.}](load("glLineWidthxOES"))
  glLoadMatrixxOES = cast[proc (m: ptr GLfixed) {.stdcall.}](load("glLoadMatrixxOES"))
  glMaterialxOES = cast[proc (face: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}](load("glMaterialxOES"))
  glMaterialxvOES = cast[proc (face: GLenum, pname: GLenum, param: ptr GLfixed) {.stdcall.}](load("glMaterialxvOES"))
  glMultMatrixxOES = cast[proc (m: ptr GLfixed) {.stdcall.}](load("glMultMatrixxOES"))
  glMultiTexCoord4xOES = cast[proc (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) {.stdcall.}](load("glMultiTexCoord4xOES"))
  glNormal3xOES = cast[proc (nx: GLfixed, ny: GLfixed, nz: GLfixed) {.stdcall.}](load("glNormal3xOES"))
  glOrthoxOES = cast[proc (l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) {.stdcall.}](load("glOrthoxOES"))
  glPointParameterxvOES = cast[proc (pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glPointParameterxvOES"))
  glPointSizexOES = cast[proc (size: GLfixed) {.stdcall.}](load("glPointSizexOES"))
  glPolygonOffsetxOES = cast[proc (factor: GLfixed, units: GLfixed) {.stdcall.}](load("glPolygonOffsetxOES"))
  glRotatexOES = cast[proc (angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}](load("glRotatexOES"))
  glScalexOES = cast[proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}](load("glScalexOES"))
  glTexEnvxOES = cast[proc (target: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}](load("glTexEnvxOES"))
  glTexEnvxvOES = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glTexEnvxvOES"))
  glTexParameterxOES = cast[proc (target: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}](load("glTexParameterxOES"))
  glTexParameterxvOES = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glTexParameterxvOES"))
  glTranslatexOES = cast[proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}](load("glTranslatexOES"))
  glGetLightxvOES = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetLightxvOES"))
  glGetMaterialxvOES = cast[proc (face: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetMaterialxvOES"))
  glPointParameterxOES = cast[proc (pname: GLenum, param: GLfixed) {.stdcall.}](load("glPointParameterxOES"))
  glSampleCoveragexOES = cast[proc (value: GLclampx, invert: GLboolean) {.stdcall.}](load("glSampleCoveragexOES"))
  glAccumxOES = cast[proc (op: GLenum, value: GLfixed) {.stdcall.}](load("glAccumxOES"))
  glBitmapxOES = cast[proc (width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: ptr GLubyte) {.stdcall.}](load("glBitmapxOES"))
  glBlendColorxOES = cast[proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}](load("glBlendColorxOES"))
  glClearAccumxOES = cast[proc (red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) {.stdcall.}](load("glClearAccumxOES"))
  glColor3xOES = cast[proc (red: GLfixed, green: GLfixed, blue: GLfixed) {.stdcall.}](load("glColor3xOES"))
  glColor3xvOES = cast[proc (components: ptr GLfixed) {.stdcall.}](load("glColor3xvOES"))
  glColor4xvOES = cast[proc (components: ptr GLfixed) {.stdcall.}](load("glColor4xvOES"))
  glConvolutionParameterxOES = cast[proc (target: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}](load("glConvolutionParameterxOES"))
  glConvolutionParameterxvOES = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glConvolutionParameterxvOES"))
  glEvalCoord1xOES = cast[proc (u: GLfixed) {.stdcall.}](load("glEvalCoord1xOES"))
  glEvalCoord1xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glEvalCoord1xvOES"))
  glEvalCoord2xOES = cast[proc (u: GLfixed, v: GLfixed) {.stdcall.}](load("glEvalCoord2xOES"))
  glEvalCoord2xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glEvalCoord2xvOES"))
  glFeedbackBufferxOES = cast[proc (n: GLsizei, `type`: GLenum, buffer: ptr GLfixed) {.stdcall.}](load("glFeedbackBufferxOES"))
  glGetConvolutionParameterxvOES = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetConvolutionParameterxvOES"))
  glGetHistogramParameterxvOES = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetHistogramParameterxvOES"))
  glGetLightxOES = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetLightxOES"))
  glGetMapxvOES = cast[proc (target: GLenum, query: GLenum, v: ptr GLfixed) {.stdcall.}](load("glGetMapxvOES"))
  glGetMaterialxOES = cast[proc (face: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}](load("glGetMaterialxOES"))
  glGetPixelMapxv = cast[proc (map: GLenum, size: GLint, values: ptr GLfixed) {.stdcall.}](load("glGetPixelMapxv"))
  glGetTexGenxvOES = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetTexGenxvOES"))
  glGetTexLevelParameterxvOES = cast[proc (target: GLenum, level: GLint, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glGetTexLevelParameterxvOES"))
  glIndexxOES = cast[proc (component: GLfixed) {.stdcall.}](load("glIndexxOES"))
  glIndexxvOES = cast[proc (component: ptr GLfixed) {.stdcall.}](load("glIndexxvOES"))
  glLoadTransposeMatrixxOES = cast[proc (m: ptr GLfixed) {.stdcall.}](load("glLoadTransposeMatrixxOES"))
  glMap1xOES = cast[proc (target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) {.stdcall.}](load("glMap1xOES"))
  glMap2xOES = cast[proc (target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) {.stdcall.}](load("glMap2xOES"))
  glMapGrid1xOES = cast[proc (n: GLint, u1: GLfixed, u2: GLfixed) {.stdcall.}](load("glMapGrid1xOES"))
  glMapGrid2xOES = cast[proc (n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) {.stdcall.}](load("glMapGrid2xOES"))
  glMultTransposeMatrixxOES = cast[proc (m: ptr GLfixed) {.stdcall.}](load("glMultTransposeMatrixxOES"))
  glMultiTexCoord1xOES = cast[proc (texture: GLenum, s: GLfixed) {.stdcall.}](load("glMultiTexCoord1xOES"))
  glMultiTexCoord1xvOES = cast[proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}](load("glMultiTexCoord1xvOES"))
  glMultiTexCoord2xOES = cast[proc (texture: GLenum, s: GLfixed, t: GLfixed) {.stdcall.}](load("glMultiTexCoord2xOES"))
  glMultiTexCoord2xvOES = cast[proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}](load("glMultiTexCoord2xvOES"))
  glMultiTexCoord3xOES = cast[proc (texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) {.stdcall.}](load("glMultiTexCoord3xOES"))
  glMultiTexCoord3xvOES = cast[proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}](load("glMultiTexCoord3xvOES"))
  glMultiTexCoord4xvOES = cast[proc (texture: GLenum, coords: ptr GLfixed) {.stdcall.}](load("glMultiTexCoord4xvOES"))
  glNormal3xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glNormal3xvOES"))
  glPassThroughxOES = cast[proc (token: GLfixed) {.stdcall.}](load("glPassThroughxOES"))
  glPixelMapx = cast[proc (map: GLenum, size: GLint, values: ptr GLfixed) {.stdcall.}](load("glPixelMapx"))
  glPixelStorex = cast[proc (pname: GLenum, param: GLfixed) {.stdcall.}](load("glPixelStorex"))
  glPixelTransferxOES = cast[proc (pname: GLenum, param: GLfixed) {.stdcall.}](load("glPixelTransferxOES"))
  glPixelZoomxOES = cast[proc (xfactor: GLfixed, yfactor: GLfixed) {.stdcall.}](load("glPixelZoomxOES"))
  glPrioritizeTexturesxOES = cast[proc (n: GLsizei, textures: ptr GLuint, priorities: ptr GLfixed) {.stdcall.}](load("glPrioritizeTexturesxOES"))
  glRasterPos2xOES = cast[proc (x: GLfixed, y: GLfixed) {.stdcall.}](load("glRasterPos2xOES"))
  glRasterPos2xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glRasterPos2xvOES"))
  glRasterPos3xOES = cast[proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}](load("glRasterPos3xOES"))
  glRasterPos3xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glRasterPos3xvOES"))
  glRasterPos4xOES = cast[proc (x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) {.stdcall.}](load("glRasterPos4xOES"))
  glRasterPos4xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glRasterPos4xvOES"))
  glRectxOES = cast[proc (x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) {.stdcall.}](load("glRectxOES"))
  glRectxvOES = cast[proc (v1: ptr GLfixed, v2: ptr GLfixed) {.stdcall.}](load("glRectxvOES"))
  glTexCoord1xOES = cast[proc (s: GLfixed) {.stdcall.}](load("glTexCoord1xOES"))
  glTexCoord1xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glTexCoord1xvOES"))
  glTexCoord2xOES = cast[proc (s: GLfixed, t: GLfixed) {.stdcall.}](load("glTexCoord2xOES"))
  glTexCoord2xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glTexCoord2xvOES"))
  glTexCoord3xOES = cast[proc (s: GLfixed, t: GLfixed, r: GLfixed) {.stdcall.}](load("glTexCoord3xOES"))
  glTexCoord3xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glTexCoord3xvOES"))
  glTexCoord4xOES = cast[proc (s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) {.stdcall.}](load("glTexCoord4xOES"))
  glTexCoord4xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glTexCoord4xvOES"))
  glTexGenxOES = cast[proc (coord: GLenum, pname: GLenum, param: GLfixed) {.stdcall.}](load("glTexGenxOES"))
  glTexGenxvOES = cast[proc (coord: GLenum, pname: GLenum, params: ptr GLfixed) {.stdcall.}](load("glTexGenxvOES"))
  glVertex2xOES = cast[proc (x: GLfixed) {.stdcall.}](load("glVertex2xOES"))
  glVertex2xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glVertex2xvOES"))
  glVertex3xOES = cast[proc (x: GLfixed, y: GLfixed) {.stdcall.}](load("glVertex3xOES"))
  glVertex3xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glVertex3xvOES"))
  glVertex4xOES = cast[proc (x: GLfixed, y: GLfixed, z: GLfixed) {.stdcall.}](load("glVertex4xOES"))
  glVertex4xvOES = cast[proc (coords: ptr GLfixed) {.stdcall.}](load("glVertex4xvOES"))


proc load_GL_OES_query_matrix(load: proc) =
  if not GLAD_GL_OES_query_matrix: return
  glQueryMatrixxOES = cast[proc (mantissa: ptr GLfixed, exponent: ptr GLint): GLbitfield {.stdcall.}](load("glQueryMatrixxOES"))


proc load_GL_OES_single_precision(load: proc) =
  if not GLAD_GL_OES_single_precision: return
  glClearDepthfOES = cast[proc (depth: GLclampf) {.stdcall.}](load("glClearDepthfOES"))
  glClipPlanefOES = cast[proc (plane: GLenum, equation: ptr GLfloat) {.stdcall.}](load("glClipPlanefOES"))
  glDepthRangefOES = cast[proc (n: GLclampf, f: GLclampf) {.stdcall.}](load("glDepthRangefOES"))
  glFrustumfOES = cast[proc (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) {.stdcall.}](load("glFrustumfOES"))
  glGetClipPlanefOES = cast[proc (plane: GLenum, equation: ptr GLfloat) {.stdcall.}](load("glGetClipPlanefOES"))
  glOrthofOES = cast[proc (l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) {.stdcall.}](load("glOrthofOES"))


proc load_GL_OVR_multiview(load: proc) =
  if not GLAD_GL_OVR_multiview: return
  glFramebufferTextureMultiviewOVR = cast[proc (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, baseViewIndex: GLint, numViews: GLsizei) {.stdcall.}](load("glFramebufferTextureMultiviewOVR"))


proc load_GL_PGI_misc_hints(load: proc) =
  if not GLAD_GL_PGI_misc_hints: return
  glHintPGI = cast[proc (target: GLenum, mode: GLint) {.stdcall.}](load("glHintPGI"))


proc load_GL_SGIS_detail_texture(load: proc) =
  if not GLAD_GL_SGIS_detail_texture: return
  glDetailTexFuncSGIS = cast[proc (target: GLenum, n: GLsizei, points: ptr GLfloat) {.stdcall.}](load("glDetailTexFuncSGIS"))
  glGetDetailTexFuncSGIS = cast[proc (target: GLenum, points: ptr GLfloat) {.stdcall.}](load("glGetDetailTexFuncSGIS"))


proc load_GL_SGIS_fog_function(load: proc) =
  if not GLAD_GL_SGIS_fog_function: return
  glFogFuncSGIS = cast[proc (n: GLsizei, points: ptr GLfloat) {.stdcall.}](load("glFogFuncSGIS"))
  glGetFogFuncSGIS = cast[proc (points: ptr GLfloat) {.stdcall.}](load("glGetFogFuncSGIS"))


proc load_GL_SGIS_multisample(load: proc) =
  if not GLAD_GL_SGIS_multisample: return
  glSampleMaskSGIS = cast[proc (value: GLclampf, invert: GLboolean) {.stdcall.}](load("glSampleMaskSGIS"))
  glSamplePatternSGIS = cast[proc (pattern: GLenum) {.stdcall.}](load("glSamplePatternSGIS"))


proc load_GL_SGIS_pixel_texture(load: proc) =
  if not GLAD_GL_SGIS_pixel_texture: return
  glPixelTexGenParameteriSGIS = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glPixelTexGenParameteriSGIS"))
  glPixelTexGenParameterivSGIS = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glPixelTexGenParameterivSGIS"))
  glPixelTexGenParameterfSGIS = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPixelTexGenParameterfSGIS"))
  glPixelTexGenParameterfvSGIS = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glPixelTexGenParameterfvSGIS"))
  glGetPixelTexGenParameterivSGIS = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetPixelTexGenParameterivSGIS"))
  glGetPixelTexGenParameterfvSGIS = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetPixelTexGenParameterfvSGIS"))


proc load_GL_SGIS_point_parameters(load: proc) =
  if not GLAD_GL_SGIS_point_parameters: return
  glPointParameterfSGIS = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glPointParameterfSGIS"))
  glPointParameterfvSGIS = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glPointParameterfvSGIS"))


proc load_GL_SGIS_sharpen_texture(load: proc) =
  if not GLAD_GL_SGIS_sharpen_texture: return
  glSharpenTexFuncSGIS = cast[proc (target: GLenum, n: GLsizei, points: ptr GLfloat) {.stdcall.}](load("glSharpenTexFuncSGIS"))
  glGetSharpenTexFuncSGIS = cast[proc (target: GLenum, points: ptr GLfloat) {.stdcall.}](load("glGetSharpenTexFuncSGIS"))


proc load_GL_SGIS_texture4D(load: proc) =
  if not GLAD_GL_SGIS_texture4D: return
  glTexImage4DSGIS = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexImage4DSGIS"))
  glTexSubImage4DSGIS = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.stdcall.}](load("glTexSubImage4DSGIS"))


proc load_GL_SGIS_texture_color_mask(load: proc) =
  if not GLAD_GL_SGIS_texture_color_mask: return
  glTextureColorMaskSGIS = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.stdcall.}](load("glTextureColorMaskSGIS"))


proc load_GL_SGIS_texture_filter4(load: proc) =
  if not GLAD_GL_SGIS_texture_filter4: return
  glGetTexFilterFuncSGIS = cast[proc (target: GLenum, filter: GLenum, weights: ptr GLfloat) {.stdcall.}](load("glGetTexFilterFuncSGIS"))
  glTexFilterFuncSGIS = cast[proc (target: GLenum, filter: GLenum, n: GLsizei, weights: ptr GLfloat) {.stdcall.}](load("glTexFilterFuncSGIS"))


proc load_GL_SGIX_async(load: proc) =
  if not GLAD_GL_SGIX_async: return
  glAsyncMarkerSGIX = cast[proc (marker: GLuint) {.stdcall.}](load("glAsyncMarkerSGIX"))
  glFinishAsyncSGIX = cast[proc (markerp: ptr GLuint): GLint {.stdcall.}](load("glFinishAsyncSGIX"))
  glPollAsyncSGIX = cast[proc (markerp: ptr GLuint): GLint {.stdcall.}](load("glPollAsyncSGIX"))
  glGenAsyncMarkersSGIX = cast[proc (range: GLsizei): GLuint {.stdcall.}](load("glGenAsyncMarkersSGIX"))
  glDeleteAsyncMarkersSGIX = cast[proc (marker: GLuint, range: GLsizei) {.stdcall.}](load("glDeleteAsyncMarkersSGIX"))
  glIsAsyncMarkerSGIX = cast[proc (marker: GLuint): GLboolean {.stdcall.}](load("glIsAsyncMarkerSGIX"))


proc load_GL_SGIX_flush_raster(load: proc) =
  if not GLAD_GL_SGIX_flush_raster: return
  glFlushRasterSGIX = cast[proc () {.stdcall.}](load("glFlushRasterSGIX"))


proc load_GL_SGIX_fragment_lighting(load: proc) =
  if not GLAD_GL_SGIX_fragment_lighting: return
  glFragmentColorMaterialSGIX = cast[proc (face: GLenum, mode: GLenum) {.stdcall.}](load("glFragmentColorMaterialSGIX"))
  glFragmentLightfSGIX = cast[proc (light: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glFragmentLightfSGIX"))
  glFragmentLightfvSGIX = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glFragmentLightfvSGIX"))
  glFragmentLightiSGIX = cast[proc (light: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glFragmentLightiSGIX"))
  glFragmentLightivSGIX = cast[proc (light: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glFragmentLightivSGIX"))
  glFragmentLightModelfSGIX = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glFragmentLightModelfSGIX"))
  glFragmentLightModelfvSGIX = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glFragmentLightModelfvSGIX"))
  glFragmentLightModeliSGIX = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glFragmentLightModeliSGIX"))
  glFragmentLightModelivSGIX = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glFragmentLightModelivSGIX"))
  glFragmentMaterialfSGIX = cast[proc (face: GLenum, pname: GLenum, param: GLfloat) {.stdcall.}](load("glFragmentMaterialfSGIX"))
  glFragmentMaterialfvSGIX = cast[proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glFragmentMaterialfvSGIX"))
  glFragmentMaterialiSGIX = cast[proc (face: GLenum, pname: GLenum, param: GLint) {.stdcall.}](load("glFragmentMaterialiSGIX"))
  glFragmentMaterialivSGIX = cast[proc (face: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glFragmentMaterialivSGIX"))
  glGetFragmentLightfvSGIX = cast[proc (light: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetFragmentLightfvSGIX"))
  glGetFragmentLightivSGIX = cast[proc (light: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFragmentLightivSGIX"))
  glGetFragmentMaterialfvSGIX = cast[proc (face: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetFragmentMaterialfvSGIX"))
  glGetFragmentMaterialivSGIX = cast[proc (face: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetFragmentMaterialivSGIX"))
  glLightEnviSGIX = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glLightEnviSGIX"))


proc load_GL_SGIX_framezoom(load: proc) =
  if not GLAD_GL_SGIX_framezoom: return
  glFrameZoomSGIX = cast[proc (factor: GLint) {.stdcall.}](load("glFrameZoomSGIX"))


proc load_GL_SGIX_igloo_interface(load: proc) =
  if not GLAD_GL_SGIX_igloo_interface: return
  glIglooInterfaceSGIX = cast[proc (pname: GLenum, params: pointer) {.stdcall.}](load("glIglooInterfaceSGIX"))


proc load_GL_SGIX_instruments(load: proc) =
  if not GLAD_GL_SGIX_instruments: return
  glGetInstrumentsSGIX = cast[proc (): GLint {.stdcall.}](load("glGetInstrumentsSGIX"))
  glInstrumentsBufferSGIX = cast[proc (size: GLsizei, buffer: ptr GLint) {.stdcall.}](load("glInstrumentsBufferSGIX"))
  glPollInstrumentsSGIX = cast[proc (marker_p: ptr GLint): GLint {.stdcall.}](load("glPollInstrumentsSGIX"))
  glReadInstrumentsSGIX = cast[proc (marker: GLint) {.stdcall.}](load("glReadInstrumentsSGIX"))
  glStartInstrumentsSGIX = cast[proc () {.stdcall.}](load("glStartInstrumentsSGIX"))
  glStopInstrumentsSGIX = cast[proc (marker: GLint) {.stdcall.}](load("glStopInstrumentsSGIX"))


proc load_GL_SGIX_list_priority(load: proc) =
  if not GLAD_GL_SGIX_list_priority: return
  glGetListParameterfvSGIX = cast[proc (list: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetListParameterfvSGIX"))
  glGetListParameterivSGIX = cast[proc (list: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetListParameterivSGIX"))
  glListParameterfSGIX = cast[proc (list: GLuint, pname: GLenum, param: GLfloat) {.stdcall.}](load("glListParameterfSGIX"))
  glListParameterfvSGIX = cast[proc (list: GLuint, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glListParameterfvSGIX"))
  glListParameteriSGIX = cast[proc (list: GLuint, pname: GLenum, param: GLint) {.stdcall.}](load("glListParameteriSGIX"))
  glListParameterivSGIX = cast[proc (list: GLuint, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glListParameterivSGIX"))


proc load_GL_SGIX_pixel_texture(load: proc) =
  if not GLAD_GL_SGIX_pixel_texture: return
  glPixelTexGenSGIX = cast[proc (mode: GLenum) {.stdcall.}](load("glPixelTexGenSGIX"))


proc load_GL_SGIX_polynomial_ffd(load: proc) =
  if not GLAD_GL_SGIX_polynomial_ffd: return
  glDeformationMap3dSGIX = cast[proc (target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: ptr GLdouble) {.stdcall.}](load("glDeformationMap3dSGIX"))
  glDeformationMap3fSGIX = cast[proc (target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: ptr GLfloat) {.stdcall.}](load("glDeformationMap3fSGIX"))
  glDeformSGIX = cast[proc (mask: GLbitfield) {.stdcall.}](load("glDeformSGIX"))
  glLoadIdentityDeformationMapSGIX = cast[proc (mask: GLbitfield) {.stdcall.}](load("glLoadIdentityDeformationMapSGIX"))


proc load_GL_SGIX_reference_plane(load: proc) =
  if not GLAD_GL_SGIX_reference_plane: return
  glReferencePlaneSGIX = cast[proc (equation: ptr GLdouble) {.stdcall.}](load("glReferencePlaneSGIX"))


proc load_GL_SGIX_sprite(load: proc) =
  if not GLAD_GL_SGIX_sprite: return
  glSpriteParameterfSGIX = cast[proc (pname: GLenum, param: GLfloat) {.stdcall.}](load("glSpriteParameterfSGIX"))
  glSpriteParameterfvSGIX = cast[proc (pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glSpriteParameterfvSGIX"))
  glSpriteParameteriSGIX = cast[proc (pname: GLenum, param: GLint) {.stdcall.}](load("glSpriteParameteriSGIX"))
  glSpriteParameterivSGIX = cast[proc (pname: GLenum, params: ptr GLint) {.stdcall.}](load("glSpriteParameterivSGIX"))


proc load_GL_SGIX_tag_sample_buffer(load: proc) =
  if not GLAD_GL_SGIX_tag_sample_buffer: return
  glTagSampleBufferSGIX = cast[proc () {.stdcall.}](load("glTagSampleBufferSGIX"))


proc load_GL_SGI_color_table(load: proc) =
  if not GLAD_GL_SGI_color_table: return
  glColorTableSGI = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}](load("glColorTableSGI"))
  glColorTableParameterfvSGI = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glColorTableParameterfvSGI"))
  glColorTableParameterivSGI = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glColorTableParameterivSGI"))
  glCopyColorTableSGI = cast[proc (target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) {.stdcall.}](load("glCopyColorTableSGI"))
  glGetColorTableSGI = cast[proc (target: GLenum, format: GLenum, `type`: GLenum, table: pointer) {.stdcall.}](load("glGetColorTableSGI"))
  glGetColorTableParameterfvSGI = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.stdcall.}](load("glGetColorTableParameterfvSGI"))
  glGetColorTableParameterivSGI = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.stdcall.}](load("glGetColorTableParameterivSGI"))


proc load_GL_SUNX_constant_data(load: proc) =
  if not GLAD_GL_SUNX_constant_data: return
  glFinishTextureSUNX = cast[proc () {.stdcall.}](load("glFinishTextureSUNX"))


proc load_GL_SUN_global_alpha(load: proc) =
  if not GLAD_GL_SUN_global_alpha: return
  glGlobalAlphaFactorbSUN = cast[proc (factor: GLbyte) {.stdcall.}](load("glGlobalAlphaFactorbSUN"))
  glGlobalAlphaFactorsSUN = cast[proc (factor: GLshort) {.stdcall.}](load("glGlobalAlphaFactorsSUN"))
  glGlobalAlphaFactoriSUN = cast[proc (factor: GLint) {.stdcall.}](load("glGlobalAlphaFactoriSUN"))
  glGlobalAlphaFactorfSUN = cast[proc (factor: GLfloat) {.stdcall.}](load("glGlobalAlphaFactorfSUN"))
  glGlobalAlphaFactordSUN = cast[proc (factor: GLdouble) {.stdcall.}](load("glGlobalAlphaFactordSUN"))
  glGlobalAlphaFactorubSUN = cast[proc (factor: GLubyte) {.stdcall.}](load("glGlobalAlphaFactorubSUN"))
  glGlobalAlphaFactorusSUN = cast[proc (factor: GLushort) {.stdcall.}](load("glGlobalAlphaFactorusSUN"))
  glGlobalAlphaFactoruiSUN = cast[proc (factor: GLuint) {.stdcall.}](load("glGlobalAlphaFactoruiSUN"))


proc load_GL_SUN_mesh_array(load: proc) =
  if not GLAD_GL_SUN_mesh_array: return
  glDrawMeshArraysSUN = cast[proc (mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) {.stdcall.}](load("glDrawMeshArraysSUN"))


proc load_GL_SUN_triangle_list(load: proc) =
  if not GLAD_GL_SUN_triangle_list: return
  glReplacementCodeuiSUN = cast[proc (code: GLuint) {.stdcall.}](load("glReplacementCodeuiSUN"))
  glReplacementCodeusSUN = cast[proc (code: GLushort) {.stdcall.}](load("glReplacementCodeusSUN"))
  glReplacementCodeubSUN = cast[proc (code: GLubyte) {.stdcall.}](load("glReplacementCodeubSUN"))
  glReplacementCodeuivSUN = cast[proc (code: ptr GLuint) {.stdcall.}](load("glReplacementCodeuivSUN"))
  glReplacementCodeusvSUN = cast[proc (code: ptr GLushort) {.stdcall.}](load("glReplacementCodeusvSUN"))
  glReplacementCodeubvSUN = cast[proc (code: ptr GLubyte) {.stdcall.}](load("glReplacementCodeubvSUN"))
  glReplacementCodePointerSUN = cast[proc (`type`: GLenum, stride: GLsizei, pointer: ptr pointer) {.stdcall.}](load("glReplacementCodePointerSUN"))


proc load_GL_SUN_vertex(load: proc) =
  if not GLAD_GL_SUN_vertex: return
  glColor4ubVertex2fSUN = cast[proc (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) {.stdcall.}](load("glColor4ubVertex2fSUN"))
  glColor4ubVertex2fvSUN = cast[proc (c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}](load("glColor4ubVertex2fvSUN"))
  glColor4ubVertex3fSUN = cast[proc (r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glColor4ubVertex3fSUN"))
  glColor4ubVertex3fvSUN = cast[proc (c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}](load("glColor4ubVertex3fvSUN"))
  glColor3fVertex3fSUN = cast[proc (r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glColor3fVertex3fSUN"))
  glColor3fVertex3fvSUN = cast[proc (c: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glColor3fVertex3fvSUN"))
  glNormal3fVertex3fSUN = cast[proc (nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glNormal3fVertex3fSUN"))
  glNormal3fVertex3fvSUN = cast[proc (n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glNormal3fVertex3fvSUN"))
  glColor4fNormal3fVertex3fSUN = cast[proc (r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glColor4fNormal3fVertex3fSUN"))
  glColor4fNormal3fVertex3fvSUN = cast[proc (c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glColor4fNormal3fVertex3fvSUN"))
  glTexCoord2fVertex3fSUN = cast[proc (s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glTexCoord2fVertex3fSUN"))
  glTexCoord2fVertex3fvSUN = cast[proc (tc: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glTexCoord2fVertex3fvSUN"))
  glTexCoord4fVertex4fSUN = cast[proc (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glTexCoord4fVertex4fSUN"))
  glTexCoord4fVertex4fvSUN = cast[proc (tc: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glTexCoord4fVertex4fvSUN"))
  glTexCoord2fColor4ubVertex3fSUN = cast[proc (s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glTexCoord2fColor4ubVertex3fSUN"))
  glTexCoord2fColor4ubVertex3fvSUN = cast[proc (tc: ptr GLfloat, c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}](load("glTexCoord2fColor4ubVertex3fvSUN"))
  glTexCoord2fColor3fVertex3fSUN = cast[proc (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glTexCoord2fColor3fVertex3fSUN"))
  glTexCoord2fColor3fVertex3fvSUN = cast[proc (tc: ptr GLfloat, c: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glTexCoord2fColor3fVertex3fvSUN"))
  glTexCoord2fNormal3fVertex3fSUN = cast[proc (s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glTexCoord2fNormal3fVertex3fSUN"))
  glTexCoord2fNormal3fVertex3fvSUN = cast[proc (tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glTexCoord2fNormal3fVertex3fvSUN"))
  glTexCoord2fColor4fNormal3fVertex3fSUN = cast[proc (s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glTexCoord2fColor4fNormal3fVertex3fSUN"))
  glTexCoord2fColor4fNormal3fVertex3fvSUN = cast[proc (tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glTexCoord2fColor4fNormal3fVertex3fvSUN"))
  glTexCoord4fColor4fNormal3fVertex4fSUN = cast[proc (s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.stdcall.}](load("glTexCoord4fColor4fNormal3fVertex4fSUN"))
  glTexCoord4fColor4fNormal3fVertex4fvSUN = cast[proc (tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glTexCoord4fColor4fNormal3fVertex4fvSUN"))
  glReplacementCodeuiVertex3fSUN = cast[proc (rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiVertex3fSUN"))
  glReplacementCodeuiVertex3fvSUN = cast[proc (rc: ptr GLuint, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiVertex3fvSUN"))
  glReplacementCodeuiColor4ubVertex3fSUN = cast[proc (rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiColor4ubVertex3fSUN"))
  glReplacementCodeuiColor4ubVertex3fvSUN = cast[proc (rc: ptr GLuint, c: ptr GLubyte, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiColor4ubVertex3fvSUN"))
  glReplacementCodeuiColor3fVertex3fSUN = cast[proc (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiColor3fVertex3fSUN"))
  glReplacementCodeuiColor3fVertex3fvSUN = cast[proc (rc: ptr GLuint, c: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiColor3fVertex3fvSUN"))
  glReplacementCodeuiNormal3fVertex3fSUN = cast[proc (rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiNormal3fVertex3fSUN"))
  glReplacementCodeuiNormal3fVertex3fvSUN = cast[proc (rc: ptr GLuint, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiNormal3fVertex3fvSUN"))
  glReplacementCodeuiColor4fNormal3fVertex3fSUN = cast[proc (rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiColor4fNormal3fVertex3fSUN"))
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN = cast[proc (rc: ptr GLuint, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"))
  glReplacementCodeuiTexCoord2fVertex3fSUN = cast[proc (rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiTexCoord2fVertex3fSUN"))
  glReplacementCodeuiTexCoord2fVertex3fvSUN = cast[proc (rc: ptr GLuint, tc: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiTexCoord2fVertex3fvSUN"))
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = cast[proc (rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"))
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = cast[proc (rc: ptr GLuint, tc: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"))
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = cast[proc (rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) {.stdcall.}](load("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"))
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = cast[proc (rc: ptr GLuint, tc: ptr GLfloat, c: ptr GLfloat, n: ptr GLfloat, v: ptr GLfloat) {.stdcall.}](load("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"))


proc findExtensionsGL() =
  GLAD_GL_3DFX_multisample = hasExt("GL_3DFX_multisample")
  GLAD_GL_3DFX_tbuffer = hasExt("GL_3DFX_tbuffer")
  GLAD_GL_3DFX_texture_compression_FXT1 = hasExt("GL_3DFX_texture_compression_FXT1")
  GLAD_GL_AMD_blend_minmax_factor = hasExt("GL_AMD_blend_minmax_factor")
  GLAD_GL_AMD_conservative_depth = hasExt("GL_AMD_conservative_depth")
  GLAD_GL_AMD_debug_output = hasExt("GL_AMD_debug_output")
  GLAD_GL_AMD_depth_clamp_separate = hasExt("GL_AMD_depth_clamp_separate")
  GLAD_GL_AMD_draw_buffers_blend = hasExt("GL_AMD_draw_buffers_blend")
  GLAD_GL_AMD_framebuffer_multisample_advanced = hasExt("GL_AMD_framebuffer_multisample_advanced")
  GLAD_GL_AMD_framebuffer_sample_positions = hasExt("GL_AMD_framebuffer_sample_positions")
  GLAD_GL_AMD_gcn_shader = hasExt("GL_AMD_gcn_shader")
  GLAD_GL_AMD_gpu_shader_half_float = hasExt("GL_AMD_gpu_shader_half_float")
  GLAD_GL_AMD_gpu_shader_int16 = hasExt("GL_AMD_gpu_shader_int16")
  GLAD_GL_AMD_gpu_shader_int64 = hasExt("GL_AMD_gpu_shader_int64")
  GLAD_GL_AMD_interleaved_elements = hasExt("GL_AMD_interleaved_elements")
  GLAD_GL_AMD_multi_draw_indirect = hasExt("GL_AMD_multi_draw_indirect")
  GLAD_GL_AMD_name_gen_delete = hasExt("GL_AMD_name_gen_delete")
  GLAD_GL_AMD_occlusion_query_event = hasExt("GL_AMD_occlusion_query_event")
  GLAD_GL_AMD_performance_monitor = hasExt("GL_AMD_performance_monitor")
  GLAD_GL_AMD_pinned_memory = hasExt("GL_AMD_pinned_memory")
  GLAD_GL_AMD_query_buffer_object = hasExt("GL_AMD_query_buffer_object")
  GLAD_GL_AMD_sample_positions = hasExt("GL_AMD_sample_positions")
  GLAD_GL_AMD_seamless_cubemap_per_texture = hasExt("GL_AMD_seamless_cubemap_per_texture")
  GLAD_GL_AMD_shader_atomic_counter_ops = hasExt("GL_AMD_shader_atomic_counter_ops")
  GLAD_GL_AMD_shader_ballot = hasExt("GL_AMD_shader_ballot")
  GLAD_GL_AMD_shader_explicit_vertex_parameter = hasExt("GL_AMD_shader_explicit_vertex_parameter")
  GLAD_GL_AMD_shader_gpu_shader_half_float_fetch = hasExt("GL_AMD_shader_gpu_shader_half_float_fetch")
  GLAD_GL_AMD_shader_image_load_store_lod = hasExt("GL_AMD_shader_image_load_store_lod")
  GLAD_GL_AMD_shader_stencil_export = hasExt("GL_AMD_shader_stencil_export")
  GLAD_GL_AMD_shader_trinary_minmax = hasExt("GL_AMD_shader_trinary_minmax")
  GLAD_GL_AMD_sparse_texture = hasExt("GL_AMD_sparse_texture")
  GLAD_GL_AMD_stencil_operation_extended = hasExt("GL_AMD_stencil_operation_extended")
  GLAD_GL_AMD_texture_gather_bias_lod = hasExt("GL_AMD_texture_gather_bias_lod")
  GLAD_GL_AMD_texture_texture4 = hasExt("GL_AMD_texture_texture4")
  GLAD_GL_AMD_transform_feedback3_lines_triangles = hasExt("GL_AMD_transform_feedback3_lines_triangles")
  GLAD_GL_AMD_transform_feedback4 = hasExt("GL_AMD_transform_feedback4")
  GLAD_GL_AMD_vertex_shader_layer = hasExt("GL_AMD_vertex_shader_layer")
  GLAD_GL_AMD_vertex_shader_tessellator = hasExt("GL_AMD_vertex_shader_tessellator")
  GLAD_GL_AMD_vertex_shader_viewport_index = hasExt("GL_AMD_vertex_shader_viewport_index")
  GLAD_GL_APPLE_aux_depth_stencil = hasExt("GL_APPLE_aux_depth_stencil")
  GLAD_GL_APPLE_client_storage = hasExt("GL_APPLE_client_storage")
  GLAD_GL_APPLE_element_array = hasExt("GL_APPLE_element_array")
  GLAD_GL_APPLE_fence = hasExt("GL_APPLE_fence")
  GLAD_GL_APPLE_float_pixels = hasExt("GL_APPLE_float_pixels")
  GLAD_GL_APPLE_flush_buffer_range = hasExt("GL_APPLE_flush_buffer_range")
  GLAD_GL_APPLE_object_purgeable = hasExt("GL_APPLE_object_purgeable")
  GLAD_GL_APPLE_rgb_422 = hasExt("GL_APPLE_rgb_422")
  GLAD_GL_APPLE_row_bytes = hasExt("GL_APPLE_row_bytes")
  GLAD_GL_APPLE_specular_vector = hasExt("GL_APPLE_specular_vector")
  GLAD_GL_APPLE_texture_range = hasExt("GL_APPLE_texture_range")
  GLAD_GL_APPLE_transform_hint = hasExt("GL_APPLE_transform_hint")
  GLAD_GL_APPLE_vertex_array_object = hasExt("GL_APPLE_vertex_array_object")
  GLAD_GL_APPLE_vertex_array_range = hasExt("GL_APPLE_vertex_array_range")
  GLAD_GL_APPLE_vertex_program_evaluators = hasExt("GL_APPLE_vertex_program_evaluators")
  GLAD_GL_APPLE_ycbcr_422 = hasExt("GL_APPLE_ycbcr_422")
  GLAD_GL_ARB_ES2_compatibility = hasExt("GL_ARB_ES2_compatibility")
  GLAD_GL_ARB_ES3_1_compatibility = hasExt("GL_ARB_ES3_1_compatibility")
  GLAD_GL_ARB_ES3_2_compatibility = hasExt("GL_ARB_ES3_2_compatibility")
  GLAD_GL_ARB_ES3_compatibility = hasExt("GL_ARB_ES3_compatibility")
  GLAD_GL_ARB_arrays_of_arrays = hasExt("GL_ARB_arrays_of_arrays")
  GLAD_GL_ARB_base_instance = hasExt("GL_ARB_base_instance")
  GLAD_GL_ARB_bindless_texture = hasExt("GL_ARB_bindless_texture")
  GLAD_GL_ARB_blend_func_extended = hasExt("GL_ARB_blend_func_extended")
  GLAD_GL_ARB_buffer_storage = hasExt("GL_ARB_buffer_storage")
  GLAD_GL_ARB_cl_event = hasExt("GL_ARB_cl_event")
  GLAD_GL_ARB_clear_buffer_object = hasExt("GL_ARB_clear_buffer_object")
  GLAD_GL_ARB_clear_texture = hasExt("GL_ARB_clear_texture")
  GLAD_GL_ARB_clip_control = hasExt("GL_ARB_clip_control")
  GLAD_GL_ARB_color_buffer_float = hasExt("GL_ARB_color_buffer_float")
  GLAD_GL_ARB_compatibility = hasExt("GL_ARB_compatibility")
  GLAD_GL_ARB_compressed_texture_pixel_storage = hasExt("GL_ARB_compressed_texture_pixel_storage")
  GLAD_GL_ARB_compute_shader = hasExt("GL_ARB_compute_shader")
  GLAD_GL_ARB_compute_variable_group_size = hasExt("GL_ARB_compute_variable_group_size")
  GLAD_GL_ARB_conditional_render_inverted = hasExt("GL_ARB_conditional_render_inverted")
  GLAD_GL_ARB_conservative_depth = hasExt("GL_ARB_conservative_depth")
  GLAD_GL_ARB_copy_buffer = hasExt("GL_ARB_copy_buffer")
  GLAD_GL_ARB_copy_image = hasExt("GL_ARB_copy_image")
  GLAD_GL_ARB_cull_distance = hasExt("GL_ARB_cull_distance")
  GLAD_GL_ARB_debug_output = hasExt("GL_ARB_debug_output")
  GLAD_GL_ARB_depth_buffer_float = hasExt("GL_ARB_depth_buffer_float")
  GLAD_GL_ARB_depth_clamp = hasExt("GL_ARB_depth_clamp")
  GLAD_GL_ARB_depth_texture = hasExt("GL_ARB_depth_texture")
  GLAD_GL_ARB_derivative_control = hasExt("GL_ARB_derivative_control")
  GLAD_GL_ARB_direct_state_access = hasExt("GL_ARB_direct_state_access")
  GLAD_GL_ARB_draw_buffers = hasExt("GL_ARB_draw_buffers")
  GLAD_GL_ARB_draw_buffers_blend = hasExt("GL_ARB_draw_buffers_blend")
  GLAD_GL_ARB_draw_elements_base_vertex = hasExt("GL_ARB_draw_elements_base_vertex")
  GLAD_GL_ARB_draw_indirect = hasExt("GL_ARB_draw_indirect")
  GLAD_GL_ARB_draw_instanced = hasExt("GL_ARB_draw_instanced")
  GLAD_GL_ARB_enhanced_layouts = hasExt("GL_ARB_enhanced_layouts")
  GLAD_GL_ARB_explicit_attrib_location = hasExt("GL_ARB_explicit_attrib_location")
  GLAD_GL_ARB_explicit_uniform_location = hasExt("GL_ARB_explicit_uniform_location")
  GLAD_GL_ARB_fragment_coord_conventions = hasExt("GL_ARB_fragment_coord_conventions")
  GLAD_GL_ARB_fragment_layer_viewport = hasExt("GL_ARB_fragment_layer_viewport")
  GLAD_GL_ARB_fragment_program = hasExt("GL_ARB_fragment_program")
  GLAD_GL_ARB_fragment_program_shadow = hasExt("GL_ARB_fragment_program_shadow")
  GLAD_GL_ARB_fragment_shader = hasExt("GL_ARB_fragment_shader")
  GLAD_GL_ARB_fragment_shader_interlock = hasExt("GL_ARB_fragment_shader_interlock")
  GLAD_GL_ARB_framebuffer_no_attachments = hasExt("GL_ARB_framebuffer_no_attachments")
  GLAD_GL_ARB_framebuffer_object = hasExt("GL_ARB_framebuffer_object")
  GLAD_GL_ARB_framebuffer_sRGB = hasExt("GL_ARB_framebuffer_sRGB")
  GLAD_GL_ARB_geometry_shader4 = hasExt("GL_ARB_geometry_shader4")
  GLAD_GL_ARB_get_program_binary = hasExt("GL_ARB_get_program_binary")
  GLAD_GL_ARB_get_texture_sub_image = hasExt("GL_ARB_get_texture_sub_image")
  GLAD_GL_ARB_gl_spirv = hasExt("GL_ARB_gl_spirv")
  GLAD_GL_ARB_gpu_shader5 = hasExt("GL_ARB_gpu_shader5")
  GLAD_GL_ARB_gpu_shader_fp64 = hasExt("GL_ARB_gpu_shader_fp64")
  GLAD_GL_ARB_gpu_shader_int64 = hasExt("GL_ARB_gpu_shader_int64")
  GLAD_GL_ARB_half_float_pixel = hasExt("GL_ARB_half_float_pixel")
  GLAD_GL_ARB_half_float_vertex = hasExt("GL_ARB_half_float_vertex")
  GLAD_GL_ARB_imaging = hasExt("GL_ARB_imaging")
  GLAD_GL_ARB_indirect_parameters = hasExt("GL_ARB_indirect_parameters")
  GLAD_GL_ARB_instanced_arrays = hasExt("GL_ARB_instanced_arrays")
  GLAD_GL_ARB_internalformat_query = hasExt("GL_ARB_internalformat_query")
  GLAD_GL_ARB_internalformat_query2 = hasExt("GL_ARB_internalformat_query2")
  GLAD_GL_ARB_invalidate_subdata = hasExt("GL_ARB_invalidate_subdata")
  GLAD_GL_ARB_map_buffer_alignment = hasExt("GL_ARB_map_buffer_alignment")
  GLAD_GL_ARB_map_buffer_range = hasExt("GL_ARB_map_buffer_range")
  GLAD_GL_ARB_matrix_palette = hasExt("GL_ARB_matrix_palette")
  GLAD_GL_ARB_multi_bind = hasExt("GL_ARB_multi_bind")
  GLAD_GL_ARB_multi_draw_indirect = hasExt("GL_ARB_multi_draw_indirect")
  GLAD_GL_ARB_multisample = hasExt("GL_ARB_multisample")
  GLAD_GL_ARB_multitexture = hasExt("GL_ARB_multitexture")
  GLAD_GL_ARB_occlusion_query = hasExt("GL_ARB_occlusion_query")
  GLAD_GL_ARB_occlusion_query2 = hasExt("GL_ARB_occlusion_query2")
  GLAD_GL_ARB_parallel_shader_compile = hasExt("GL_ARB_parallel_shader_compile")
  GLAD_GL_ARB_pipeline_statistics_query = hasExt("GL_ARB_pipeline_statistics_query")
  GLAD_GL_ARB_pixel_buffer_object = hasExt("GL_ARB_pixel_buffer_object")
  GLAD_GL_ARB_point_parameters = hasExt("GL_ARB_point_parameters")
  GLAD_GL_ARB_point_sprite = hasExt("GL_ARB_point_sprite")
  GLAD_GL_ARB_polygon_offset_clamp = hasExt("GL_ARB_polygon_offset_clamp")
  GLAD_GL_ARB_post_depth_coverage = hasExt("GL_ARB_post_depth_coverage")
  GLAD_GL_ARB_program_interface_query = hasExt("GL_ARB_program_interface_query")
  GLAD_GL_ARB_provoking_vertex = hasExt("GL_ARB_provoking_vertex")
  GLAD_GL_ARB_query_buffer_object = hasExt("GL_ARB_query_buffer_object")
  GLAD_GL_ARB_robust_buffer_access_behavior = hasExt("GL_ARB_robust_buffer_access_behavior")
  GLAD_GL_ARB_robustness = hasExt("GL_ARB_robustness")
  GLAD_GL_ARB_robustness_isolation = hasExt("GL_ARB_robustness_isolation")
  GLAD_GL_ARB_sample_locations = hasExt("GL_ARB_sample_locations")
  GLAD_GL_ARB_sample_shading = hasExt("GL_ARB_sample_shading")
  GLAD_GL_ARB_sampler_objects = hasExt("GL_ARB_sampler_objects")
  GLAD_GL_ARB_seamless_cube_map = hasExt("GL_ARB_seamless_cube_map")
  GLAD_GL_ARB_seamless_cubemap_per_texture = hasExt("GL_ARB_seamless_cubemap_per_texture")
  GLAD_GL_ARB_separate_shader_objects = hasExt("GL_ARB_separate_shader_objects")
  GLAD_GL_ARB_shader_atomic_counter_ops = hasExt("GL_ARB_shader_atomic_counter_ops")
  GLAD_GL_ARB_shader_atomic_counters = hasExt("GL_ARB_shader_atomic_counters")
  GLAD_GL_ARB_shader_ballot = hasExt("GL_ARB_shader_ballot")
  GLAD_GL_ARB_shader_bit_encoding = hasExt("GL_ARB_shader_bit_encoding")
  GLAD_GL_ARB_shader_clock = hasExt("GL_ARB_shader_clock")
  GLAD_GL_ARB_shader_draw_parameters = hasExt("GL_ARB_shader_draw_parameters")
  GLAD_GL_ARB_shader_group_vote = hasExt("GL_ARB_shader_group_vote")
  GLAD_GL_ARB_shader_image_load_store = hasExt("GL_ARB_shader_image_load_store")
  GLAD_GL_ARB_shader_image_size = hasExt("GL_ARB_shader_image_size")
  GLAD_GL_ARB_shader_objects = hasExt("GL_ARB_shader_objects")
  GLAD_GL_ARB_shader_precision = hasExt("GL_ARB_shader_precision")
  GLAD_GL_ARB_shader_stencil_export = hasExt("GL_ARB_shader_stencil_export")
  GLAD_GL_ARB_shader_storage_buffer_object = hasExt("GL_ARB_shader_storage_buffer_object")
  GLAD_GL_ARB_shader_subroutine = hasExt("GL_ARB_shader_subroutine")
  GLAD_GL_ARB_shader_texture_image_samples = hasExt("GL_ARB_shader_texture_image_samples")
  GLAD_GL_ARB_shader_texture_lod = hasExt("GL_ARB_shader_texture_lod")
  GLAD_GL_ARB_shader_viewport_layer_array = hasExt("GL_ARB_shader_viewport_layer_array")
  GLAD_GL_ARB_shading_language_100 = hasExt("GL_ARB_shading_language_100")
  GLAD_GL_ARB_shading_language_420pack = hasExt("GL_ARB_shading_language_420pack")
  GLAD_GL_ARB_shading_language_include = hasExt("GL_ARB_shading_language_include")
  GLAD_GL_ARB_shading_language_packing = hasExt("GL_ARB_shading_language_packing")
  GLAD_GL_ARB_shadow = hasExt("GL_ARB_shadow")
  GLAD_GL_ARB_shadow_ambient = hasExt("GL_ARB_shadow_ambient")
  GLAD_GL_ARB_sparse_buffer = hasExt("GL_ARB_sparse_buffer")
  GLAD_GL_ARB_sparse_texture = hasExt("GL_ARB_sparse_texture")
  GLAD_GL_ARB_sparse_texture2 = hasExt("GL_ARB_sparse_texture2")
  GLAD_GL_ARB_sparse_texture_clamp = hasExt("GL_ARB_sparse_texture_clamp")
  GLAD_GL_ARB_spirv_extensions = hasExt("GL_ARB_spirv_extensions")
  GLAD_GL_ARB_stencil_texturing = hasExt("GL_ARB_stencil_texturing")
  GLAD_GL_ARB_sync = hasExt("GL_ARB_sync")
  GLAD_GL_ARB_tessellation_shader = hasExt("GL_ARB_tessellation_shader")
  GLAD_GL_ARB_texture_barrier = hasExt("GL_ARB_texture_barrier")
  GLAD_GL_ARB_texture_border_clamp = hasExt("GL_ARB_texture_border_clamp")
  GLAD_GL_ARB_texture_buffer_object = hasExt("GL_ARB_texture_buffer_object")
  GLAD_GL_ARB_texture_buffer_object_rgb32 = hasExt("GL_ARB_texture_buffer_object_rgb32")
  GLAD_GL_ARB_texture_buffer_range = hasExt("GL_ARB_texture_buffer_range")
  GLAD_GL_ARB_texture_compression = hasExt("GL_ARB_texture_compression")
  GLAD_GL_ARB_texture_compression_bptc = hasExt("GL_ARB_texture_compression_bptc")
  GLAD_GL_ARB_texture_compression_rgtc = hasExt("GL_ARB_texture_compression_rgtc")
  GLAD_GL_ARB_texture_cube_map = hasExt("GL_ARB_texture_cube_map")
  GLAD_GL_ARB_texture_cube_map_array = hasExt("GL_ARB_texture_cube_map_array")
  GLAD_GL_ARB_texture_env_add = hasExt("GL_ARB_texture_env_add")
  GLAD_GL_ARB_texture_env_combine = hasExt("GL_ARB_texture_env_combine")
  GLAD_GL_ARB_texture_env_crossbar = hasExt("GL_ARB_texture_env_crossbar")
  GLAD_GL_ARB_texture_env_dot3 = hasExt("GL_ARB_texture_env_dot3")
  GLAD_GL_ARB_texture_filter_anisotropic = hasExt("GL_ARB_texture_filter_anisotropic")
  GLAD_GL_ARB_texture_filter_minmax = hasExt("GL_ARB_texture_filter_minmax")
  GLAD_GL_ARB_texture_float = hasExt("GL_ARB_texture_float")
  GLAD_GL_ARB_texture_gather = hasExt("GL_ARB_texture_gather")
  GLAD_GL_ARB_texture_mirror_clamp_to_edge = hasExt("GL_ARB_texture_mirror_clamp_to_edge")
  GLAD_GL_ARB_texture_mirrored_repeat = hasExt("GL_ARB_texture_mirrored_repeat")
  GLAD_GL_ARB_texture_multisample = hasExt("GL_ARB_texture_multisample")
  GLAD_GL_ARB_texture_non_power_of_two = hasExt("GL_ARB_texture_non_power_of_two")
  GLAD_GL_ARB_texture_query_levels = hasExt("GL_ARB_texture_query_levels")
  GLAD_GL_ARB_texture_query_lod = hasExt("GL_ARB_texture_query_lod")
  GLAD_GL_ARB_texture_rectangle = hasExt("GL_ARB_texture_rectangle")
  GLAD_GL_ARB_texture_rg = hasExt("GL_ARB_texture_rg")
  GLAD_GL_ARB_texture_rgb10_a2ui = hasExt("GL_ARB_texture_rgb10_a2ui")
  GLAD_GL_ARB_texture_stencil8 = hasExt("GL_ARB_texture_stencil8")
  GLAD_GL_ARB_texture_storage = hasExt("GL_ARB_texture_storage")
  GLAD_GL_ARB_texture_storage_multisample = hasExt("GL_ARB_texture_storage_multisample")
  GLAD_GL_ARB_texture_swizzle = hasExt("GL_ARB_texture_swizzle")
  GLAD_GL_ARB_texture_view = hasExt("GL_ARB_texture_view")
  GLAD_GL_ARB_timer_query = hasExt("GL_ARB_timer_query")
  GLAD_GL_ARB_transform_feedback2 = hasExt("GL_ARB_transform_feedback2")
  GLAD_GL_ARB_transform_feedback3 = hasExt("GL_ARB_transform_feedback3")
  GLAD_GL_ARB_transform_feedback_instanced = hasExt("GL_ARB_transform_feedback_instanced")
  GLAD_GL_ARB_transform_feedback_overflow_query = hasExt("GL_ARB_transform_feedback_overflow_query")
  GLAD_GL_ARB_transpose_matrix = hasExt("GL_ARB_transpose_matrix")
  GLAD_GL_ARB_uniform_buffer_object = hasExt("GL_ARB_uniform_buffer_object")
  GLAD_GL_ARB_vertex_array_bgra = hasExt("GL_ARB_vertex_array_bgra")
  GLAD_GL_ARB_vertex_array_object = hasExt("GL_ARB_vertex_array_object")
  GLAD_GL_ARB_vertex_attrib_64bit = hasExt("GL_ARB_vertex_attrib_64bit")
  GLAD_GL_ARB_vertex_attrib_binding = hasExt("GL_ARB_vertex_attrib_binding")
  GLAD_GL_ARB_vertex_blend = hasExt("GL_ARB_vertex_blend")
  GLAD_GL_ARB_vertex_buffer_object = hasExt("GL_ARB_vertex_buffer_object")
  GLAD_GL_ARB_vertex_program = hasExt("GL_ARB_vertex_program")
  GLAD_GL_ARB_vertex_shader = hasExt("GL_ARB_vertex_shader")
  GLAD_GL_ARB_vertex_type_10f_11f_11f_rev = hasExt("GL_ARB_vertex_type_10f_11f_11f_rev")
  GLAD_GL_ARB_vertex_type_2_10_10_10_rev = hasExt("GL_ARB_vertex_type_2_10_10_10_rev")
  GLAD_GL_ARB_viewport_array = hasExt("GL_ARB_viewport_array")
  GLAD_GL_ARB_window_pos = hasExt("GL_ARB_window_pos")
  GLAD_GL_ATI_draw_buffers = hasExt("GL_ATI_draw_buffers")
  GLAD_GL_ATI_element_array = hasExt("GL_ATI_element_array")
  GLAD_GL_ATI_envmap_bumpmap = hasExt("GL_ATI_envmap_bumpmap")
  GLAD_GL_ATI_fragment_shader = hasExt("GL_ATI_fragment_shader")
  GLAD_GL_ATI_map_object_buffer = hasExt("GL_ATI_map_object_buffer")
  GLAD_GL_ATI_meminfo = hasExt("GL_ATI_meminfo")
  GLAD_GL_ATI_pixel_format_float = hasExt("GL_ATI_pixel_format_float")
  GLAD_GL_ATI_pn_triangles = hasExt("GL_ATI_pn_triangles")
  GLAD_GL_ATI_separate_stencil = hasExt("GL_ATI_separate_stencil")
  GLAD_GL_ATI_text_fragment_shader = hasExt("GL_ATI_text_fragment_shader")
  GLAD_GL_ATI_texture_env_combine3 = hasExt("GL_ATI_texture_env_combine3")
  GLAD_GL_ATI_texture_float = hasExt("GL_ATI_texture_float")
  GLAD_GL_ATI_texture_mirror_once = hasExt("GL_ATI_texture_mirror_once")
  GLAD_GL_ATI_vertex_array_object = hasExt("GL_ATI_vertex_array_object")
  GLAD_GL_ATI_vertex_attrib_array_object = hasExt("GL_ATI_vertex_attrib_array_object")
  GLAD_GL_ATI_vertex_streams = hasExt("GL_ATI_vertex_streams")
  GLAD_GL_EXT_422_pixels = hasExt("GL_EXT_422_pixels")
  GLAD_GL_EXT_EGL_image_storage = hasExt("GL_EXT_EGL_image_storage")
  GLAD_GL_EXT_EGL_sync = hasExt("GL_EXT_EGL_sync")
  GLAD_GL_EXT_abgr = hasExt("GL_EXT_abgr")
  GLAD_GL_EXT_bgra = hasExt("GL_EXT_bgra")
  GLAD_GL_EXT_bindable_uniform = hasExt("GL_EXT_bindable_uniform")
  GLAD_GL_EXT_blend_color = hasExt("GL_EXT_blend_color")
  GLAD_GL_EXT_blend_equation_separate = hasExt("GL_EXT_blend_equation_separate")
  GLAD_GL_EXT_blend_func_separate = hasExt("GL_EXT_blend_func_separate")
  GLAD_GL_EXT_blend_logic_op = hasExt("GL_EXT_blend_logic_op")
  GLAD_GL_EXT_blend_minmax = hasExt("GL_EXT_blend_minmax")
  GLAD_GL_EXT_blend_subtract = hasExt("GL_EXT_blend_subtract")
  GLAD_GL_EXT_clip_volume_hint = hasExt("GL_EXT_clip_volume_hint")
  GLAD_GL_EXT_cmyka = hasExt("GL_EXT_cmyka")
  GLAD_GL_EXT_color_subtable = hasExt("GL_EXT_color_subtable")
  GLAD_GL_EXT_compiled_vertex_array = hasExt("GL_EXT_compiled_vertex_array")
  GLAD_GL_EXT_convolution = hasExt("GL_EXT_convolution")
  GLAD_GL_EXT_coordinate_frame = hasExt("GL_EXT_coordinate_frame")
  GLAD_GL_EXT_copy_texture = hasExt("GL_EXT_copy_texture")
  GLAD_GL_EXT_cull_vertex = hasExt("GL_EXT_cull_vertex")
  GLAD_GL_EXT_debug_label = hasExt("GL_EXT_debug_label")
  GLAD_GL_EXT_debug_marker = hasExt("GL_EXT_debug_marker")
  GLAD_GL_EXT_depth_bounds_test = hasExt("GL_EXT_depth_bounds_test")
  GLAD_GL_EXT_direct_state_access = hasExt("GL_EXT_direct_state_access")
  GLAD_GL_EXT_draw_buffers2 = hasExt("GL_EXT_draw_buffers2")
  GLAD_GL_EXT_draw_instanced = hasExt("GL_EXT_draw_instanced")
  GLAD_GL_EXT_draw_range_elements = hasExt("GL_EXT_draw_range_elements")
  GLAD_GL_EXT_external_buffer = hasExt("GL_EXT_external_buffer")
  GLAD_GL_EXT_fog_coord = hasExt("GL_EXT_fog_coord")
  GLAD_GL_EXT_framebuffer_blit = hasExt("GL_EXT_framebuffer_blit")
  GLAD_GL_EXT_framebuffer_multisample = hasExt("GL_EXT_framebuffer_multisample")
  GLAD_GL_EXT_framebuffer_multisample_blit_scaled = hasExt("GL_EXT_framebuffer_multisample_blit_scaled")
  GLAD_GL_EXT_framebuffer_object = hasExt("GL_EXT_framebuffer_object")
  GLAD_GL_EXT_framebuffer_sRGB = hasExt("GL_EXT_framebuffer_sRGB")
  GLAD_GL_EXT_geometry_shader4 = hasExt("GL_EXT_geometry_shader4")
  GLAD_GL_EXT_gpu_program_parameters = hasExt("GL_EXT_gpu_program_parameters")
  GLAD_GL_EXT_gpu_shader4 = hasExt("GL_EXT_gpu_shader4")
  GLAD_GL_EXT_histogram = hasExt("GL_EXT_histogram")
  GLAD_GL_EXT_index_array_formats = hasExt("GL_EXT_index_array_formats")
  GLAD_GL_EXT_index_func = hasExt("GL_EXT_index_func")
  GLAD_GL_EXT_index_material = hasExt("GL_EXT_index_material")
  GLAD_GL_EXT_index_texture = hasExt("GL_EXT_index_texture")
  GLAD_GL_EXT_light_texture = hasExt("GL_EXT_light_texture")
  GLAD_GL_EXT_memory_object = hasExt("GL_EXT_memory_object")
  GLAD_GL_EXT_memory_object_fd = hasExt("GL_EXT_memory_object_fd")
  GLAD_GL_EXT_memory_object_win32 = hasExt("GL_EXT_memory_object_win32")
  GLAD_GL_EXT_misc_attribute = hasExt("GL_EXT_misc_attribute")
  GLAD_GL_EXT_multi_draw_arrays = hasExt("GL_EXT_multi_draw_arrays")
  GLAD_GL_EXT_multisample = hasExt("GL_EXT_multisample")
  GLAD_GL_EXT_multiview_tessellation_geometry_shader = hasExt("GL_EXT_multiview_tessellation_geometry_shader")
  GLAD_GL_EXT_multiview_texture_multisample = hasExt("GL_EXT_multiview_texture_multisample")
  GLAD_GL_EXT_multiview_timer_query = hasExt("GL_EXT_multiview_timer_query")
  GLAD_GL_EXT_packed_depth_stencil = hasExt("GL_EXT_packed_depth_stencil")
  GLAD_GL_EXT_packed_float = hasExt("GL_EXT_packed_float")
  GLAD_GL_EXT_packed_pixels = hasExt("GL_EXT_packed_pixels")
  GLAD_GL_EXT_paletted_texture = hasExt("GL_EXT_paletted_texture")
  GLAD_GL_EXT_pixel_buffer_object = hasExt("GL_EXT_pixel_buffer_object")
  GLAD_GL_EXT_pixel_transform = hasExt("GL_EXT_pixel_transform")
  GLAD_GL_EXT_pixel_transform_color_table = hasExt("GL_EXT_pixel_transform_color_table")
  GLAD_GL_EXT_point_parameters = hasExt("GL_EXT_point_parameters")
  GLAD_GL_EXT_polygon_offset = hasExt("GL_EXT_polygon_offset")
  GLAD_GL_EXT_polygon_offset_clamp = hasExt("GL_EXT_polygon_offset_clamp")
  GLAD_GL_EXT_post_depth_coverage = hasExt("GL_EXT_post_depth_coverage")
  GLAD_GL_EXT_provoking_vertex = hasExt("GL_EXT_provoking_vertex")
  GLAD_GL_EXT_raster_multisample = hasExt("GL_EXT_raster_multisample")
  GLAD_GL_EXT_rescale_normal = hasExt("GL_EXT_rescale_normal")
  GLAD_GL_EXT_secondary_color = hasExt("GL_EXT_secondary_color")
  GLAD_GL_EXT_semaphore = hasExt("GL_EXT_semaphore")
  GLAD_GL_EXT_semaphore_fd = hasExt("GL_EXT_semaphore_fd")
  GLAD_GL_EXT_semaphore_win32 = hasExt("GL_EXT_semaphore_win32")
  GLAD_GL_EXT_separate_shader_objects = hasExt("GL_EXT_separate_shader_objects")
  GLAD_GL_EXT_separate_specular_color = hasExt("GL_EXT_separate_specular_color")
  GLAD_GL_EXT_shader_framebuffer_fetch = hasExt("GL_EXT_shader_framebuffer_fetch")
  GLAD_GL_EXT_shader_framebuffer_fetch_non_coherent = hasExt("GL_EXT_shader_framebuffer_fetch_non_coherent")
  GLAD_GL_EXT_shader_image_load_formatted = hasExt("GL_EXT_shader_image_load_formatted")
  GLAD_GL_EXT_shader_image_load_store = hasExt("GL_EXT_shader_image_load_store")
  GLAD_GL_EXT_shader_integer_mix = hasExt("GL_EXT_shader_integer_mix")
  GLAD_GL_EXT_shadow_funcs = hasExt("GL_EXT_shadow_funcs")
  GLAD_GL_EXT_shared_texture_palette = hasExt("GL_EXT_shared_texture_palette")
  GLAD_GL_EXT_sparse_texture2 = hasExt("GL_EXT_sparse_texture2")
  GLAD_GL_EXT_stencil_clear_tag = hasExt("GL_EXT_stencil_clear_tag")
  GLAD_GL_EXT_stencil_two_side = hasExt("GL_EXT_stencil_two_side")
  GLAD_GL_EXT_stencil_wrap = hasExt("GL_EXT_stencil_wrap")
  GLAD_GL_EXT_subtexture = hasExt("GL_EXT_subtexture")
  GLAD_GL_EXT_texture = hasExt("GL_EXT_texture")
  GLAD_GL_EXT_texture3D = hasExt("GL_EXT_texture3D")
  GLAD_GL_EXT_texture_array = hasExt("GL_EXT_texture_array")
  GLAD_GL_EXT_texture_buffer_object = hasExt("GL_EXT_texture_buffer_object")
  GLAD_GL_EXT_texture_compression_latc = hasExt("GL_EXT_texture_compression_latc")
  GLAD_GL_EXT_texture_compression_rgtc = hasExt("GL_EXT_texture_compression_rgtc")
  GLAD_GL_EXT_texture_compression_s3tc = hasExt("GL_EXT_texture_compression_s3tc")
  GLAD_GL_EXT_texture_cube_map = hasExt("GL_EXT_texture_cube_map")
  GLAD_GL_EXT_texture_env_add = hasExt("GL_EXT_texture_env_add")
  GLAD_GL_EXT_texture_env_combine = hasExt("GL_EXT_texture_env_combine")
  GLAD_GL_EXT_texture_env_dot3 = hasExt("GL_EXT_texture_env_dot3")
  GLAD_GL_EXT_texture_filter_anisotropic = hasExt("GL_EXT_texture_filter_anisotropic")
  GLAD_GL_EXT_texture_filter_minmax = hasExt("GL_EXT_texture_filter_minmax")
  GLAD_GL_EXT_texture_integer = hasExt("GL_EXT_texture_integer")
  GLAD_GL_EXT_texture_lod_bias = hasExt("GL_EXT_texture_lod_bias")
  GLAD_GL_EXT_texture_mirror_clamp = hasExt("GL_EXT_texture_mirror_clamp")
  GLAD_GL_EXT_texture_object = hasExt("GL_EXT_texture_object")
  GLAD_GL_EXT_texture_perturb_normal = hasExt("GL_EXT_texture_perturb_normal")
  GLAD_GL_EXT_texture_sRGB = hasExt("GL_EXT_texture_sRGB")
  GLAD_GL_EXT_texture_sRGB_R8 = hasExt("GL_EXT_texture_sRGB_R8")
  GLAD_GL_EXT_texture_sRGB_RG8 = hasExt("GL_EXT_texture_sRGB_RG8")
  GLAD_GL_EXT_texture_sRGB_decode = hasExt("GL_EXT_texture_sRGB_decode")
  GLAD_GL_EXT_texture_shadow_lod = hasExt("GL_EXT_texture_shadow_lod")
  GLAD_GL_EXT_texture_shared_exponent = hasExt("GL_EXT_texture_shared_exponent")
  GLAD_GL_EXT_texture_snorm = hasExt("GL_EXT_texture_snorm")
  GLAD_GL_EXT_texture_storage = hasExt("GL_EXT_texture_storage")
  GLAD_GL_EXT_texture_swizzle = hasExt("GL_EXT_texture_swizzle")
  GLAD_GL_EXT_timer_query = hasExt("GL_EXT_timer_query")
  GLAD_GL_EXT_transform_feedback = hasExt("GL_EXT_transform_feedback")
  GLAD_GL_EXT_vertex_array = hasExt("GL_EXT_vertex_array")
  GLAD_GL_EXT_vertex_array_bgra = hasExt("GL_EXT_vertex_array_bgra")
  GLAD_GL_EXT_vertex_attrib_64bit = hasExt("GL_EXT_vertex_attrib_64bit")
  GLAD_GL_EXT_vertex_shader = hasExt("GL_EXT_vertex_shader")
  GLAD_GL_EXT_vertex_weighting = hasExt("GL_EXT_vertex_weighting")
  GLAD_GL_EXT_win32_keyed_mutex = hasExt("GL_EXT_win32_keyed_mutex")
  GLAD_GL_EXT_window_rectangles = hasExt("GL_EXT_window_rectangles")
  GLAD_GL_EXT_x11_sync_object = hasExt("GL_EXT_x11_sync_object")
  GLAD_GL_GREMEDY_frame_terminator = hasExt("GL_GREMEDY_frame_terminator")
  GLAD_GL_GREMEDY_string_marker = hasExt("GL_GREMEDY_string_marker")
  GLAD_GL_HP_convolution_border_modes = hasExt("GL_HP_convolution_border_modes")
  GLAD_GL_HP_image_transform = hasExt("GL_HP_image_transform")
  GLAD_GL_HP_occlusion_test = hasExt("GL_HP_occlusion_test")
  GLAD_GL_HP_texture_lighting = hasExt("GL_HP_texture_lighting")
  GLAD_GL_IBM_cull_vertex = hasExt("GL_IBM_cull_vertex")
  GLAD_GL_IBM_multimode_draw_arrays = hasExt("GL_IBM_multimode_draw_arrays")
  GLAD_GL_IBM_rasterpos_clip = hasExt("GL_IBM_rasterpos_clip")
  GLAD_GL_IBM_static_data = hasExt("GL_IBM_static_data")
  GLAD_GL_IBM_texture_mirrored_repeat = hasExt("GL_IBM_texture_mirrored_repeat")
  GLAD_GL_IBM_vertex_array_lists = hasExt("GL_IBM_vertex_array_lists")
  GLAD_GL_INGR_blend_func_separate = hasExt("GL_INGR_blend_func_separate")
  GLAD_GL_INGR_color_clamp = hasExt("GL_INGR_color_clamp")
  GLAD_GL_INGR_interlace_read = hasExt("GL_INGR_interlace_read")
  GLAD_GL_INTEL_blackhole_render = hasExt("GL_INTEL_blackhole_render")
  GLAD_GL_INTEL_conservative_rasterization = hasExt("GL_INTEL_conservative_rasterization")
  GLAD_GL_INTEL_fragment_shader_ordering = hasExt("GL_INTEL_fragment_shader_ordering")
  GLAD_GL_INTEL_framebuffer_CMAA = hasExt("GL_INTEL_framebuffer_CMAA")
  GLAD_GL_INTEL_map_texture = hasExt("GL_INTEL_map_texture")
  GLAD_GL_INTEL_parallel_arrays = hasExt("GL_INTEL_parallel_arrays")
  GLAD_GL_INTEL_performance_query = hasExt("GL_INTEL_performance_query")
  GLAD_GL_KHR_blend_equation_advanced = hasExt("GL_KHR_blend_equation_advanced")
  GLAD_GL_KHR_blend_equation_advanced_coherent = hasExt("GL_KHR_blend_equation_advanced_coherent")
  GLAD_GL_KHR_context_flush_control = hasExt("GL_KHR_context_flush_control")
  GLAD_GL_KHR_debug = hasExt("GL_KHR_debug")
  GLAD_GL_KHR_no_error = hasExt("GL_KHR_no_error")
  GLAD_GL_KHR_parallel_shader_compile = hasExt("GL_KHR_parallel_shader_compile")
  GLAD_GL_KHR_robust_buffer_access_behavior = hasExt("GL_KHR_robust_buffer_access_behavior")
  GLAD_GL_KHR_robustness = hasExt("GL_KHR_robustness")
  GLAD_GL_KHR_shader_subgroup = hasExt("GL_KHR_shader_subgroup")
  GLAD_GL_KHR_texture_compression_astc_hdr = hasExt("GL_KHR_texture_compression_astc_hdr")
  GLAD_GL_KHR_texture_compression_astc_ldr = hasExt("GL_KHR_texture_compression_astc_ldr")
  GLAD_GL_KHR_texture_compression_astc_sliced_3d = hasExt("GL_KHR_texture_compression_astc_sliced_3d")
  GLAD_GL_MESAX_texture_stack = hasExt("GL_MESAX_texture_stack")
  GLAD_GL_MESA_framebuffer_flip_x = hasExt("GL_MESA_framebuffer_flip_x")
  GLAD_GL_MESA_framebuffer_flip_y = hasExt("GL_MESA_framebuffer_flip_y")
  GLAD_GL_MESA_framebuffer_swap_xy = hasExt("GL_MESA_framebuffer_swap_xy")
  GLAD_GL_MESA_pack_invert = hasExt("GL_MESA_pack_invert")
  GLAD_GL_MESA_program_binary_formats = hasExt("GL_MESA_program_binary_formats")
  GLAD_GL_MESA_resize_buffers = hasExt("GL_MESA_resize_buffers")
  GLAD_GL_MESA_shader_integer_functions = hasExt("GL_MESA_shader_integer_functions")
  GLAD_GL_MESA_tile_raster_order = hasExt("GL_MESA_tile_raster_order")
  GLAD_GL_MESA_window_pos = hasExt("GL_MESA_window_pos")
  GLAD_GL_MESA_ycbcr_texture = hasExt("GL_MESA_ycbcr_texture")
  GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers = hasExt("GL_NVX_blend_equation_advanced_multi_draw_buffers")
  GLAD_GL_NVX_conditional_render = hasExt("GL_NVX_conditional_render")
  GLAD_GL_NVX_gpu_memory_info = hasExt("GL_NVX_gpu_memory_info")
  GLAD_GL_NVX_gpu_multicast2 = hasExt("GL_NVX_gpu_multicast2")
  GLAD_GL_NVX_linked_gpu_multicast = hasExt("GL_NVX_linked_gpu_multicast")
  GLAD_GL_NVX_progress_fence = hasExt("GL_NVX_progress_fence")
  GLAD_GL_NV_alpha_to_coverage_dither_control = hasExt("GL_NV_alpha_to_coverage_dither_control")
  GLAD_GL_NV_bindless_multi_draw_indirect = hasExt("GL_NV_bindless_multi_draw_indirect")
  GLAD_GL_NV_bindless_multi_draw_indirect_count = hasExt("GL_NV_bindless_multi_draw_indirect_count")
  GLAD_GL_NV_bindless_texture = hasExt("GL_NV_bindless_texture")
  GLAD_GL_NV_blend_equation_advanced = hasExt("GL_NV_blend_equation_advanced")
  GLAD_GL_NV_blend_equation_advanced_coherent = hasExt("GL_NV_blend_equation_advanced_coherent")
  GLAD_GL_NV_blend_minmax_factor = hasExt("GL_NV_blend_minmax_factor")
  GLAD_GL_NV_blend_square = hasExt("GL_NV_blend_square")
  GLAD_GL_NV_clip_space_w_scaling = hasExt("GL_NV_clip_space_w_scaling")
  GLAD_GL_NV_command_list = hasExt("GL_NV_command_list")
  GLAD_GL_NV_compute_program5 = hasExt("GL_NV_compute_program5")
  GLAD_GL_NV_compute_shader_derivatives = hasExt("GL_NV_compute_shader_derivatives")
  GLAD_GL_NV_conditional_render = hasExt("GL_NV_conditional_render")
  GLAD_GL_NV_conservative_raster = hasExt("GL_NV_conservative_raster")
  GLAD_GL_NV_conservative_raster_dilate = hasExt("GL_NV_conservative_raster_dilate")
  GLAD_GL_NV_conservative_raster_pre_snap = hasExt("GL_NV_conservative_raster_pre_snap")
  GLAD_GL_NV_conservative_raster_pre_snap_triangles = hasExt("GL_NV_conservative_raster_pre_snap_triangles")
  GLAD_GL_NV_conservative_raster_underestimation = hasExt("GL_NV_conservative_raster_underestimation")
  GLAD_GL_NV_copy_depth_to_color = hasExt("GL_NV_copy_depth_to_color")
  GLAD_GL_NV_copy_image = hasExt("GL_NV_copy_image")
  GLAD_GL_NV_deep_texture3D = hasExt("GL_NV_deep_texture3D")
  GLAD_GL_NV_depth_buffer_float = hasExt("GL_NV_depth_buffer_float")
  GLAD_GL_NV_depth_clamp = hasExt("GL_NV_depth_clamp")
  GLAD_GL_NV_draw_texture = hasExt("GL_NV_draw_texture")
  GLAD_GL_NV_draw_vulkan_image = hasExt("GL_NV_draw_vulkan_image")
  GLAD_GL_NV_evaluators = hasExt("GL_NV_evaluators")
  GLAD_GL_NV_explicit_multisample = hasExt("GL_NV_explicit_multisample")
  GLAD_GL_NV_fence = hasExt("GL_NV_fence")
  GLAD_GL_NV_fill_rectangle = hasExt("GL_NV_fill_rectangle")
  GLAD_GL_NV_float_buffer = hasExt("GL_NV_float_buffer")
  GLAD_GL_NV_fog_distance = hasExt("GL_NV_fog_distance")
  GLAD_GL_NV_fragment_coverage_to_color = hasExt("GL_NV_fragment_coverage_to_color")
  GLAD_GL_NV_fragment_program = hasExt("GL_NV_fragment_program")
  GLAD_GL_NV_fragment_program2 = hasExt("GL_NV_fragment_program2")
  GLAD_GL_NV_fragment_program4 = hasExt("GL_NV_fragment_program4")
  GLAD_GL_NV_fragment_program_option = hasExt("GL_NV_fragment_program_option")
  GLAD_GL_NV_fragment_shader_barycentric = hasExt("GL_NV_fragment_shader_barycentric")
  GLAD_GL_NV_fragment_shader_interlock = hasExt("GL_NV_fragment_shader_interlock")
  GLAD_GL_NV_framebuffer_mixed_samples = hasExt("GL_NV_framebuffer_mixed_samples")
  GLAD_GL_NV_framebuffer_multisample_coverage = hasExt("GL_NV_framebuffer_multisample_coverage")
  GLAD_GL_NV_geometry_program4 = hasExt("GL_NV_geometry_program4")
  GLAD_GL_NV_geometry_shader4 = hasExt("GL_NV_geometry_shader4")
  GLAD_GL_NV_geometry_shader_passthrough = hasExt("GL_NV_geometry_shader_passthrough")
  GLAD_GL_NV_gpu_multicast = hasExt("GL_NV_gpu_multicast")
  GLAD_GL_NV_gpu_program4 = hasExt("GL_NV_gpu_program4")
  GLAD_GL_NV_gpu_program5 = hasExt("GL_NV_gpu_program5")
  GLAD_GL_NV_gpu_program5_mem_extended = hasExt("GL_NV_gpu_program5_mem_extended")
  GLAD_GL_NV_gpu_shader5 = hasExt("GL_NV_gpu_shader5")
  GLAD_GL_NV_half_float = hasExt("GL_NV_half_float")
  GLAD_GL_NV_internalformat_sample_query = hasExt("GL_NV_internalformat_sample_query")
  GLAD_GL_NV_light_max_exponent = hasExt("GL_NV_light_max_exponent")
  GLAD_GL_NV_memory_attachment = hasExt("GL_NV_memory_attachment")
  GLAD_GL_NV_memory_object_sparse = hasExt("GL_NV_memory_object_sparse")
  GLAD_GL_NV_mesh_shader = hasExt("GL_NV_mesh_shader")
  GLAD_GL_NV_multisample_coverage = hasExt("GL_NV_multisample_coverage")
  GLAD_GL_NV_multisample_filter_hint = hasExt("GL_NV_multisample_filter_hint")
  GLAD_GL_NV_occlusion_query = hasExt("GL_NV_occlusion_query")
  GLAD_GL_NV_packed_depth_stencil = hasExt("GL_NV_packed_depth_stencil")
  GLAD_GL_NV_parameter_buffer_object = hasExt("GL_NV_parameter_buffer_object")
  GLAD_GL_NV_parameter_buffer_object2 = hasExt("GL_NV_parameter_buffer_object2")
  GLAD_GL_NV_path_rendering = hasExt("GL_NV_path_rendering")
  GLAD_GL_NV_path_rendering_shared_edge = hasExt("GL_NV_path_rendering_shared_edge")
  GLAD_GL_NV_pixel_data_range = hasExt("GL_NV_pixel_data_range")
  GLAD_GL_NV_point_sprite = hasExt("GL_NV_point_sprite")
  GLAD_GL_NV_present_video = hasExt("GL_NV_present_video")
  GLAD_GL_NV_primitive_restart = hasExt("GL_NV_primitive_restart")
  GLAD_GL_NV_primitive_shading_rate = hasExt("GL_NV_primitive_shading_rate")
  GLAD_GL_NV_query_resource = hasExt("GL_NV_query_resource")
  GLAD_GL_NV_query_resource_tag = hasExt("GL_NV_query_resource_tag")
  GLAD_GL_NV_register_combiners = hasExt("GL_NV_register_combiners")
  GLAD_GL_NV_register_combiners2 = hasExt("GL_NV_register_combiners2")
  GLAD_GL_NV_representative_fragment_test = hasExt("GL_NV_representative_fragment_test")
  GLAD_GL_NV_robustness_video_memory_purge = hasExt("GL_NV_robustness_video_memory_purge")
  GLAD_GL_NV_sample_locations = hasExt("GL_NV_sample_locations")
  GLAD_GL_NV_sample_mask_override_coverage = hasExt("GL_NV_sample_mask_override_coverage")
  GLAD_GL_NV_scissor_exclusive = hasExt("GL_NV_scissor_exclusive")
  GLAD_GL_NV_shader_atomic_counters = hasExt("GL_NV_shader_atomic_counters")
  GLAD_GL_NV_shader_atomic_float = hasExt("GL_NV_shader_atomic_float")
  GLAD_GL_NV_shader_atomic_float64 = hasExt("GL_NV_shader_atomic_float64")
  GLAD_GL_NV_shader_atomic_fp16_vector = hasExt("GL_NV_shader_atomic_fp16_vector")
  GLAD_GL_NV_shader_atomic_int64 = hasExt("GL_NV_shader_atomic_int64")
  GLAD_GL_NV_shader_buffer_load = hasExt("GL_NV_shader_buffer_load")
  GLAD_GL_NV_shader_buffer_store = hasExt("GL_NV_shader_buffer_store")
  GLAD_GL_NV_shader_storage_buffer_object = hasExt("GL_NV_shader_storage_buffer_object")
  GLAD_GL_NV_shader_subgroup_partitioned = hasExt("GL_NV_shader_subgroup_partitioned")
  GLAD_GL_NV_shader_texture_footprint = hasExt("GL_NV_shader_texture_footprint")
  GLAD_GL_NV_shader_thread_group = hasExt("GL_NV_shader_thread_group")
  GLAD_GL_NV_shader_thread_shuffle = hasExt("GL_NV_shader_thread_shuffle")
  GLAD_GL_NV_shading_rate_image = hasExt("GL_NV_shading_rate_image")
  GLAD_GL_NV_stereo_view_rendering = hasExt("GL_NV_stereo_view_rendering")
  GLAD_GL_NV_tessellation_program5 = hasExt("GL_NV_tessellation_program5")
  GLAD_GL_NV_texgen_emboss = hasExt("GL_NV_texgen_emboss")
  GLAD_GL_NV_texgen_reflection = hasExt("GL_NV_texgen_reflection")
  GLAD_GL_NV_texture_barrier = hasExt("GL_NV_texture_barrier")
  GLAD_GL_NV_texture_compression_vtc = hasExt("GL_NV_texture_compression_vtc")
  GLAD_GL_NV_texture_env_combine4 = hasExt("GL_NV_texture_env_combine4")
  GLAD_GL_NV_texture_expand_normal = hasExt("GL_NV_texture_expand_normal")
  GLAD_GL_NV_texture_multisample = hasExt("GL_NV_texture_multisample")
  GLAD_GL_NV_texture_rectangle = hasExt("GL_NV_texture_rectangle")
  GLAD_GL_NV_texture_rectangle_compressed = hasExt("GL_NV_texture_rectangle_compressed")
  GLAD_GL_NV_texture_shader = hasExt("GL_NV_texture_shader")
  GLAD_GL_NV_texture_shader2 = hasExt("GL_NV_texture_shader2")
  GLAD_GL_NV_texture_shader3 = hasExt("GL_NV_texture_shader3")
  GLAD_GL_NV_timeline_semaphore = hasExt("GL_NV_timeline_semaphore")
  GLAD_GL_NV_transform_feedback = hasExt("GL_NV_transform_feedback")
  GLAD_GL_NV_transform_feedback2 = hasExt("GL_NV_transform_feedback2")
  GLAD_GL_NV_uniform_buffer_unified_memory = hasExt("GL_NV_uniform_buffer_unified_memory")
  GLAD_GL_NV_vdpau_interop = hasExt("GL_NV_vdpau_interop")
  GLAD_GL_NV_vdpau_interop2 = hasExt("GL_NV_vdpau_interop2")
  GLAD_GL_NV_vertex_array_range = hasExt("GL_NV_vertex_array_range")
  GLAD_GL_NV_vertex_array_range2 = hasExt("GL_NV_vertex_array_range2")
  GLAD_GL_NV_vertex_attrib_integer_64bit = hasExt("GL_NV_vertex_attrib_integer_64bit")
  GLAD_GL_NV_vertex_buffer_unified_memory = hasExt("GL_NV_vertex_buffer_unified_memory")
  GLAD_GL_NV_vertex_program = hasExt("GL_NV_vertex_program")
  GLAD_GL_NV_vertex_program1_1 = hasExt("GL_NV_vertex_program1_1")
  GLAD_GL_NV_vertex_program2 = hasExt("GL_NV_vertex_program2")
  GLAD_GL_NV_vertex_program2_option = hasExt("GL_NV_vertex_program2_option")
  GLAD_GL_NV_vertex_program3 = hasExt("GL_NV_vertex_program3")
  GLAD_GL_NV_vertex_program4 = hasExt("GL_NV_vertex_program4")
  GLAD_GL_NV_video_capture = hasExt("GL_NV_video_capture")
  GLAD_GL_NV_viewport_array2 = hasExt("GL_NV_viewport_array2")
  GLAD_GL_NV_viewport_swizzle = hasExt("GL_NV_viewport_swizzle")
  GLAD_GL_OES_byte_coordinates = hasExt("GL_OES_byte_coordinates")
  GLAD_GL_OES_compressed_paletted_texture = hasExt("GL_OES_compressed_paletted_texture")
  GLAD_GL_OES_fixed_point = hasExt("GL_OES_fixed_point")
  GLAD_GL_OES_query_matrix = hasExt("GL_OES_query_matrix")
  GLAD_GL_OES_read_format = hasExt("GL_OES_read_format")
  GLAD_GL_OES_single_precision = hasExt("GL_OES_single_precision")
  GLAD_GL_OML_interlace = hasExt("GL_OML_interlace")
  GLAD_GL_OML_resample = hasExt("GL_OML_resample")
  GLAD_GL_OML_subsample = hasExt("GL_OML_subsample")
  GLAD_GL_OVR_multiview = hasExt("GL_OVR_multiview")
  GLAD_GL_OVR_multiview2 = hasExt("GL_OVR_multiview2")
  GLAD_GL_PGI_misc_hints = hasExt("GL_PGI_misc_hints")
  GLAD_GL_PGI_vertex_hints = hasExt("GL_PGI_vertex_hints")
  GLAD_GL_REND_screen_coordinates = hasExt("GL_REND_screen_coordinates")
  GLAD_GL_S3_s3tc = hasExt("GL_S3_s3tc")
  GLAD_GL_SGIS_detail_texture = hasExt("GL_SGIS_detail_texture")
  GLAD_GL_SGIS_fog_function = hasExt("GL_SGIS_fog_function")
  GLAD_GL_SGIS_generate_mipmap = hasExt("GL_SGIS_generate_mipmap")
  GLAD_GL_SGIS_multisample = hasExt("GL_SGIS_multisample")
  GLAD_GL_SGIS_pixel_texture = hasExt("GL_SGIS_pixel_texture")
  GLAD_GL_SGIS_point_line_texgen = hasExt("GL_SGIS_point_line_texgen")
  GLAD_GL_SGIS_point_parameters = hasExt("GL_SGIS_point_parameters")
  GLAD_GL_SGIS_sharpen_texture = hasExt("GL_SGIS_sharpen_texture")
  GLAD_GL_SGIS_texture4D = hasExt("GL_SGIS_texture4D")
  GLAD_GL_SGIS_texture_border_clamp = hasExt("GL_SGIS_texture_border_clamp")
  GLAD_GL_SGIS_texture_color_mask = hasExt("GL_SGIS_texture_color_mask")
  GLAD_GL_SGIS_texture_edge_clamp = hasExt("GL_SGIS_texture_edge_clamp")
  GLAD_GL_SGIS_texture_filter4 = hasExt("GL_SGIS_texture_filter4")
  GLAD_GL_SGIS_texture_lod = hasExt("GL_SGIS_texture_lod")
  GLAD_GL_SGIS_texture_select = hasExt("GL_SGIS_texture_select")
  GLAD_GL_SGIX_async = hasExt("GL_SGIX_async")
  GLAD_GL_SGIX_async_histogram = hasExt("GL_SGIX_async_histogram")
  GLAD_GL_SGIX_async_pixel = hasExt("GL_SGIX_async_pixel")
  GLAD_GL_SGIX_blend_alpha_minmax = hasExt("GL_SGIX_blend_alpha_minmax")
  GLAD_GL_SGIX_calligraphic_fragment = hasExt("GL_SGIX_calligraphic_fragment")
  GLAD_GL_SGIX_clipmap = hasExt("GL_SGIX_clipmap")
  GLAD_GL_SGIX_convolution_accuracy = hasExt("GL_SGIX_convolution_accuracy")
  GLAD_GL_SGIX_depth_pass_instrument = hasExt("GL_SGIX_depth_pass_instrument")
  GLAD_GL_SGIX_depth_texture = hasExt("GL_SGIX_depth_texture")
  GLAD_GL_SGIX_flush_raster = hasExt("GL_SGIX_flush_raster")
  GLAD_GL_SGIX_fog_offset = hasExt("GL_SGIX_fog_offset")
  GLAD_GL_SGIX_fragment_lighting = hasExt("GL_SGIX_fragment_lighting")
  GLAD_GL_SGIX_framezoom = hasExt("GL_SGIX_framezoom")
  GLAD_GL_SGIX_igloo_interface = hasExt("GL_SGIX_igloo_interface")
  GLAD_GL_SGIX_instruments = hasExt("GL_SGIX_instruments")
  GLAD_GL_SGIX_interlace = hasExt("GL_SGIX_interlace")
  GLAD_GL_SGIX_ir_instrument1 = hasExt("GL_SGIX_ir_instrument1")
  GLAD_GL_SGIX_list_priority = hasExt("GL_SGIX_list_priority")
  GLAD_GL_SGIX_pixel_texture = hasExt("GL_SGIX_pixel_texture")
  GLAD_GL_SGIX_pixel_tiles = hasExt("GL_SGIX_pixel_tiles")
  GLAD_GL_SGIX_polynomial_ffd = hasExt("GL_SGIX_polynomial_ffd")
  GLAD_GL_SGIX_reference_plane = hasExt("GL_SGIX_reference_plane")
  GLAD_GL_SGIX_resample = hasExt("GL_SGIX_resample")
  GLAD_GL_SGIX_scalebias_hint = hasExt("GL_SGIX_scalebias_hint")
  GLAD_GL_SGIX_shadow = hasExt("GL_SGIX_shadow")
  GLAD_GL_SGIX_shadow_ambient = hasExt("GL_SGIX_shadow_ambient")
  GLAD_GL_SGIX_sprite = hasExt("GL_SGIX_sprite")
  GLAD_GL_SGIX_subsample = hasExt("GL_SGIX_subsample")
  GLAD_GL_SGIX_tag_sample_buffer = hasExt("GL_SGIX_tag_sample_buffer")
  GLAD_GL_SGIX_texture_add_env = hasExt("GL_SGIX_texture_add_env")
  GLAD_GL_SGIX_texture_coordinate_clamp = hasExt("GL_SGIX_texture_coordinate_clamp")
  GLAD_GL_SGIX_texture_lod_bias = hasExt("GL_SGIX_texture_lod_bias")
  GLAD_GL_SGIX_texture_multi_buffer = hasExt("GL_SGIX_texture_multi_buffer")
  GLAD_GL_SGIX_texture_scale_bias = hasExt("GL_SGIX_texture_scale_bias")
  GLAD_GL_SGIX_vertex_preclip = hasExt("GL_SGIX_vertex_preclip")
  GLAD_GL_SGIX_ycrcb = hasExt("GL_SGIX_ycrcb")
  GLAD_GL_SGIX_ycrcb_subsample = hasExt("GL_SGIX_ycrcb_subsample")
  GLAD_GL_SGIX_ycrcba = hasExt("GL_SGIX_ycrcba")
  GLAD_GL_SGI_color_matrix = hasExt("GL_SGI_color_matrix")
  GLAD_GL_SGI_color_table = hasExt("GL_SGI_color_table")
  GLAD_GL_SGI_texture_color_table = hasExt("GL_SGI_texture_color_table")
  GLAD_GL_SUNX_constant_data = hasExt("GL_SUNX_constant_data")
  GLAD_GL_SUN_convolution_border_modes = hasExt("GL_SUN_convolution_border_modes")
  GLAD_GL_SUN_global_alpha = hasExt("GL_SUN_global_alpha")
  GLAD_GL_SUN_mesh_array = hasExt("GL_SUN_mesh_array")
  GLAD_GL_SUN_slice_accum = hasExt("GL_SUN_slice_accum")
  GLAD_GL_SUN_triangle_list = hasExt("GL_SUN_triangle_list")
  GLAD_GL_SUN_vertex = hasExt("GL_SUN_vertex")
  GLAD_GL_WIN_phong_shading = hasExt("GL_WIN_phong_shading")
  GLAD_GL_WIN_specular_fog = hasExt("GL_WIN_specular_fog")
  discard


proc findCoreGL(glVersion: string) =
  # Thank you @elmindreda
  # https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
  # https://github.com/glfw/glfw/blob/master/src/context.c#L36
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_VERSION_1_0 = (major == 1 and minor >= 0) or major > 1
  GLAD_GL_VERSION_1_1 = (major == 1 and minor >= 1) or major > 1
  GLAD_GL_VERSION_1_2 = (major == 1 and minor >= 2) or major > 1
  GLAD_GL_VERSION_1_3 = (major == 1 and minor >= 3) or major > 1
  GLAD_GL_VERSION_1_4 = (major == 1 and minor >= 4) or major > 1
  GLAD_GL_VERSION_1_5 = (major == 1 and minor >= 5) or major > 1
  GLAD_GL_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2
  GLAD_GL_VERSION_2_1 = (major == 2 and minor >= 1) or major > 2
  GLAD_GL_VERSION_3_0 = (major == 3 and minor >= 0) or major > 3
  GLAD_GL_VERSION_3_1 = (major == 3 and minor >= 1) or major > 3
  GLAD_GL_VERSION_3_2 = (major == 3 and minor >= 2) or major > 3
  GLAD_GL_VERSION_3_3 = (major == 3 and minor >= 3) or major > 3
  GLAD_GL_VERSION_4_0 = (major == 4 and minor >= 0) or major > 4
  GLAD_GL_VERSION_4_1 = (major == 4 and minor >= 1) or major > 4
  GLAD_GL_VERSION_4_2 = (major == 4 and minor >= 2) or major > 4
  GLAD_GL_VERSION_4_3 = (major == 4 and minor >= 3) or major > 4
  GLAD_GL_VERSION_4_4 = (major == 4 and minor >= 4) or major > 4
  GLAD_GL_VERSION_4_5 = (major == 4 and minor >= 5) or major > 4
  GLAD_GL_VERSION_4_6 = (major == 4 and minor >= 6) or major > 4

proc gladLoadGL*(load: proc): bool {.exportc, cdecl, dynlib.} =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.stdcall.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGL($glVersion)

  load_GL_VERSION_1_0(load)
  load_GL_VERSION_1_1(load)
  load_GL_VERSION_1_2(load)
  load_GL_VERSION_1_3(load)
  load_GL_VERSION_1_4(load)
  load_GL_VERSION_1_5(load)
  load_GL_VERSION_2_0(load)
  load_GL_VERSION_2_1(load)
  load_GL_VERSION_3_0(load)
  load_GL_VERSION_3_1(load)
  load_GL_VERSION_3_2(load)
  load_GL_VERSION_3_3(load)
  load_GL_VERSION_4_0(load)
  load_GL_VERSION_4_1(load)
  load_GL_VERSION_4_2(load)
  load_GL_VERSION_4_3(load)
  load_GL_VERSION_4_4(load)
  load_GL_VERSION_4_5(load)
  load_GL_VERSION_4_6(load)

  findExtensionsGL()

  load_GL_3DFX_tbuffer(load);
  load_GL_AMD_debug_output(load);
  load_GL_AMD_draw_buffers_blend(load);
  load_GL_AMD_framebuffer_multisample_advanced(load);
  load_GL_AMD_framebuffer_sample_positions(load);
  load_GL_AMD_gpu_shader_int64(load);
  load_GL_AMD_interleaved_elements(load);
  load_GL_AMD_multi_draw_indirect(load);
  load_GL_AMD_name_gen_delete(load);
  load_GL_AMD_occlusion_query_event(load);
  load_GL_AMD_performance_monitor(load);
  load_GL_AMD_sample_positions(load);
  load_GL_AMD_sparse_texture(load);
  load_GL_AMD_stencil_operation_extended(load);
  load_GL_AMD_vertex_shader_tessellator(load);
  load_GL_APPLE_element_array(load);
  load_GL_APPLE_fence(load);
  load_GL_APPLE_flush_buffer_range(load);
  load_GL_APPLE_object_purgeable(load);
  load_GL_APPLE_texture_range(load);
  load_GL_APPLE_vertex_array_object(load);
  load_GL_APPLE_vertex_array_range(load);
  load_GL_APPLE_vertex_program_evaluators(load);
  load_GL_ARB_ES2_compatibility(load);
  load_GL_ARB_ES3_1_compatibility(load);
  load_GL_ARB_ES3_2_compatibility(load);
  load_GL_ARB_base_instance(load);
  load_GL_ARB_bindless_texture(load);
  load_GL_ARB_blend_func_extended(load);
  load_GL_ARB_buffer_storage(load);
  load_GL_ARB_cl_event(load);
  load_GL_ARB_clear_buffer_object(load);
  load_GL_ARB_clear_texture(load);
  load_GL_ARB_clip_control(load);
  load_GL_ARB_color_buffer_float(load);
  load_GL_ARB_compute_shader(load);
  load_GL_ARB_compute_variable_group_size(load);
  load_GL_ARB_copy_buffer(load);
  load_GL_ARB_copy_image(load);
  load_GL_ARB_debug_output(load);
  load_GL_ARB_direct_state_access(load);
  load_GL_ARB_draw_buffers(load);
  load_GL_ARB_draw_buffers_blend(load);
  load_GL_ARB_draw_elements_base_vertex(load);
  load_GL_ARB_draw_indirect(load);
  load_GL_ARB_draw_instanced(load);
  load_GL_ARB_fragment_program(load);
  load_GL_ARB_framebuffer_no_attachments(load);
  load_GL_ARB_framebuffer_object(load);
  load_GL_ARB_geometry_shader4(load);
  load_GL_ARB_get_program_binary(load);
  load_GL_ARB_get_texture_sub_image(load);
  load_GL_ARB_gl_spirv(load);
  load_GL_ARB_gpu_shader_fp64(load);
  load_GL_ARB_gpu_shader_int64(load);
  load_GL_ARB_imaging(load);
  load_GL_ARB_indirect_parameters(load);
  load_GL_ARB_instanced_arrays(load);
  load_GL_ARB_internalformat_query(load);
  load_GL_ARB_internalformat_query2(load);
  load_GL_ARB_invalidate_subdata(load);
  load_GL_ARB_map_buffer_range(load);
  load_GL_ARB_matrix_palette(load);
  load_GL_ARB_multi_bind(load);
  load_GL_ARB_multi_draw_indirect(load);
  load_GL_ARB_multisample(load);
  load_GL_ARB_multitexture(load);
  load_GL_ARB_occlusion_query(load);
  load_GL_ARB_parallel_shader_compile(load);
  load_GL_ARB_point_parameters(load);
  load_GL_ARB_polygon_offset_clamp(load);
  load_GL_ARB_program_interface_query(load);
  load_GL_ARB_provoking_vertex(load);
  load_GL_ARB_robustness(load);
  load_GL_ARB_sample_locations(load);
  load_GL_ARB_sample_shading(load);
  load_GL_ARB_sampler_objects(load);
  load_GL_ARB_separate_shader_objects(load);
  load_GL_ARB_shader_atomic_counters(load);
  load_GL_ARB_shader_image_load_store(load);
  load_GL_ARB_shader_objects(load);
  load_GL_ARB_shader_storage_buffer_object(load);
  load_GL_ARB_shader_subroutine(load);
  load_GL_ARB_shading_language_include(load);
  load_GL_ARB_sparse_buffer(load);
  load_GL_ARB_sparse_texture(load);
  load_GL_ARB_sync(load);
  load_GL_ARB_tessellation_shader(load);
  load_GL_ARB_texture_barrier(load);
  load_GL_ARB_texture_buffer_object(load);
  load_GL_ARB_texture_buffer_range(load);
  load_GL_ARB_texture_compression(load);
  load_GL_ARB_texture_multisample(load);
  load_GL_ARB_texture_storage(load);
  load_GL_ARB_texture_storage_multisample(load);
  load_GL_ARB_texture_view(load);
  load_GL_ARB_timer_query(load);
  load_GL_ARB_transform_feedback2(load);
  load_GL_ARB_transform_feedback3(load);
  load_GL_ARB_transform_feedback_instanced(load);
  load_GL_ARB_transpose_matrix(load);
  load_GL_ARB_uniform_buffer_object(load);
  load_GL_ARB_vertex_array_object(load);
  load_GL_ARB_vertex_attrib_64bit(load);
  load_GL_ARB_vertex_attrib_binding(load);
  load_GL_ARB_vertex_blend(load);
  load_GL_ARB_vertex_buffer_object(load);
  load_GL_ARB_vertex_program(load);
  load_GL_ARB_vertex_shader(load);
  load_GL_ARB_vertex_type_2_10_10_10_rev(load);
  load_GL_ARB_viewport_array(load);
  load_GL_ARB_window_pos(load);
  load_GL_ATI_draw_buffers(load);
  load_GL_ATI_element_array(load);
  load_GL_ATI_envmap_bumpmap(load);
  load_GL_ATI_fragment_shader(load);
  load_GL_ATI_map_object_buffer(load);
  load_GL_ATI_pn_triangles(load);
  load_GL_ATI_separate_stencil(load);
  load_GL_ATI_vertex_array_object(load);
  load_GL_ATI_vertex_attrib_array_object(load);
  load_GL_ATI_vertex_streams(load);
  load_GL_EXT_EGL_image_storage(load);
  load_GL_EXT_bindable_uniform(load);
  load_GL_EXT_blend_color(load);
  load_GL_EXT_blend_equation_separate(load);
  load_GL_EXT_blend_func_separate(load);
  load_GL_EXT_blend_minmax(load);
  load_GL_EXT_color_subtable(load);
  load_GL_EXT_compiled_vertex_array(load);
  load_GL_EXT_convolution(load);
  load_GL_EXT_coordinate_frame(load);
  load_GL_EXT_copy_texture(load);
  load_GL_EXT_cull_vertex(load);
  load_GL_EXT_debug_label(load);
  load_GL_EXT_debug_marker(load);
  load_GL_EXT_depth_bounds_test(load);
  load_GL_EXT_direct_state_access(load);
  load_GL_EXT_draw_buffers2(load);
  load_GL_EXT_draw_instanced(load);
  load_GL_EXT_draw_range_elements(load);
  load_GL_EXT_external_buffer(load);
  load_GL_EXT_fog_coord(load);
  load_GL_EXT_framebuffer_blit(load);
  load_GL_EXT_framebuffer_multisample(load);
  load_GL_EXT_framebuffer_object(load);
  load_GL_EXT_geometry_shader4(load);
  load_GL_EXT_gpu_program_parameters(load);
  load_GL_EXT_gpu_shader4(load);
  load_GL_EXT_histogram(load);
  load_GL_EXT_index_func(load);
  load_GL_EXT_index_material(load);
  load_GL_EXT_light_texture(load);
  load_GL_EXT_memory_object(load);
  load_GL_EXT_memory_object_fd(load);
  load_GL_EXT_memory_object_win32(load);
  load_GL_EXT_multi_draw_arrays(load);
  load_GL_EXT_multisample(load);
  load_GL_EXT_paletted_texture(load);
  load_GL_EXT_pixel_transform(load);
  load_GL_EXT_point_parameters(load);
  load_GL_EXT_polygon_offset(load);
  load_GL_EXT_polygon_offset_clamp(load);
  load_GL_EXT_provoking_vertex(load);
  load_GL_EXT_raster_multisample(load);
  load_GL_EXT_secondary_color(load);
  load_GL_EXT_semaphore(load);
  load_GL_EXT_semaphore_fd(load);
  load_GL_EXT_semaphore_win32(load);
  load_GL_EXT_separate_shader_objects(load);
  load_GL_EXT_shader_framebuffer_fetch_non_coherent(load);
  load_GL_EXT_shader_image_load_store(load);
  load_GL_EXT_stencil_clear_tag(load);
  load_GL_EXT_stencil_two_side(load);
  load_GL_EXT_subtexture(load);
  load_GL_EXT_texture3D(load);
  load_GL_EXT_texture_array(load);
  load_GL_EXT_texture_buffer_object(load);
  load_GL_EXT_texture_integer(load);
  load_GL_EXT_texture_object(load);
  load_GL_EXT_texture_perturb_normal(load);
  load_GL_EXT_texture_storage(load);
  load_GL_EXT_timer_query(load);
  load_GL_EXT_transform_feedback(load);
  load_GL_EXT_vertex_array(load);
  load_GL_EXT_vertex_attrib_64bit(load);
  load_GL_EXT_vertex_shader(load);
  load_GL_EXT_vertex_weighting(load);
  load_GL_EXT_win32_keyed_mutex(load);
  load_GL_EXT_window_rectangles(load);
  load_GL_EXT_x11_sync_object(load);
  load_GL_GREMEDY_frame_terminator(load);
  load_GL_GREMEDY_string_marker(load);
  load_GL_HP_image_transform(load);
  load_GL_IBM_multimode_draw_arrays(load);
  load_GL_IBM_static_data(load);
  load_GL_IBM_vertex_array_lists(load);
  load_GL_INGR_blend_func_separate(load);
  load_GL_INTEL_framebuffer_CMAA(load);
  load_GL_INTEL_map_texture(load);
  load_GL_INTEL_parallel_arrays(load);
  load_GL_INTEL_performance_query(load);
  load_GL_KHR_blend_equation_advanced(load);
  load_GL_KHR_debug(load);
  load_GL_KHR_parallel_shader_compile(load);
  load_GL_KHR_robustness(load);
  load_GL_MESA_framebuffer_flip_y(load);
  load_GL_MESA_resize_buffers(load);
  load_GL_MESA_window_pos(load);
  load_GL_NVX_conditional_render(load);
  load_GL_NVX_gpu_multicast2(load);
  load_GL_NVX_linked_gpu_multicast(load);
  load_GL_NVX_progress_fence(load);
  load_GL_NV_alpha_to_coverage_dither_control(load);
  load_GL_NV_bindless_multi_draw_indirect(load);
  load_GL_NV_bindless_multi_draw_indirect_count(load);
  load_GL_NV_bindless_texture(load);
  load_GL_NV_blend_equation_advanced(load);
  load_GL_NV_clip_space_w_scaling(load);
  load_GL_NV_command_list(load);
  load_GL_NV_conditional_render(load);
  load_GL_NV_conservative_raster(load);
  load_GL_NV_conservative_raster_dilate(load);
  load_GL_NV_conservative_raster_pre_snap_triangles(load);
  load_GL_NV_copy_image(load);
  load_GL_NV_depth_buffer_float(load);
  load_GL_NV_draw_texture(load);
  load_GL_NV_draw_vulkan_image(load);
  load_GL_NV_evaluators(load);
  load_GL_NV_explicit_multisample(load);
  load_GL_NV_fence(load);
  load_GL_NV_fragment_coverage_to_color(load);
  load_GL_NV_fragment_program(load);
  load_GL_NV_framebuffer_mixed_samples(load);
  load_GL_NV_framebuffer_multisample_coverage(load);
  load_GL_NV_geometry_program4(load);
  load_GL_NV_gpu_multicast(load);
  load_GL_NV_gpu_program4(load);
  load_GL_NV_gpu_program5(load);
  load_GL_NV_gpu_shader5(load);
  load_GL_NV_half_float(load);
  load_GL_NV_internalformat_sample_query(load);
  load_GL_NV_memory_attachment(load);
  load_GL_NV_memory_object_sparse(load);
  load_GL_NV_mesh_shader(load);
  load_GL_NV_occlusion_query(load);
  load_GL_NV_parameter_buffer_object(load);
  load_GL_NV_path_rendering(load);
  load_GL_NV_pixel_data_range(load);
  load_GL_NV_point_sprite(load);
  load_GL_NV_present_video(load);
  load_GL_NV_primitive_restart(load);
  load_GL_NV_query_resource(load);
  load_GL_NV_query_resource_tag(load);
  load_GL_NV_register_combiners(load);
  load_GL_NV_register_combiners2(load);
  load_GL_NV_sample_locations(load);
  load_GL_NV_scissor_exclusive(load);
  load_GL_NV_shader_buffer_load(load);
  load_GL_NV_shading_rate_image(load);
  load_GL_NV_texture_barrier(load);
  load_GL_NV_texture_multisample(load);
  load_GL_NV_timeline_semaphore(load);
  load_GL_NV_transform_feedback(load);
  load_GL_NV_transform_feedback2(load);
  load_GL_NV_vdpau_interop(load);
  load_GL_NV_vdpau_interop2(load);
  load_GL_NV_vertex_array_range(load);
  load_GL_NV_vertex_attrib_integer_64bit(load);
  load_GL_NV_vertex_buffer_unified_memory(load);
  load_GL_NV_vertex_program(load);
  load_GL_NV_vertex_program4(load);
  load_GL_NV_video_capture(load);
  load_GL_NV_viewport_swizzle(load);
  load_GL_OES_byte_coordinates(load);
  load_GL_OES_fixed_point(load);
  load_GL_OES_query_matrix(load);
  load_GL_OES_single_precision(load);
  load_GL_OVR_multiview(load);
  load_GL_PGI_misc_hints(load);
  load_GL_SGIS_detail_texture(load);
  load_GL_SGIS_fog_function(load);
  load_GL_SGIS_multisample(load);
  load_GL_SGIS_pixel_texture(load);
  load_GL_SGIS_point_parameters(load);
  load_GL_SGIS_sharpen_texture(load);
  load_GL_SGIS_texture4D(load);
  load_GL_SGIS_texture_color_mask(load);
  load_GL_SGIS_texture_filter4(load);
  load_GL_SGIX_async(load);
  load_GL_SGIX_flush_raster(load);
  load_GL_SGIX_fragment_lighting(load);
  load_GL_SGIX_framezoom(load);
  load_GL_SGIX_igloo_interface(load);
  load_GL_SGIX_instruments(load);
  load_GL_SGIX_list_priority(load);
  load_GL_SGIX_pixel_texture(load);
  load_GL_SGIX_polynomial_ffd(load);
  load_GL_SGIX_reference_plane(load);
  load_GL_SGIX_sprite(load);
  load_GL_SGIX_tag_sample_buffer(load);
  load_GL_SGI_color_table(load);
  load_GL_SUNX_constant_data(load);
  load_GL_SUN_global_alpha(load);
  load_GL_SUN_mesh_array(load);
  load_GL_SUN_triangle_list(load);
  load_GL_SUN_vertex(load);

  return glVersionMajor != 0 or glVersionMinor != 0